<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="SpecBit__VS__rollcall_8hpp" kind="file" language="C++">
    <compoundname>SpecBit_VS_rollcall.hpp</compoundname>
    <includes refid="SpecBit__types_8hpp" local="yes">gambit/SpecBit/SpecBit_types.hpp</includes>
    <includedby refid="SpecBit__rollcall_8hpp" local="yes">SpecBit_rollcall.hpp</includedby>
    <incdepgraph>
      <node id="35">
        <label>gambit/Logs/log_tags.hpp</label>
        <link refid="log__tags_8hpp"/>
      </node>
      <node id="1">
        <label>SpecBit_VS_rollcall.hpp</label>
        <link refid="SpecBit__VS__rollcall_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gambit/SpecBit/SpecBit_types.hpp</label>
        <link refid="SpecBit__types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>gambit/Utils/boost_fallbacks.hpp</label>
        <link refid="boost__fallbacks_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>gambit/Utils/cats.hpp</label>
        <link refid="Utils_2include_2gambit_2Utils_2cats_8hpp"/>
      </node>
      <node id="31">
        <label>gambit/Utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>gambit/Utils/export_symbols.hpp</label>
        <link refid="export__symbols_8hpp"/>
      </node>
      <node id="21">
        <label>gambit/Utils/local_info.hpp</label>
        <link refid="local__info_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
        <link refid="standalone__error__handlers_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>gambit/Utils/stringify.hpp</label>
        <link refid="stringify_8hpp"/>
      </node>
      <node id="12">
        <label>gambit/Utils/util_macros.hpp</label>
        <link refid="util__macros_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gambit/Utils/util_types.hpp</label>
        <link refid="util__types_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gambit/Utils/variadic_functions.hpp</label>
        <link refid="variadic__functions_8hpp"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>array</label>
      </node>
      <node id="22">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="17">
        <label>boost/detail/workaround.hpp</label>
      </node>
      <node id="28">
        <label>boost/preprocessor/arithmetic/sub.hpp</label>
      </node>
      <node id="18">
        <label>boost/preprocessor/cat.hpp</label>
      </node>
      <node id="27">
        <label>boost/preprocessor/comparison/equal.hpp</label>
      </node>
      <node id="16">
        <label>boost/preprocessor/config/config.hpp</label>
      </node>
      <node id="26">
        <label>boost/preprocessor/control/if.hpp</label>
      </node>
      <node id="29">
        <label>boost/preprocessor/punctuation/comma.hpp</label>
      </node>
      <node id="30">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="24">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="25">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="15">
        <label>boost/version.hpp</label>
      </node>
      <node id="40">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>complex</label>
      </node>
      <node id="9">
        <label>cstring</label>
      </node>
      <node id="45">
        <label>deque</label>
      </node>
      <node id="33">
        <label>exception</label>
      </node>
      <node id="44">
        <label>forward_list</label>
      </node>
      <node id="38">
        <label>fstream</label>
      </node>
      <node id="37">
        <label>iostream</label>
      </node>
      <node id="43">
        <label>list</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="8">
        <label>omp.h</label>
      </node>
      <node id="32">
        <label>set</label>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="39">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>unistd.h</label>
      </node>
      <node id="41">
        <label>unordered_map</label>
      </node>
      <node id="42">
        <label>unordered_set</label>
      </node>
      <node id="34">
        <label>utility</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>3bithit.cpp</label>
        <link refid="3bithit_8cpp"/>
      </node>
      <node id="14">
        <label>SpecBit_examples.cpp</label>
        <link refid="SpecBit__examples_8cpp"/>
      </node>
      <node id="15">
        <label>SpecBit_tests.cpp</label>
        <link refid="examples_2SpecBit__tests_8cpp"/>
      </node>
      <node id="1">
        <label>SpecBit_VS_rollcall.hpp</label>
        <link refid="SpecBit__VS__rollcall_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SpecBit_rollcall.hpp</label>
        <link refid="SpecBit__rollcall_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SpecBit.cpp</label>
        <link refid="SpecBit_8cpp"/>
      </node>
      <node id="5">
        <label>SpecBit_DMEFT.cpp</label>
        <link refid="SpecBit__DMEFT_8cpp"/>
      </node>
      <node id="6">
        <label>SpecBit_DiracSingletDM.cpp</label>
        <link refid="SpecBit__DiracSingletDM_8cpp"/>
      </node>
      <node id="7">
        <label>SpecBit_MDM.cpp</label>
        <link refid="SpecBit__MDM_8cpp"/>
      </node>
      <node id="8">
        <label>SpecBit_MSSM.cpp</label>
        <link refid="SpecBit__MSSM_8cpp"/>
      </node>
      <node id="9">
        <label>SpecBit_MajoranaSingletDM.cpp</label>
        <link refid="SpecBit__MajoranaSingletDM_8cpp"/>
      </node>
      <node id="10">
        <label>SpecBit_SM.cpp</label>
        <link refid="SpecBit__SM_8cpp"/>
      </node>
      <node id="11">
        <label>SpecBit_ScalarSingletDM.cpp</label>
        <link refid="SpecBit__ScalarSingletDM_8cpp"/>
      </node>
      <node id="12">
        <label>SpecBit_VS.cpp</label>
        <link refid="SpecBit__VS_8cpp"/>
      </node>
      <node id="13">
        <label>SpecBit_VectorSingletDM.cpp</label>
        <link refid="SpecBit__VectorSingletDM_8cpp"/>
      </node>
      <node id="16">
        <label>SpecBit_tests.cpp</label>
        <link refid="src_2SpecBit__tests_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>lnL_EW_vacuum</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="39" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>check_EW_stability_ScalarSingletDM_Z3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="42" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>lnL_high_scale_vacuum</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="53" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>lnL_highscale_vacuum_decay_single_field</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="56" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>high_scale_vacuum_info</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="63" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>find_min_lambda_ScalarSingletDM_Z2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="66" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>find_min_lambda_ScalarSingletDM_Z3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="76" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>find_min_lambda_MDM</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="86" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>expected_vacuum_lifetime</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="98" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_expected_vacuum_lifetime</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="100" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>check_perturbativity_to_lambda_min</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="106" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>check_perturb_min_lambda</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="108" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>lambdaB</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="114" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_lambdaB</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="116" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>panic_vacua</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="128" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>set_panic_vacua</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="130" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>tunnelling_strategy</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="137" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>set_tunnelling_strategy</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="139" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>VS_likelihood</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="145" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_likelihood_VS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="147" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>VS_results</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="155" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_VS_results</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="157" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>init_vevacious</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="165" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>initialize_vevacious</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="167" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>compare_panic_vacua</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="177" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>compare_panic_vacua</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="179" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>check_vacuum_stability</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="191" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>check_vacuum_stability_vevacious</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="193" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>vevacious_file_location</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="206" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>vevacious_file_location_MSSM</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="208" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>pass_spectrum_to_vevacious</initializer>
        <briefdescription>
<para>Tunnelling likelihood (including contributions set by panic_vacua) </para>
        </briefdescription>
        <detaileddescription>
<para>Model dependent capabilities.</para>
<para>Initialize vevacious with a set of <ref refid="namespaceYAML" kindref="compound">YAML</ref> runOptions.</para>
<para>Get all vevacious results from a vevacious run as str to dbl map to print them.</para>
<para>Create a string set containing a list with all panic vacua for the vacuum stability likelihood VS_likelihood</para>
<para>Create a string set containing a list of all tunnelling strategies for the vacuum stability likelihood VS_likelihood</para>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not.</para>
<para>Function for computing the stability of the scalar potential w.r.t. global minimum. Model independent. Just works with a filled instance of SpectrumEntriesForVevacious for the respective Model. calls two non-rollcalled helper functions: helper_run_vevacious &amp; helper_catch_vevacious</para>
<para>Name and locations of the ini files for Vevacious for each model, since they might not be just &lt;MODELNAME&gt;.vin, etc.</para>
<para>Function to create an object of type SpectrumEntriesForVevacious, holding all spectrum entries that have to be passed to vevacious (via SLHAea). Model dependent. Note that the actual execution of the passing is done in a non-rollcalled helper function (exec_pass_spectrum_to_vevacious) to allow for several vevacious runs per parameter point. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="218" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SpecBit__VS__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>prepare_pass_MSSM_spectrum_to_vevacious</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" line="221" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Rollcall declarations for module functions contained in <ref refid="SpecBit__VS_8cpp" kindref="compound">SpecBit_VS.cpp</ref></para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>James McKay (<ulink url="mailto:j.mckay14@imperial.ac.uk">j.mckay14@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>Nov 2015</para>
</simplesect>
<simplesect kind="author"><para>José Eliel Camargo-Molina (<ulink url="mailto:elielcamargomolina@gmail.com">elielcamargomolina@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>Jun 2018++</para>
</simplesect>
<simplesect kind="author"><para>Sanjay Bloor (<ulink url="mailto:sanjay.bloor12@imperial.ac.uk">sanjay.bloor12@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>Sep 2019</para>
</simplesect>
<simplesect kind="author"><para>Janina Renk (<ulink url="mailto:janina.renk@fysik.su.se">janina.renk@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 July, Dec</para>
</simplesect>
<simplesect kind="author"><para>Tomas Gonzalo (<ulink url="mailto:tomas.gonzalo@monash.edu">tomas.gonzalo@monash.edu</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2020 Sep</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>Rollcall<sp/>declarations<sp/>for<sp/>module<sp/>functions</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///<sp/><sp/>contained<sp/>in<sp/>SpecBit_VS.cpp</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///<sp/><sp/>Authors<sp/>(add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify):</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/>\author<sp/>James<sp/>McKay</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(j.mckay14@imperial.ac.uk)</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/><sp/>\date<sp/>Nov<sp/>2015</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/><sp/>\author<sp/>José<sp/>Eliel<sp/>Camargo-Molina</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(elielcamargomolina@gmail.com)</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///<sp/><sp/>\date<sp/>Jun<sp/>2018++</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///</highlight></codeline>
<codeline lineno="20"><highlight class="comment">///<sp/><sp/>\author<sp/>Sanjay<sp/>Bloor</highlight></codeline>
<codeline lineno="21"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sanjay.bloor12@imperial.ac.uk)</highlight></codeline>
<codeline lineno="22"><highlight class="comment">///<sp/><sp/>\date<sp/>Sep<sp/>2019</highlight></codeline>
<codeline lineno="23"><highlight class="comment">///</highlight></codeline>
<codeline lineno="24"><highlight class="comment">///<sp/><sp/>\author<sp/>Janina<sp/>Renk</highlight></codeline>
<codeline lineno="25"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(janina.renk@fysik.su.se)</highlight></codeline>
<codeline lineno="26"><highlight class="comment">///<sp/><sp/>\date<sp/>2019<sp/>July,<sp/>Dec</highlight></codeline>
<codeline lineno="27"><highlight class="comment">///</highlight></codeline>
<codeline lineno="28"><highlight class="comment">///<sp/><sp/>\author<sp/>Tomas<sp/>Gonzalo</highlight></codeline>
<codeline lineno="29"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tomas.gonzalo@monash.edu)</highlight></codeline>
<codeline lineno="30"><highlight class="comment">///<sp/><sp/>\date<sp/>2020<sp/>Sep</highlight></codeline>
<codeline lineno="31"><highlight class="comment">///</highlight></codeline>
<codeline lineno="32"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SpecBit_VS_rollcall_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SpecBit_VS_rollcall_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SpecBit__types_8hpp" kindref="compound">gambit/SpecBit/SpecBit_types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>lnL_EW_vacuum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>check_EW_stability_ScalarSingletDM_Z3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ScalarSingletDM_Z3_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODEL_DEPENDENCE(ScalarSingletDM_Z3)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(higgs,<sp/><sp/><sp/>(StandardModel_Higgs_running))</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(singlet,<sp/>(ScalarSingletDM_Z3_running))</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a7e1390bea9543ff21187afe1e55c4112" kindref="member">ALLOW_MODEL_COMBINATION</ref>(higgs,<sp/>singlet)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>lnL_high_scale_vacuum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>lnL_highscale_vacuum_decay_single_field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(high_scale_vacuum_info,<sp/>dbl_dbl_bool)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>high_scale_vacuum_info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>find_min_lambda_ScalarSingletDM_Z2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(dbl_dbl_bool)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(SMINPUTS,<sp/>SMInputs)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ScalarSingletDM_Z2_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODEL_DEPENDENCE(StandardModel_Higgs_running,<sp/>ScalarSingletDM_Z2_running)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(higgs,<sp/><sp/><sp/>(StandardModel_Higgs_running))</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(singlet,<sp/>(ScalarSingletDM_Z2_running))</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a7e1390bea9543ff21187afe1e55c4112" kindref="member">ALLOW_MODEL_COMBINATION</ref>(higgs,<sp/>singlet)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>find_min_lambda_ScalarSingletDM_Z3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(dbl_dbl_bool)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(SMINPUTS,<sp/>SMInputs)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ScalarSingletDM_Z3_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODEL_DEPENDENCE(StandardModel_Higgs_running,<sp/>ScalarSingletDM_Z3_running)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(higgs,<sp/><sp/><sp/>(StandardModel_Higgs_running))</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(singlet,<sp/>(ScalarSingletDM_Z3_running))</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a7e1390bea9543ff21187afe1e55c4112" kindref="member">ALLOW_MODEL_COMBINATION</ref>(higgs,<sp/>singlet)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>find_min_lambda_MDM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(dbl_dbl_bool)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(SMINPUTS,<sp/>SMInputs)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(MDM_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODEL_DEPENDENCE(StandardModel_Higgs_running,<sp/>MDM)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(higgs,<sp/><sp/><sp/>(StandardModel_Higgs_running))</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a744649941b5289338bd6e58bec67873e" kindref="member">MODEL_GROUP</ref>(mdm,<sp/>(MDM))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a7e1390bea9543ff21187afe1e55c4112" kindref="member">ALLOW_MODEL_COMBINATION</ref>(higgs,<sp/>mdm)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>expected_vacuum_lifetime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_expected_vacuum_lifetime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(high_scale_vacuum_info,<sp/>dbl_dbl_bool)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>check_perturbativity_to_lambda_min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>check_perturb_min_lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(high_scale_vacuum_info,<sp/>dbl_dbl_bool)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>lambdaB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_lambdaB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(high_scale_vacuum_info,<sp/>dbl_dbl_bool)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/***********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Vacuum<sp/>stability<sp/>with<sp/>Vevacious<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/***********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>///<sp/>Create<sp/>a<sp/>string<sp/>set<sp/>containing<sp/>a<sp/>list<sp/>with<sp/>all<sp/>panic<sp/>vacua<sp/>for<sp/>the<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>///<sp/>vacuum<sp/>stability<sp/>likelihood<sp/>VS_likelihood</highlight></codeline>
<codeline lineno="128"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>panic_vacua</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>set_panic_vacua</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(std::set&lt;std::string&gt;)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/>///<sp/>Create<sp/>a<sp/>string<sp/>set<sp/>containing<sp/>a<sp/>list<sp/>of<sp/>all<sp/>tunnelling<sp/>strategies<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/>///<sp/>vacuum<sp/>stability<sp/>likelihood<sp/>VS_likelihood</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>tunnelling_strategy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>set_tunnelling_strategy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(std::set&lt;std::string&gt;)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/>///<sp/>Tunnelling<sp/>likelihood<sp/>(including<sp/>contributions<sp/>set<sp/>by<sp/>panic_vacua)</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>VS_likelihood</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_likelihood_VS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(check_vacuum_stability,<sp/>SpecBit::VevaciousResultContainer)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(compare_panic_vacua,<sp/><ref refid="namespaceGambit_1a51de803e5143010226b0a7c7e7e05b88" kindref="member">map_str_str</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>///<sp/>Get<sp/>all<sp/>vevacious<sp/>results<sp/>from<sp/>a<sp/>vevacious<sp/>run<sp/>as<sp/>str<sp/>to<sp/>dbl<sp/>map<sp/>to<sp/>print<sp/>them</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>VS_results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_VS_results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(check_vacuum_stability,<sp/>SpecBit::VevaciousResultContainer)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(compare_panic_vacua,<sp/><ref refid="namespaceGambit_1a51de803e5143010226b0a7c7e7e05b88" kindref="member">map_str_str</ref>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/>///<sp/>Initialize<sp/>vevacious<sp/>with<sp/>a<sp/>set<sp/>of<sp/>YAML<sp/>runOptions.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>init_vevacious</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>initialize_vevacious</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(std::string)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(vevacious_file_location,<sp/><ref refid="namespaceGambit_1a51de803e5143010226b0a7c7e7e05b88" kindref="member">map_str_str</ref>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(tunnelling_strategy,std::set&lt;std::string&gt;)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/>///<sp/>If<sp/>tunnelling<sp/>to<sp/>global<sp/>and<sp/>nearest<sp/>vacuum<sp/>are<sp/>requested,<sp/>this</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/>///<sp/>capability<sp/>compares<sp/>if<sp/>the<sp/>two<sp/>vacua<sp/>are<sp/>the<sp/>same.<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/>///<sp/>Return<sp/>true<sp/>if<sp/>they<sp/>coincide,<sp/>false<sp/>if<sp/>not.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>compare_panic_vacua</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>compare_panic_vacua</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a51de803e5143010226b0a7c7e7e05b88" kindref="member">map_str_str</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(panic_vacua,std::set&lt;std::string&gt;)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(tunnelling_strategy,std::set&lt;std::string&gt;)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(pass_spectrum_to_vevacious,<sp/>SpecBit::SpectrumEntriesForVevacious)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a92dcf77fe1f3656a90aa0ef9eef4a06f" kindref="member">NEEDS_CLASSES_FROM</ref>(vevacious,<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/>///<sp/>Function<sp/>for<sp/>computing<sp/>the<sp/>stability<sp/>of<sp/>the<sp/>scalar<sp/>potential<sp/>w.r.t.<sp/>global<sp/>minimum.<sp/>Model<sp/>independent.<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>///<sp/>Just<sp/>works<sp/>with<sp/>a<sp/>filled<sp/>instance<sp/>of<sp/>SpectrumEntriesForVevacious<sp/>for<sp/>the<sp/>respective<sp/>Model.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/>///<sp/>calls<sp/>two<sp/>non-rollcalled<sp/>helper<sp/>functions:<sp/>helper_run_vevacious<sp/>&amp;<sp/>helper_catch_vevacious</highlight></codeline>
<codeline lineno="191"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>check_vacuum_stability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>check_vacuum_stability_vevacious</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(SpecBit::VevaciousResultContainer)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(compare_panic_vacua,<ref refid="namespaceGambit_1a51de803e5143010226b0a7c7e7e05b88" kindref="member">map_str_str</ref>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(pass_spectrum_to_vevacious,<sp/>SpecBit::SpectrumEntriesForVevacious)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(init_vevacious,<sp/>std::string)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a92dcf77fe1f3656a90aa0ef9eef4a06f" kindref="member">NEEDS_CLASSES_FROM</ref>(vevacious,<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>///<sp/>Model<sp/>dependent<sp/>capabilities</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/>///<sp/>Name<sp/>and<sp/>locations<sp/>of<sp/>the<sp/>ini<sp/>files<sp/>for<sp/>Vevacious</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>///<sp/>for<sp/>each<sp/>model,<sp/>since<sp/>they<sp/>might<sp/>not<sp/>be<sp/>just<sp/>&lt;MODELNAME&gt;.vin,<sp/>etc.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>vevacious_file_location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>vevacious_file_location_MSSM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a51de803e5143010226b0a7c7e7e05b88" kindref="member">map_str_str</ref>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(CMSSM,<sp/>MSSM63atMGUT,<sp/>MSSM63atQ)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>///<sp/>Function<sp/>to<sp/>create<sp/>an<sp/>object<sp/>of<sp/>type<sp/>SpectrumEntriesForVevacious,<sp/>holding<sp/>all<sp/>spectrum<sp/>entries</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/>///<sp/>that<sp/>have<sp/>to<sp/>be<sp/>passed<sp/>to<sp/>vevacious<sp/>(via<sp/>SLHAea).<sp/>Model<sp/>dependent.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>///<sp/>Note<sp/>that<sp/>the<sp/>actual<sp/>execution<sp/>of<sp/>the<sp/>passing<sp/>is<sp/>done<sp/>in<sp/>a<sp/>non-rollcalled<sp/>helper<sp/>function<sp/></highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>///<sp/>(exec_pass_spectrum_to_vevacious)<sp/>to<sp/>allow<sp/>for<sp/>several<sp/>vevacious<sp/>runs<sp/>per<sp/>parameter<sp/>point.<sp/></highlight></codeline>
<codeline lineno="218" refid="SpecBit__VS__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" refkind="member"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>pass_spectrum_to_vevacious</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>FUNCTION<sp/>prepare_pass_MSSM_spectrum_to_vevacious</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(SpecBit::SpectrumEntriesForVevacious)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(MSSM_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(init_vevacious,<sp/>std::string)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_MODELS(CMSSM,<sp/>MSSM63atMGUT,<sp/>MSSM63atQ)<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="SpecBit/include/gambit/SpecBit/SpecBit_VS_rollcall.hpp"/>
  </compounddef>
</doxygen>
