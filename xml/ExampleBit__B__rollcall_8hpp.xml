<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ExampleBit__B__rollcall_8hpp" kind="file" language="C++">
    <compoundname>ExampleBit_B_rollcall.hpp</compoundname>
    <includedby refid="ExampleBit__B_8cpp" local="yes">ExampleBit_B.cpp</includedby>
    <invincdepgraph>
      <node id="1">
        <label>ExampleBit_B_rollcall.hpp</label>
        <link refid="ExampleBit__B__rollcall_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ExampleBit_B.cpp</label>
        <link refid="ExampleBit__B_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a2c63ae95fe7c6106ae1ec9c283afa486" prot="public" static="no">
        <name>MODULE</name>
        <initializer>ExampleBit_B</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that this is the MODULE named ExampleBit_B. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="69" column="9" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>xsection</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) is capable of providing the service CAPABILITY. Usually a CAPABILITY means that the MODULE can compute some physical or statistical quantity referred to by CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="72" column="11" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>sigma_example</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) contains a function named FUNCTION that can execute the commands required to provided the current CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="75" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>sigma_example_req_pars</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) contains a function named FUNCTION that can execute the commands required to provided the current CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="80" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>charge</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) is capable of providing the service CAPABILITY. Usually a CAPABILITY means that the MODULE can compute some physical or statistical quantity referred to by CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="88" column="11" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>q_example</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) contains a function named FUNCTION that can execute the commands required to provided the current CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="91" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>nevents_postcuts</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) is capable of providing the service CAPABILITY. Usually a CAPABILITY means that the MODULE can compute some physical or statistical quantity referred to by CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="100" column="11" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>predicted_events</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) contains a function named FUNCTION that can execute the commands required to provided the current CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="104" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a0a2c1c9dc69b1048ddca06fb58542b86" prot="public" static="no">
        <name>CONDITIONAL_DEPENDENCY</name>
        <initializer>particle_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that the current FUNCTION in ExampleBit_B (this MODULE) has a CONDITIONAL_DEPENDENCY that is only active under certain conditions. These conditions may include:<itemizedlist>
<listitem><para>a specific backend is in use in order to fill a certain BACKEND_REQ</para>
</listitem><listitem><para>a certain model is under analysis </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="125" column="13"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>nevents</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) is capable of providing the service CAPABILITY. Usually a CAPABILITY means that the MODULE can compute some physical or statistical quantity referred to by CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="137" column="11" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>event_count</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) contains a function named FUNCTION that can execute the commands required to provided the current CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="140" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>particle_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) is capable of providing the service CAPABILITY. Usually a CAPABILITY means that the MODULE can compute some physical or statistical quantity referred to by CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="147" column="11" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>particle_identity</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) contains a function named FUNCTION that can execute the commands required to provided the current CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="150" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ptr_arr_tests</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) is capable of providing the service CAPABILITY. Usually a CAPABILITY means that the MODULE can compute some physical or statistical quantity referred to by CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="157" column="11" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>ptrArrTester</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that ExampleBit_B (this MODULE) contains a function named FUNCTION that can execute the commands required to provided the current CAPABILITY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="159" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ExampleBit__B__rollcall_8hpp_1a97c98df6ecb87ed6e690c45e63085afa" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double lib123</definition>
        <argsstring></argsstring>
        <name>lib123</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="109" column="6" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ExampleBit__B__rollcall_8hpp_1ae5724b50b2c040169a1b83facd25672c" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double int double double double</definition>
        <argsstring></argsstring>
        <name>double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="109" column="13" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ExampleBit__B__rollcall_8hpp_1af2c6a4a6290674787dfb94b3fca084fa" prot="public" static="no" mutable="no">
        <type>double int</type>
        <definition>double int double double common_be</definition>
        <argsstring></argsstring>
        <name>common_be</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="111" column="6" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ExampleBit__B__rollcall_8hpp_1a673b427cd089bbc728fded2d1a44d15b" prot="public" static="no" mutable="no">
        <type>double int</type>
        <definition>double int double double etc void</definition>
        <argsstring></argsstring>
        <name>void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="111" column="16" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ExampleBit__B__rollcall_8hpp_1a60d9dbbcf9a7b35e48fa7e54c214a009" prot="public" static="no" mutable="no">
        <type>double int double double</type>
        <definition>double int double double int</definition>
        <argsstring></argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="113" column="23" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ExampleBit__B__rollcall_8hpp_1a6538014c8243561f384a2fe6be9c0fab" prot="public" static="no" mutable="no">
        <type>double int double double etc</type>
        <definition>double int double double etc lib123 not_libfirst10</definition>
        <argsstring></argsstring>
        <name>not_libfirst10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="116" column="6" bodyfile="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1a5f05cfdcff4520482f35f3c5150dbf56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>START_FUNCTION</definition>
        <argsstring>(double) START_FUNCTION(double) START_CAPABILITY START_FUNCTION(int) ALLOW_MODELS(demo_B</argsstring>
        <name>START_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="76" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1a79cf810b2bf5ecf8884e00bf96775659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>START_FUNCTION</definition>
        <argsstring>(int) DEPENDENCY(nevents</argsstring>
        <name>START_FUNCTION</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="105" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1ade0e20d071d6cbded02c6762da21ecd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double DEPENDENCY</definition>
        <argsstring>(function_pointer, fptr) BACKEND_REQ(awesomeness</argsstring>
        <name>DEPENDENCY</name>
        <param>
          <type>function_pointer</type>
        </param>
        <param>
          <type>fptr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="107" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1a3aa1491ffd658d9c3b75dfdf19b683d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double int</type>
        <definition>double int BACKEND_REQ</definition>
        <argsstring>(refex,(common_be), double,(double &amp;)) BACKEND_REQ(refex2</argsstring>
        <name>BACKEND_REQ</name>
        <param>
          <type>refex</type>
        </param>
        <param>
          <type>(common_be)</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>(double &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="110" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1a2857ca8da19fd9c2e4b1519556891548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double int double double</type>
        <definition>double int double double BACKEND_REQ</definition>
        <argsstring>(varex,(common_be), double,(int, etc)) BACKEND_REQ(varex2</argsstring>
        <name>BACKEND_REQ</name>
        <param>
          <type>varex</type>
        </param>
        <param>
          <type>(common_be)</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>(int, etc)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="112" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1a363ee28cc8b860013edebb4ac56d3b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double int double double etc</type>
        <definition>double int double double etc BACKEND_REQ</definition>
        <argsstring>(runMe,(), void,(double(*)(int &amp;), int &amp;)) BACKEND_REQ(someFunction</argsstring>
        <name>BACKEND_REQ</name>
        <param>
          <type>runMe</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>void</type>
        </param>
        <param>
          <type>(double(*)(int &amp;), int &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="114" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1a82960773b84eabcd0c6004a92b6baff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double int double double etc</type>
        <definition>double int double double etc ACTIVATE_BACKEND_REQ_FOR_MODELS</definition>
        <argsstring>((CMSSM, demo_B, nonexistent_model),(model_dependent_reqs)) BACKEND_OPTION((LibFirst)</argsstring>
        <name>ACTIVATE_BACKEND_REQ_FOR_MODELS</name>
        <param>
          <type>(CMSSM, demo_B, nonexistent_model)</type>
        </param>
        <param>
          <type>(model_dependent_reqs)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="118" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__B__rollcall_8hpp_1abe8e69654fcf1611ebf0b8e662563f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double int double double etc lib123</type>
        <definition>double int double double etc lib123 BACKEND_OPTION</definition>
        <argsstring>((LibFirst, 1.1),(not_libfirst10)) BACKEND_OPTION((LibSecond)</argsstring>
        <name>BACKEND_OPTION</name>
        <param>
          <type>(LibFirst, 1.1)</type>
        </param>
        <param>
          <type>(not_libfirst10)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp" line="120" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Rollcall header for module ExampleBit_B.</para>
<para>Compile-time registration of available observables and likelihoods, as well as their dependencies.</para>
<para>Add to this if you want to add an observable or likelihood to this module.</para>
<para>Don&apos;t put typedefs or other type definitions in this file; see <ref refid="types__rollcall_8hpp" kindref="compound">Elements/include/gambit/Elements/types_rollcall.hpp</ref> for further instructions on how to add new types.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Pat Scott </para>
</simplesect>
<simplesect kind="date"><para>2012 Nov </para>
</simplesect>
<simplesect kind="date"><para>2013 Jan, Feb, April, May</para>
</simplesect>
<simplesect kind="author"><para>Anders Kvellestad (<ulink url="mailto:anders.kvellestad@fys.uio.no">anders.kvellestad@fys.uio.no</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 Nov <hruler/>
 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>Rollcall<sp/>header<sp/>for<sp/>module<sp/>ExampleBit_B.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///<sp/><sp/>Compile-time<sp/>registration<sp/>of<sp/>available</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///<sp/><sp/>observables<sp/>and<sp/>likelihoods,<sp/>as<sp/>well<sp/>as<sp/>their</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///<sp/><sp/>dependencies.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///<sp/><sp/>Add<sp/>to<sp/>this<sp/>if<sp/>you<sp/>want<sp/>to<sp/>add<sp/>an<sp/>observable</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/>or<sp/>likelihood<sp/>to<sp/>this<sp/>module.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/><sp/>Don&apos;t<sp/>put<sp/>typedefs<sp/>or<sp/>other<sp/>type<sp/>definitions</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/><sp/>in<sp/>this<sp/>file;<sp/>see</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/><sp/>Elements/include/gambit/Elements/types_rollcall.hpp</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/><sp/>for<sp/>further<sp/>instructions<sp/>on<sp/>how<sp/>to<sp/>add<sp/>new</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///<sp/><sp/>types.</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///</highlight></codeline>
<codeline lineno="20"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="21"><highlight class="comment">///</highlight></codeline>
<codeline lineno="22"><highlight class="comment">///<sp/><sp/>Authors<sp/>(add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify):</highlight></codeline>
<codeline lineno="23"><highlight class="comment">///</highlight></codeline>
<codeline lineno="24"><highlight class="comment">///<sp/><sp/>\author<sp/>Pat<sp/>Scott</highlight></codeline>
<codeline lineno="25"><highlight class="comment">///<sp/><sp/>\date<sp/>2012<sp/>Nov</highlight></codeline>
<codeline lineno="26"><highlight class="comment">///<sp/><sp/>\date<sp/>2013<sp/>Jan,<sp/>Feb,<sp/>April,<sp/>May</highlight></codeline>
<codeline lineno="27"><highlight class="comment">///</highlight></codeline>
<codeline lineno="28"><highlight class="comment">///<sp/><sp/>\author<sp/>Anders<sp/>Kvellestad</highlight></codeline>
<codeline lineno="29"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(anders.kvellestad@fys.uio.no)</highlight></codeline>
<codeline lineno="30"><highlight class="comment">///<sp/><sp/>\date<sp/>2013<sp/>Nov</highlight></codeline>
<codeline lineno="31"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="32"><highlight class="comment">///</highlight></codeline>
<codeline lineno="33"><highlight class="comment">///<sp/>\def<sp/>MODULE</highlight></codeline>
<codeline lineno="34"><highlight class="comment">///<sp/>Specifies<sp/>that<sp/>this<sp/>is<sp/>the<sp/>MODULE<sp/>named<sp/>ExampleBit_B.</highlight></codeline>
<codeline lineno="35"><highlight class="comment">///</highlight></codeline>
<codeline lineno="36"><highlight class="comment">///<sp/>\def<sp/>CAPABILITY</highlight></codeline>
<codeline lineno="37"><highlight class="comment">///<sp/>Specifies<sp/>that<sp/>ExampleBit_B<sp/>(this<sp/>MODULE)<sp/>is</highlight></codeline>
<codeline lineno="38"><highlight class="comment">///<sp/>capable<sp/>of<sp/>providing<sp/>the<sp/>service<sp/>CAPABILITY.</highlight></codeline>
<codeline lineno="39"><highlight class="comment">///<sp/>Usually<sp/>a<sp/>CAPABILITY<sp/>means<sp/>that<sp/>the<sp/>MODULE<sp/>can</highlight></codeline>
<codeline lineno="40"><highlight class="comment">///<sp/>compute<sp/>some<sp/>physical<sp/>or<sp/>statistical<sp/>quantity</highlight></codeline>
<codeline lineno="41"><highlight class="comment">///<sp/>referred<sp/>to<sp/>by<sp/>CAPABILITY.</highlight></codeline>
<codeline lineno="42"><highlight class="comment">///</highlight></codeline>
<codeline lineno="43"><highlight class="comment">///<sp/>\def<sp/>FUNCTION</highlight></codeline>
<codeline lineno="44"><highlight class="comment">///<sp/>Specifies<sp/>that<sp/>ExampleBit_B<sp/>(this<sp/>MODULE)<sp/>contains</highlight></codeline>
<codeline lineno="45"><highlight class="comment">///<sp/>a<sp/>function<sp/>named<sp/>FUNCTION<sp/>that<sp/>can<sp/>execute<sp/>the</highlight></codeline>
<codeline lineno="46"><highlight class="comment">///<sp/>commands<sp/>required<sp/>to<sp/>provided<sp/>the<sp/>current<sp/>CAPABILITY.</highlight></codeline>
<codeline lineno="47"><highlight class="comment">///</highlight></codeline>
<codeline lineno="48" refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" refkind="member"><highlight class="comment">///<sp/>\def<sp/>BACKEND_REQ</highlight></codeline>
<codeline lineno="49"><highlight class="comment">///<sp/>Specifies<sp/>that<sp/>the<sp/>current<sp/>FUNCTION<sp/>in</highlight></codeline>
<codeline lineno="50"><highlight class="comment">///<sp/>ExampleBit_B<sp/>(this<sp/>MODULE)<sp/>requires<sp/>BACKEND_REQ<sp/>from</highlight></codeline>
<codeline lineno="51"><highlight class="comment">///<sp/>a<sp/>backend<sp/>code.<sp/><sp/>The<sp/>requirement<sp/>BACKEND_REQ<sp/>corresponds</highlight></codeline>
<codeline lineno="52"><highlight class="comment">///<sp/>to<sp/>a<sp/>capability<sp/>that<sp/>a<sp/>valid<sp/>backend<sp/>function</highlight></codeline>
<codeline lineno="53"><highlight class="comment">///<sp/>is<sp/>expected<sp/>to<sp/>report<sp/>in<sp/>its<sp/>corresponding</highlight></codeline>
<codeline lineno="54"><highlight class="comment">///<sp/>registration<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="55"><highlight class="comment">///</highlight></codeline>
<codeline lineno="56" refid="ExampleBit__B__rollcall_8hpp_1a0a2c1c9dc69b1048ddca06fb58542b86" refkind="member"><highlight class="comment">///<sp/>\def<sp/>CONDITIONAL_DEPENDENCY</highlight></codeline>
<codeline lineno="57"><highlight class="comment">///<sp/>Specifies<sp/>that<sp/>the<sp/>current<sp/>FUNCTION<sp/>in</highlight></codeline>
<codeline lineno="58"><highlight class="comment">///<sp/>ExampleBit_B<sp/>(this<sp/>MODULE)<sp/>has<sp/>a<sp/>CONDITIONAL_DEPENDENCY</highlight></codeline>
<codeline lineno="59"><highlight class="comment">///<sp/>that<sp/>is<sp/>only<sp/>active<sp/>under<sp/>certain<sp/>conditions.</highlight></codeline>
<codeline lineno="60"><highlight class="comment">///<sp/>These<sp/>conditions<sp/>may<sp/>include:</highlight></codeline>
<codeline lineno="61"><highlight class="comment">///<sp/><sp/>-<sp/>a<sp/>specific<sp/>backend<sp/>is<sp/>in<sp/>use<sp/>in<sp/>order<sp/>to<sp/>fill</highlight></codeline>
<codeline lineno="62"><highlight class="comment">///<sp/><sp/><sp/><sp/>a<sp/>certain<sp/>BACKEND_REQ</highlight></codeline>
<codeline lineno="63"><highlight class="comment">///<sp/><sp/>-<sp/>a<sp/>certain<sp/>model<sp/>is<sp/>under<sp/>analysis</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ExampleBit_B_rollcall_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__ExampleBit_B_rollcall_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="ExampleBit__B__rollcall_8hpp_1a2c63ae95fe7c6106ae1ec9c283afa486" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE<sp/>ExampleBit_B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="module__macros__incore_8hpp_1af4bd70b6b79b5dbc96eb177423fd8781" kindref="member">START_MODULE</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>xsection<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Observable:<sp/>cross-section<sp/>for<sp/>some<sp/>hypothetical<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>sigma_example<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>specific<sp/>function<sp/>providing<sp/>the<sp/>observable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>calculates<sp/>a<sp/>double<sp/>precision<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(NormalDist)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>sigma_example_req_pars<sp/></highlight><highlight class="comment">//<sp/>As<sp/>sigma_example,<sp/>however<sp/>it<sp/>obtains<sp/>model<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>an<sp/>&quot;ordinary&quot;<sp/>dependency,<sp/>rather<sp/>than<sp/>using<sp/>ALLOW_MODELS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(NormalDist_parameters,<sp/>ModelParameters)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>charge<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Observable:<sp/>charge<sp/>of<sp/>some<sp/>particle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>q_example<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>specific<sp/>function<sp/>providing<sp/>the<sp/>observable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>calculates<sp/>an<sp/>integer<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1ad58e7a70670e9d0d4b44e430e119910a" kindref="member">ALLOW_MODEL</ref>(NormalDist)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(demo_B,<sp/>nonexistent_model)<sp/></highlight><highlight class="comment">//<sp/>Function<sp/>is<sp/>only<sp/>allowed<sp/>to<sp/>be<sp/>used<sp/>with<sp/>models<sp/>NormalDist,<sp/>demo_B,<sp/>nonexistent_model<sp/>and<sp/>their<sp/>descendents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="ExampleBit__B__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>nevents_postcuts<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Observable:<sp/>predicted<sp/>number<sp/>of<sp/>events<sp/>for<sp/>process<sp/>after<sp/>cuts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//LATEX_LABEL($n_{\rm<sp/>events,<sp/>cut}$)<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Specify<sp/>the<sp/>LaTeX<sp/>label<sp/>of<sp/>this<sp/>quantity.<sp/><sp/>Not<sp/>implemented<sp/>yet...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="ExampleBit__B__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>predicted_events<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>specific<sp/>function<sp/>providing<sp/>the<sp/>observable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>calculates<sp/>an<sp/>integer<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(nevents,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dependency:<sp/>post-cut<sp/>events<sp/>needs<sp/>pre-cut<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(function_pointer,<sp/><ref refid="namespaceGambit_1a04c2b410df3814a62ad944736c6f5487" kindref="member">fptr</ref>)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dependency:<sp/>some<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(awesomeness,<sp/>(lib123),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(refex,<sp/>(common_be),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;))</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(refex2,<sp/>(common_be),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(varex,<sp/>(common_be),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>etc))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(varex2,<sp/>(common_be),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>etc))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(runMe,<sp/>(),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;))</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(SomeInt,<sp/>(model_dependent_reqs,<sp/>not_libfirst10),<sp/>python_variable&lt;int&gt;)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(someFunction,<sp/>(not_libfirst10),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>())</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a1080475379afb4e5fcc08b2f5c091753" kindref="member">ACTIVATE_BACKEND_REQ_FOR_MODELS</ref>(<sp/>(CMSSM,<sp/>demo_B,<sp/>nonexistent_model),<sp/>(model_dependent_reqs)<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_OPTION(<sp/>(LibFirst),<sp/>(lib123)<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_OPTION(<sp/>(LibFirst,<sp/>1.1),<sp/>(not_libfirst10)<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_OPTION(<sp/>(LibSecond),<sp/>(not_libfirst10,<sp/>lib123)<sp/>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_OPTION(<sp/>(LibThird),<sp/>(not_libfirst10,<sp/>lib123)<sp/>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1adaa80ad5963ab34fa59056f4d97ffe34" kindref="member">FORCE_SAME_BACKEND</ref>(common_be)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#define<sp/>CONDITIONAL_DEPENDENCY<sp/>particle_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>dependency<sp/>that<sp/>only<sp/>counts<sp/>under<sp/>certain<sp/>conditions<sp/>(must<sp/>come<sp/>after<sp/>all<sp/>BACKEND_REQs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1af75783a13f0eca324c064867de3c846b" kindref="member">START_CONDITIONAL_DEPENDENCY</ref>(std::string)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>the<sp/>dependency;<sp/>one<sp/>type<sp/>permitted<sp/>per<sp/>CONDITIONAL_DEPENDENCY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a466a2ed2f8596c7dd1d57ab113a3b89b" kindref="member">ACTIVATE_FOR_BACKEND</ref>(awesomeness,<sp/>LibFirst,<sp/>1.1,<sp/>1.2)<sp/><sp/></highlight><highlight class="comment">//<sp/>Dependency<sp/>counts<sp/>if<sp/>awesomeness<sp/>comes<sp/>from<sp/>LibFirst<sp/>v1.1<sp/>or<sp/>1.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a466a2ed2f8596c7dd1d57ab113a3b89b" kindref="member">ACTIVATE_FOR_BACKEND</ref>(awesomeness,<sp/>LibThird)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dependency<sp/>counts<sp/>when<sp/>any<sp/>version<sp/>of<sp/>LibThird<sp/>is<sp/>used<sp/>for<sp/>awesomeness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1ac34e2cf25bd992e488422f74e3c5a418" kindref="member">ACTIVATE_FOR_MODEL</ref>(CMSSM)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dependency<sp/>counts<sp/>when<sp/>scanning<sp/>CMSSM<sp/>or<sp/>one<sp/>of<sp/>its<sp/>sub-models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>CONDITIONAL_DEPENDENCY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>nevents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>event_count<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Observable:<sp/>observed<sp/>number<sp/>of<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>calculates<sp/>an<sp/>integer<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>particle_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>particle_identity<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Observable:<sp/>name<sp/>of<sp/>a<sp/>particle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(std::string)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ptr_arr_tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>ptrArrTester</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(test_vector,<sp/>std::vector&lt;double&gt;)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(test_vector,<sp/>(),<sp/>std::vector&lt;double&gt;)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(SomeArray,<sp/>(),<sp/>dblarr)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MODULE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QUICK_FUNCTION<sp/>examples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:<sp/>MODULE,<sp/>CAPABILITY,<sp/>NEW_CAPABILITY_FLAG,<sp/>FUNCTION,<sp/>TYPE,<sp/>(n<sp/>x<sp/>ALLOWED_MODEL),<sp/>m<sp/>x<sp/>(DEPENDENCY,<sp/>DEPENDENCY_TYPE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>last<sp/>two<sp/>arguments<sp/>are<sp/>optional,<sp/>and<sp/>n<sp/>and<sp/>m<sp/>can<sp/>be<sp/>anything<sp/>from<sp/>0<sp/>to<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="module__macros__common_8hpp_1ac77ad20f4772076dbba037d8fbc20591" kindref="member">QUICK_FUNCTION</ref>(ExampleBit_B,<sp/>test_vector,<sp/>NEW_CAPABILITY,<sp/>exampleVec,<sp/>std::vector&lt;double&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Observable:<sp/>test<sp/>vector<sp/>of<sp/>doubles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="module__macros__common_8hpp_1ac77ad20f4772076dbba037d8fbc20591" kindref="member">QUICK_FUNCTION</ref>(ExampleBit_B,<sp/>Example_lnL_B,<sp/>NEW_CAPABILITY,<sp/>example_lnL,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(),<sp/>(nevents_postcuts,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>Likelihood<sp/>of<sp/>type<sp/>double<sp/>that<sp/>depends<sp/>on<sp/>postcuts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#define<sp/>CAPABILITY<sp/>test_vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>START_CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>exampleVec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>START_FUNCTION(std::vector&lt;double&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#define<sp/>CAPABILITY<sp/>lnL_ExampleBitB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>START_CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>lnL_ExampleBitB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>START_FUNCTION(double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>DEPENDENCY(nevents_postcuts,<sp/>int)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(__ExampleBit_B_rollcall_hpp__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="ExampleBit_B/include/gambit/ExampleBit_B/ExampleBit_B_rollcall.hpp"/>
  </compounddef>
</doxygen>
