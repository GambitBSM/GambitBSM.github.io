<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1ExampleBit__A" kind="namespace" language="C++">
    <compoundname>Gambit::ExampleBit_A</compoundname>
      <sectiondef kind="user-defined">
      <header>Helper functions</header>
      <description><para>Not wrapped in rollcall header. </para>
</description>
      <memberdef kind="variable" id="ExampleBit__A_8cpp_1a2b773f6c2e99c5d6039bb5ea132fe7f4" prot="public" static="no" mutable="no">
        <type>double(*</type>
        <definition>double(* Gambit::ExampleBit_A::callback_pointer) (int &amp;, const double &amp;)</definition>
        <argsstring>)(int &amp;, const double &amp;)</argsstring>
        <name>callback_pointer</name>
        <qualifiedname>Gambit::ExampleBit_A::callback_pointer</qualifiedname>
        <briefdescription>
<para>Pointer to some function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="55" column="5" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1adb88fc34afb821bf767ba9879c3e6e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ExampleBit_A::some_other_function</definition>
        <argsstring>(int &amp;input)</argsstring>
        <name>some_other_function</name>
        <qualifiedname>Gambit::ExampleBit_A::some_other_function</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Some other example function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="58" column="12" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1ae81cc51588987f33129d5bf4db4e3e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::ExampleBit_A::logf</definition>
        <argsstring>(double x, double mu, double sig)</argsstring>
        <name>logf</name>
        <qualifiedname>Gambit::ExampleBit_A::logf</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Un-normalised gaussian log-likelihood. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="68" column="12" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Module functions</header>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a664644b9292c2a7ac21981d2660f7c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::nevents_pred</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>nevents_pred</name>
        <qualifiedname>Gambit::ExampleBit_A::nevents_pred</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="79" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a1cca5168ce2a6914bf3eb33fa118be57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::nevents_like</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>nevents_like</name>
        <qualifiedname>Gambit::ExampleBit_A::nevents_like</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="80" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a1701541c12f231997acc0db8c181e240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::particle_identity</definition>
        <argsstring>(str &amp;result)</argsstring>
        <name>particle_identity</name>
        <qualifiedname>Gambit::ExampleBit_A::particle_identity</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="81" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a231abf5ac264a9f4a5124d7e197cba64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::nevents_pred_rounded</definition>
        <argsstring>(int &amp;result)</argsstring>
        <name>nevents_pred_rounded</name>
        <qualifiedname>Gambit::ExampleBit_A::nevents_pred_rounded</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="83" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="83" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1aed576e09080462abcdf76db4b48e7bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::test_sigma</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>test_sigma</name>
        <qualifiedname>Gambit::ExampleBit_A::test_sigma</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="105" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a0c1016c811dc35c0861c8f41be39a58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::function_pointer_retriever</definition>
        <argsstring>(double(*&amp;result)(int &amp;))</argsstring>
        <name>function_pointer_retriever</name>
        <qualifiedname>Gambit::ExampleBit_A::function_pointer_retriever</qualifiedname>
        <param>
          <type>double(*&amp;)(int &amp;)</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="110" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="110" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a9c1337add7a082fdd61bccb58514b3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::example_damu</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>example_damu</name>
        <qualifiedname>Gambit::ExampleBit_A::example_damu</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Example of interacting with models. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="130" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="130" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1ab52eaa3790901319258e0d13570fd038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::lnL_gaussian</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>lnL_gaussian</name>
        <qualifiedname>Gambit::ExampleBit_A::lnL_gaussian</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Likelihood function for fitting the population parameters of a normal distribution (with hard-coded &quot;observations&quot;) Mainly used for testing scanning algorthims </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="152" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="152" bodyend="226"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Loopmanager Examples</header>
      <description><para>Some example functions for using loops within the dependency structure </para>
</description>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1add03280c08620c3d9c19db942e325bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::eventLoopManager</definition>
        <argsstring>()</argsstring>
        <name>eventLoopManager</name>
        <qualifiedname>Gambit::ExampleBit_A::eventLoopManager</qualifiedname>
        <briefdescription>
<para>Run a fake &apos;event loop&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="235" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="235" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a9e33beb6fb3581a88e5135835fb4367f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::exampleEventGen</definition>
        <argsstring>(float &amp;result)</argsstring>
        <name>exampleEventGen</name>
        <qualifiedname>Gambit::ExampleBit_A::exampleEventGen</qualifiedname>
        <param>
          <type>float &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Produces a random floating-point &apos;event count&apos; between 0 and 5. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="287" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="287" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1aa004310dbe78fd3f8b39efb89430272d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::exampleCut</definition>
        <argsstring>(int &amp;result)</argsstring>
        <name>exampleCut</name>
        <qualifiedname>Gambit::ExampleBit_A::exampleCut</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Rounds an event count to the nearest integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="314" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="314" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a0be3dd3f09eacfba0806572d5873ae4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::eventAccumulator</definition>
        <argsstring>(int &amp;result)</argsstring>
        <name>eventAccumulator</name>
        <qualifiedname>Gambit::ExampleBit_A::eventAccumulator</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Adds an integral event count to a total number of accumulated events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="337" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="337" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a78c242e241ab2ce24ff50452aeb862ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::do_Farray_stuff</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>do_Farray_stuff</name>
        <qualifiedname>Gambit::ExampleBit_A::do_Farray_stuff</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="383" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="383" bodyend="467"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ExampleBit__A__standalone__example_8cpp_1a85b674701f3b8de89953ccabd7559093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::local_xsection</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>local_xsection</name>
        <qualifiedname>Gambit::ExampleBit_A::local_xsection</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/examples/ExampleBit_A_standalone_example.cpp" line="40" column="10" bodyfile="ExampleBit_A/examples/ExampleBit_A_standalone_example.cpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a4ba9831da82bdca821dad1359a21e6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::large_print</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;result)</argsstring>
        <name>large_print</name>
        <qualifiedname>Gambit::ExampleBit_A::large_print</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scale test for various aspects of the printer buffer system Creates 1000 items to be printed per point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="473" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="473" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a0f6aa9ddaed4c673ae442255a3aa032d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::marg_poisson_test</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>marg_poisson_test</name>
        <qualifiedname>Gambit::ExampleBit_A::marg_poisson_test</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Test inline marginalisation of a Poisson likelihood over a log-normally or Gaussianly-distributed nuisance parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="484" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="484" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a58a66ffd9c65eb0ebecac7ff6c3ad3dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::bossed_pythia_test_function</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>bossed_pythia_test_function</name>
        <qualifiedname>Gambit::ExampleBit_A::bossed_pythia_test_function</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Example of using a BOSSed version of Pythia. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="509" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="509" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1aa17815c18d244c7193fe9b544e0218f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::Backend_array_test</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>Backend_array_test</name>
        <qualifiedname>Gambit::ExampleBit_A::Backend_array_test</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Tester for C/C++ backend array interfaces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="556" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="556" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="ExampleBit__A_8cpp_1a596b115ebf13fad0ca4eddad6122f42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ExampleBit_A::flat_likelihood</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>flat_likelihood</name>
        <qualifiedname>Gambit::ExampleBit_A::flat_likelihood</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Flat test likelihood for checking prior distributions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ExampleBit_A/src/ExampleBit_A.cpp" line="578" column="10" bodyfile="ExampleBit_A/src/ExampleBit_A.cpp" bodystart="578" bodyend="578"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ExampleBit_A/examples/ExampleBit_A_standalone_example.cpp" line="38" column="3"/>
  </compounddef>
</doxygen>
