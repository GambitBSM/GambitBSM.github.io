<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="structGambit_1_1DRes_1_1BackendRule" kind="struct" language="C++" prot="public">
    <compoundname>Gambit::DRes::BackendRule</compoundname>
    <basecompoundref refid="structGambit_1_1DRes_1_1Rule" prot="public" virt="non-virtual">Gambit::DRes::Rule</basecompoundref>
    <includes refid="rule_8hpp" local="no">rule.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1a1623a8bac717975d543e12fa44f4e749" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gambit::DRes::BackendRule::version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <qualifiedname>Gambit::DRes::BackendRule::version</qualifiedname>
        <briefdescription>
<para>Version field targeted by the rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="103" column="19" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1a6770a7ac8ae285c011ad3e2f835551fa" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::if_version</definition>
        <argsstring></argsstring>
        <name>if_version</name>
        <qualifiedname>Gambit::DRes::BackendRule::if_version</qualifiedname>
        <briefdescription>
<para>Version field appears in &apos;if&apos; clause. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="105" column="12" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1afa7ce1c93a46e28ab3d23ed0e3b45009" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::then_version</definition>
        <argsstring></argsstring>
        <name>then_version</name>
        <qualifiedname>Gambit::DRes::BackendRule::then_version</qualifiedname>
        <briefdescription>
<para>Version field appears in &apos;then&apos; clause. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="107" column="12" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1a939743933b639580ed1d7adf353bc3e9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gambit::DRes::BackendRule::backend</definition>
        <argsstring></argsstring>
        <name>backend</name>
        <qualifiedname>Gambit::DRes::BackendRule::backend</qualifiedname>
        <briefdescription>
<para>Backend field targeted by the rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="110" column="19" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1ac30ee6d80f15f5ea7ba803a372c064db" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::if_backend</definition>
        <argsstring></argsstring>
        <name>if_backend</name>
        <qualifiedname>Gambit::DRes::BackendRule::if_backend</qualifiedname>
        <briefdescription>
<para>Backend field appears in &apos;if&apos; clause. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="112" column="12" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1a0c20b5b369484cc73de41ebf1fab31b7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::then_backend</definition>
        <argsstring></argsstring>
        <name>then_backend</name>
        <qualifiedname>Gambit::DRes::BackendRule::then_backend</qualifiedname>
        <briefdescription>
<para>Backend field appears in &apos;then&apos; clause. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="114" column="12" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1a221c28c43c5b7fb6a4ce9e97fdb8ce9d" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gambit::DRes::BackendRule::group</definition>
        <argsstring></argsstring>
        <name>group</name>
        <qualifiedname>Gambit::DRes::BackendRule::group</qualifiedname>
        <briefdescription>
<para>Backend group referenced by the rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="117" column="19" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structGambit_1_1DRes_1_1BackendRule_1a9802b5f3ab0b7d5104b29b4a94b5a7bb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::if_group</definition>
        <argsstring></argsstring>
        <name>if_group</name>
        <qualifiedname>Gambit::DRes::BackendRule::if_group</qualifiedname>
        <briefdescription>
<para>Group field appears in &apos;if&apos; clause. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="119" column="12" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structGambit_1_1DRes_1_1BackendRule_1a9d0c2b3d70d8a5b13810483f0b836113" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::antecedent_matches</definition>
        <argsstring>(functor *, const Utils::type_equivalency &amp;, const str &amp;) const</argsstring>
        <name>antecedent_matches</name>
        <qualifiedname>Gambit::DRes::BackendRule::antecedent_matches</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1Utils_1_1type__equivalency" kindref="compound">Utils::type_equivalency</ref> &amp;</type>
          <defname>te</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>group_being_resolved</defname>
        </param>
        <briefdescription>
<para>True if and only if the passed backend functor matches the &apos;if&apos; part of a rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="122" column="12" bodyfile="Core/src/rule.cpp" bodystart="61" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1DRes_1_1BackendRule_1a23095550c1e6f0a5c5ad52b1fa3233a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::consequent_matches</definition>
        <argsstring>(functor *, const Utils::type_equivalency &amp;) const</argsstring>
        <name>consequent_matches</name>
        <qualifiedname>Gambit::DRes::BackendRule::consequent_matches</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1Utils_1_1type__equivalency" kindref="compound">Utils::type_equivalency</ref> &amp;</type>
          <defname>te</defname>
        </param>
        <briefdescription>
<para>True if and only if the passed backend functor matches the &apos;then&apos; part of a rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="125" column="12" bodyfile="Core/src/rule.cpp" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1DRes_1_1BackendRule_1a2d367018b157a1457b84e1d9a5805d5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::allows</definition>
        <argsstring>(functor *, const Utils::type_equivalency &amp;, const str &amp;, bool ignore_if_weak=true) const</argsstring>
        <name>allows</name>
        <qualifiedname>Gambit::DRes::BackendRule::allows</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1Utils_1_1type__equivalency" kindref="compound">Utils::type_equivalency</ref> &amp;</type>
          <defname>te</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>group_being_resolved</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_if_weak</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a backend rule allows a given backend functor or not. <linebreak/>
 Must be true for a backend functor to be used to resolve a backend requirement. <linebreak/>
 True unless the functor passes the antecedent (&apos;if&apos; part of the rule) but fails the consequent (&apos;then&apos; part of the rule). <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="130" column="12" bodyfile="Core/src/rule.cpp" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1DRes_1_1BackendRule_1abc0542e137bb07ce709848dd1d79fbef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::DRes::BackendRule::BackendRule</definition>
        <argsstring>()</argsstring>
        <name>BackendRule</name>
        <qualifiedname>Gambit::DRes::BackendRule::BackendRule</qualifiedname>
        <briefdescription>
<para>Default constructor. Sets all fields empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="133" column="7" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="133" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structGambit_1_1DRes_1_1BackendRule_1a0488ac05b35c5cb3fefc6d079ad16702" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::DRes::BackendRule::permits_field</definition>
        <argsstring>(const str &amp;)</argsstring>
        <name>permits_field</name>
        <qualifiedname>Gambit::DRes::BackendRule::permits_field</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>field</defname>
        </param>
        <briefdescription>
<para>Check if a given string is a permitted field of this class. </para>
        </briefdescription>
        <detaileddescription>
<para>Check if a given string is a permitted field of the <ref refid="structGambit_1_1DRes_1_1BackendRule" kindref="compound">BackendRule</ref> class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/rule.hpp" line="146" column="19" bodyfile="Core/src/rule.cpp" bodystart="49" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Derived class rule for resolution of backend requirements. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Gambit::DRes::BackendRule</label>
        <link refid="structGambit_1_1DRes_1_1BackendRule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Gambit::DRes::Rule</label>
        <link refid="structGambit_1_1DRes_1_1Rule"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Gambit::DRes::BackendRule</label>
        <link refid="structGambit_1_1DRes_1_1BackendRule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>backend</edgelabel>
          <edgelabel>group</edgelabel>
          <edgelabel>version</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Gambit::DRes::Rule</label>
        <link refid="structGambit_1_1DRes_1_1Rule"/>
        <childnode refid="3" relation="usage">
          <edgelabel>capability</edgelabel>
          <edgelabel>function</edgelabel>
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
      </node>
    </collaborationgraph>
    <location file="Core/include/gambit/Core/rule.hpp" line="99" column="5" bodyfile="Core/include/gambit/Core/rule.hpp" bodystart="100" bodyend="148"/>
    <listofallmembers>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a2d367018b157a1457b84e1d9a5805d5c" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>allows</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a9d0c2b3d70d8a5b13810483f0b836113" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>antecedent_matches</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a939743933b639580ed1d7adf353bc3e9" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>backend</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1abc0542e137bb07ce709848dd1d79fbef" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>BackendRule</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a1dcfee83f84288b64809ac36e5bb74e0" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>base_antecedent_matches</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1afc73a482519ed65671e232000d753869" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>base_consequent_matches</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1aa4644d0b22f3c6f46104661642f30eb8" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>capability</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a23095550c1e6f0a5c5ad52b1fa3233a7" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>consequent_matches</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a9a917156b3e4081a8eb8b6e9f0fe00ca" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>function</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a221c28c43c5b7fb6a4ce9e97fdb8ce9d" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>group</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a79f355e8510046bb422ba03cc8917088" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>has_if</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a84d238260560a5705dfa6601589e130b" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>has_then</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1ac30ee6d80f15f5ea7ba803a372c064db" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>if_backend</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a7e7ca0cb7fbf4dc75cfc23dba706d369" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>if_capability</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a7d7e39b02fb0595e16522dc3dbe6bacb" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>if_function</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a9802b5f3ab0b7d5104b29b4a94b5a7bb" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>if_group</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1af9c5df4e4857eaa4bcdfe2b11793db24" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>if_type</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a6770a7ac8ae285c011ad3e2f835551fa" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>if_version</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1afda2bf7cb57ccaaac571540135f247b1" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>log_matches</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a0488ac05b35c5cb3fefc6d079ad16702" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>permits_field</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a144af7d7bc63a3b298ab7fffdedd77a4" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>Rule</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a0c20b5b369484cc73de41ebf1fab31b7" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>then_backend</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a07754e26554a8594db6b96b9501dc6cf" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>then_capability</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1ac7d7706ebd72295b1f950fc52db5cf7a" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>then_function</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a14ae28482623485c663bc10d9b7556b2" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>then_type</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1afa7ce1c93a46e28ab3d23ed0e3b45009" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>then_version</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a111c16c35b0ab2a4e064de91dc8d6938" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>type</name></member>
      <member refid="structGambit_1_1DRes_1_1BackendRule_1a1623a8bac717975d543e12fa44f4e749" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>version</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a5c0ccfecbf63233ec3998a4b61f954fc" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>weakrule</name></member>
      <member refid="structGambit_1_1DRes_1_1Rule_1a2e8921e04523c203789068c480b3d8f8" prot="public" virt="non-virtual"><scope>Gambit::DRes::BackendRule</scope><name>yaml</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
