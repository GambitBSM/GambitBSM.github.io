<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1invalid__point__exception" kind="class" language="C++" prot="public">
    <compoundname>Gambit::invalid_point_exception</compoundname>
    <basecompoundref refid="classGambit_1_1special__exception" prot="public" virt="non-virtual">Gambit::special_exception</basecompoundref>
    <includes refid="exceptions_8hpp" local="no">exceptions.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGambit_1_1invalid__point__exception_1a215573f531c4bdd53fd7f8b5e709f6d7" prot="private" static="no" mutable="no">
        <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
        <definition>functor* Gambit::invalid_point_exception::myThrower</definition>
        <argsstring></argsstring>
        <name>myThrower</name>
        <qualifiedname>Gambit::invalid_point_exception::myThrower</qualifiedname>
        <briefdescription>
<para>The functor responsible for throwing this exception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="235" column="15" bodyfile="Utils/include/gambit/Utils/exceptions.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classGambit_1_1invalid__point__exception_1a26fbcbb763bdf397950eac6396e7209f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::invalid_point_exception::abort_here_and_now</definition>
        <argsstring>()</argsstring>
        <name>abort_here_and_now</name>
        <qualifiedname>Gambit::invalid_point_exception::abort_here_and_now</qualifiedname>
        <briefdescription>
<para>Cause the code to print the exception and abort. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="238" column="12" bodyfile="Utils/src/exceptions.cpp" bodystart="456" bodyend="468"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1invalid__point__exception_1a84e5a586a32c7da1df08e66f2831ac38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::invalid_point_exception::invalid_point_exception</definition>
        <argsstring>()</argsstring>
        <name>invalid_point_exception</name>
        <qualifiedname>Gambit::invalid_point_exception::invalid_point_exception</qualifiedname>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespaceGambit" kindref="compound">Gambit</ref> invalid point exception class methods.</para>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="243" column="7" bodyfile="Utils/src/exceptions.cpp" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1invalid__point__exception_1a4783af697c85c809b1c2b7a7ef7dd072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::invalid_point_exception::set_thrower</definition>
        <argsstring>(functor *)</argsstring>
        <name>set_thrower</name>
        <qualifiedname>Gambit::invalid_point_exception::set_thrower</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <defname>thrown_from</defname>
        </param>
        <briefdescription>
<para>Set the pointer to the functor that threw the invalid point exception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="246" column="12" bodyfile="Utils/src/exceptions.cpp" bodystart="401" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1invalid__point__exception_1ad92337ed5131037bed8ffefb2bd22f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
        <definition>functor * Gambit::invalid_point_exception::thrower</definition>
        <argsstring>()</argsstring>
        <name>thrower</name>
        <qualifiedname>Gambit::invalid_point_exception::thrower</qualifiedname>
        <briefdescription>
<para>Retrieve pointer to the functor that threw the invalid point exception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="249" column="15" bodyfile="Utils/src/exceptions.cpp" bodystart="410" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1invalid__point__exception_1ac2a68704b58ec72f7fb16fcbddd361fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::invalid_point_exception::raise</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>raise</name>
        <qualifiedname>Gambit::invalid_point_exception::raise</qualifiedname>
        <reimplements refid="classGambit_1_1special__exception_1a890c39032e0269e56ceada0621d76691">raise</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
<para>Raise the exception, i.e. throw it. Exact override of base method. </para>
        </briefdescription>
        <detaileddescription>
<para>Raise the invalid point exception, i.e throw it with a message and a default code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="252" column="20" bodyfile="Utils/src/exceptions.cpp" bodystart="422" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1invalid__point__exception_1a2abb56079f7650b4a80427bfc4b6380d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::invalid_point_exception::raise</definition>
        <argsstring>(const std::string &amp;, int code)</argsstring>
        <name>raise</name>
        <qualifiedname>Gambit::invalid_point_exception::raise</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <defname>msg</defname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Raise the exception, i.e. throw it with a message and code. </para>
        </briefdescription>
        <detaileddescription>
<para>Raise the invalid point exception, i.e. throw it with a message and a code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="255" column="20" bodyfile="Utils/src/exceptions.cpp" bodystart="429" bodyend="453"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="namespaceGambit" kindref="compound">Gambit</ref> invalid point exception class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Gambit::invalid_point_exception</label>
        <link refid="classGambit_1_1invalid__point__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Gambit::special_exception</label>
        <link refid="classGambit_1_1special__exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Gambit::invalid_point_exception</label>
        <link refid="classGambit_1_1invalid__point__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Gambit::special_exception</label>
        <link refid="classGambit_1_1special__exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>myMessage</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
    </collaborationgraph>
    <location file="Utils/include/gambit/Utils/exceptions.hpp" line="229" column="3" bodyfile="Utils/include/gambit/Utils/exceptions.hpp" bodystart="230" bodyend="257"/>
    <listofallmembers>
      <member refid="classGambit_1_1invalid__point__exception_1a26fbcbb763bdf397950eac6396e7209f" prot="private" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>abort_here_and_now</name></member>
      <member refid="classGambit_1_1invalid__point__exception_1a84e5a586a32c7da1df08e66f2831ac38" prot="public" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>invalid_point_exception</name></member>
      <member refid="classGambit_1_1special__exception_1a9fa91e276005dc71891a3d4053078987" prot="public" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>invalidcode</name></member>
      <member refid="classGambit_1_1special__exception_1a58bd2fae32e974e8cf718f36c8863e75" prot="public" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>message</name></member>
      <member refid="classGambit_1_1special__exception_1a2f78277d29f1a4746c405f6ef4689de0" prot="protected" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>myMessage</name></member>
      <member refid="classGambit_1_1invalid__point__exception_1a215573f531c4bdd53fd7f8b5e709f6d7" prot="private" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>myThrower</name></member>
      <member refid="classGambit_1_1invalid__point__exception_1ac2a68704b58ec72f7fb16fcbddd361fc" prot="public" virt="virtual"><scope>Gambit::invalid_point_exception</scope><name>raise</name></member>
      <member refid="classGambit_1_1invalid__point__exception_1a2abb56079f7650b4a80427bfc4b6380d" prot="public" virt="virtual"><scope>Gambit::invalid_point_exception</scope><name>raise</name></member>
      <member refid="classGambit_1_1invalid__point__exception_1a4783af697c85c809b1c2b7a7ef7dd072" prot="public" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>set_thrower</name></member>
      <member refid="classGambit_1_1special__exception_1af371d8404a05ae0225e39d68aff0e072" prot="public" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>special_exception</name></member>
      <member refid="classGambit_1_1invalid__point__exception_1ad92337ed5131037bed8ffefb2bd22f7f" prot="public" virt="non-virtual"><scope>Gambit::invalid_point_exception</scope><name>thrower</name></member>
      <member refid="classGambit_1_1special__exception_1aa715b55d2dc6b1ea7010d111d0b3586f" prot="public" virt="virtual"><scope>Gambit::invalid_point_exception</scope><name>what</name></member>
      <member refid="classGambit_1_1special__exception_1a0ccabcde1e54e7ddca8b351c44a8abfc" prot="public" virt="virtual"><scope>Gambit::invalid_point_exception</scope><name>~special_exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
