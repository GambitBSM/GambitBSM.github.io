<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1SubSpectrum" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Gambit::SubSpectrum</compoundname>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; MSSMSimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; DMEFTSimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; DiracSingletDM_Z2SimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; MajoranaSingletDM_Z2SimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; ScalarSingletDM_Z2SimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; ScalarSingletDM_Z3SimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; VectorSingletDM_Z2SimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; SMSimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; MDMSpec&lt; MI &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; MSSMSpec&lt; MI &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; QedQcdWrapper &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; SMHiggsSimpleSpec &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; ScalarSingletDM_Z2Spec&lt; MI &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; ScalarSingletDM_Z3Spec&lt; MI &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Spec" prot="public" virt="non-virtual">Gambit::Spec&lt; DerivedSpec &gt;</derivedcompoundref>
    <includes refid="subspectrum_8hpp" local="no">subspectrum.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a56f353d2be541104f324b2e449a0e682" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::SubSpectrum::SubSpectrum</definition>
        <argsstring>()</argsstring>
        <name>SubSpectrum</name>
        <qualifiedname>Gambit::SubSpectrum::SubSpectrum</qualifiedname>
        <briefdescription>
<para>Constructors/destructors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="92" column="10" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a52ae9f8b079817bb6a26b53779fd1df9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Gambit::SubSpectrum::~SubSpectrum</definition>
        <argsstring>()</argsstring>
        <name>~SubSpectrum</name>
        <qualifiedname>Gambit::SubSpectrum::~SubSpectrum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="93" column="18" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1af6ff4528277f9d6acab373942f346331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string Gambit::SubSpectrum::getName</definition>
        <argsstring>() const =0</argsstring>
        <name>getName</name>
        <qualifiedname>Gambit::SubSpectrum::getName</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce">getName</reimplementedby>
        <briefdescription>
<para>Main public interface functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Get name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="99" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a65f9dc06f3c8c6f15094a18b840a149d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt; SubSpectrum &gt; Gambit::SubSpectrum::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <qualifiedname>Gambit::SubSpectrum::clone</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb">clone</reimplementedby>
        <briefdescription>
<para>Clone the <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="102" column="34"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a7f86c4329e031f37ec2faffa5b1a48f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::writeSLHAfile</definition>
        <argsstring>(int, const str &amp;) const</argsstring>
        <name>writeSLHAfile</name>
        <qualifiedname>Gambit::SubSpectrum::writeSLHAfile</qualifiedname>
        <param>
          <type>int</type>
          <defname>slha_version</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
<para>Dump out spectrum information to an SLHA file (if possible) </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> member function definitions.</para>
<para>Dump out spectrum information to an SLHA file (if possible) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="105" column="23" bodyfile="Elements/src/subspectrum.cpp" bodystart="40" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a5a6fd9949ec1ffe5d0b1d6b64f568b01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref></type>
        <definition>SLHAstruct Gambit::SubSpectrum::getSLHAea</definition>
        <argsstring>(int) const</argsstring>
        <name>getSLHAea</name>
        <qualifiedname>Gambit::SubSpectrum::getSLHAea</qualifiedname>
        <param>
          <type>int</type>
          <defname>slha_version</defname>
        </param>
        <briefdescription>
<para>Get spectrum information in SLHAea format (if possible) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="108" column="29" bodyfile="Elements/src/subspectrum.cpp" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1acdbd6db5cc3b473b7e6445bfcf686f64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Gambit::SubSpectrum::add_to_SLHAea</definition>
        <argsstring>(int, SLHAstruct &amp;) const</argsstring>
        <name>add_to_SLHAea</name>
        <qualifiedname>Gambit::SubSpectrum::add_to_SLHAea</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MSSMSpec_1a3774ee9691042a89e06e3835407cd9b2">add_to_SLHAea</reimplementedby>
        <reimplementedby refid="classGambit_1_1MSSMSimpleSpec_1ae75b8c12da46422fa576238b9b67dc6d">add_to_SLHAea</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a15fe903b184181a76efac1f1d55a2104">add_to_SLHAea</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a15fe903b184181a76efac1f1d55a2104">add_to_SLHAea</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a15fe903b184181a76efac1f1d55a2104">add_to_SLHAea</reimplementedby>
        <reimplementedby refid="classGambit_1_1Models_1_1DMEFTSimpleSpec_1a25eb46fa76d55e2d8f59f15423aafc6e">add_to_SLHAea</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a23971be82522088c0a9c103094a9abc4">add_to_SLHAea</reimplementedby>
        <param>
          <type>int</type>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Add spectrum information to an SLHAea object (if possible) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="111" column="23" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a5e9acc22b9d462e531c50b5727c870c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int Gambit::SubSpectrum::get_numbers_stable_particles</definition>
        <argsstring>() const</argsstring>
        <name>get_numbers_stable_particles</name>
        <qualifiedname>Gambit::SubSpectrum::get_numbers_stable_particles</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MSSMSpec_1ac0203c26ba15cf4b791614959eed1154">get_numbers_stable_particles</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a5ca0b22201354c66013865bc17f9095e">get_numbers_stable_particles</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There may be more than one <emphasis>new</emphasis> stable particle this method will tell you how many. If more than zero you probbaly <emphasis>need</emphasis> to know what model you are working on, so we don&apos;t give all stable particles </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="117" column="22" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a7f39428653fa985b340c1df498d6ec42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::hard_upper</definition>
        <argsstring>() const</argsstring>
        <name>hard_upper</name>
        <qualifiedname>Gambit::SubSpectrum::hard_upper</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1afe348a1f910ef15ddccccfc52523c988">hard_upper</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Limits to RGE running; warning/error raised if running beyond these is attempted. If these aren&apos;t overridden in the derived class then effectively no limit on running will exist. These are public so that module writers can use them to check what the limits are. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="122" column="25" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a3fa1af32eea87011aa4c6dce006878c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::soft_upper</definition>
        <argsstring>() const</argsstring>
        <name>soft_upper</name>
        <qualifiedname>Gambit::SubSpectrum::soft_upper</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a75ba4a439c896aba901c96f02fa201d4">soft_upper</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="123" column="25" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a86e81042c8a0c13821a9c45d616c5b9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::soft_lower</definition>
        <argsstring>() const</argsstring>
        <name>soft_lower</name>
        <qualifiedname>Gambit::SubSpectrum::soft_lower</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a329e9419c7e9a44d7d1069abf48ebe18">soft_lower</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="124" column="25" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1aa4b3a1ca4b864081a054b323a1c2f90f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::hard_lower</definition>
        <argsstring>() const</argsstring>
        <name>hard_lower</name>
        <qualifiedname>Gambit::SubSpectrum::hard_lower</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a23f2c3fc4284248e5d9956384c82628c">hard_lower</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="125" column="25" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a64445baba3f7a8bf116bea7caba1a52c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Gambit::SubSpectrum::RunToScaleOverride</definition>
        <argsstring>(double)</argsstring>
        <name>RunToScaleOverride</name>
        <qualifiedname>Gambit::SubSpectrum::RunToScaleOverride</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MDMSpec_1ac8b0c339db234e872c5238762765eaec">RunToScaleOverride</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MSSMSpec_1a691b616d88f2d06f239372a687801eff">RunToScaleOverride</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z2Spec_1adfb59e86d06f33e722f3b5b7d25e79ed">RunToScaleOverride</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z3Spec_1a00193308ecf4ef0820601a73015d0cd1">RunToScaleOverride</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a2f4b1f8700e79592c3823f7f31d4ebeb">RunToScaleOverride</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a2f4b1f8700e79592c3823f7f31d4ebeb">RunToScaleOverride</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a2f4b1f8700e79592c3823f7f31d4ebeb">RunToScaleOverride</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a94301713237c60855bc33444b2a90ef8">RunToScaleOverride</reimplementedby>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Run spectrum to new scale. </para>
        </briefdescription>
        <detaileddescription>
<para>Functions to be overridden in classes derived from <ref refid="classGambit_1_1Spec" kindref="compound">Spec&lt;Derived&gt;</ref> (i.e. the final wrappers) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="131" column="23" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a7bd448d64af954e4b596f4a6eebea0e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::GetScale</definition>
        <argsstring>() const</argsstring>
        <name>GetScale</name>
        <qualifiedname>Gambit::SubSpectrum::GetScale</qualifiedname>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a508a7dd259a814114719094075205aae">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a508a7dd259a814114719094075205aae">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1a508a7dd259a814114719094075205aae">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SMSimpleSpec_1ab2575ecbfbdc657a9199d3c8437202a0">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MDMSpec_1a947f99064b39d66834b70efd5037d3b5">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MSSMSpec_1a9a54f7a48b7d223f46fe1c79499fae3a">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a75ec41831d260ccdb5d1fbb34fcade20">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z2Spec_1a4df84b1ac8387d95672202e606f3e72d">GetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z3Spec_1aaf66b711cb08c9fe773f1892bbec6f13">GetScale</reimplementedby>
        <briefdescription>
<para>Returns the renormalisation scale of parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="133" column="25" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1aa6014ef072831d0117332e3df719ebf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Gambit::SubSpectrum::SetScale</definition>
        <argsstring>(double)</argsstring>
        <name>SetScale</name>
        <qualifiedname>Gambit::SubSpectrum::SetScale</qualifiedname>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MDMSpec_1a5c15a5d0fa956ad2b3a46494c418acae">SetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1MSSMSpec_1ae4dbeb2e2fd5dd72d48ad97293791b13">SetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1QedQcdWrapper_1a4fc95e683f112d87ef94481cf7271f9a">SetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z2Spec_1ae7a96be70b85d1c22f5c4159617f6928">SetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z3Spec_1a361273732d2f658312ed9eaeb3129b69">SetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1aa76069404bc7b1277019f7a879d7ff42">SetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1aa76069404bc7b1277019f7a879d7ff42">SetScale</reimplementedby>
        <reimplementedby refid="classGambit_1_1SLHASimpleSpec_1aa76069404bc7b1277019f7a879d7ff42">SetScale</reimplementedby>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manually set the renormalisation scale of parameters somewhat dangerous to allow this but may be needed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="136" column="23" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="136" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a123082cb4740033d2ae243c1d27cea28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::RunToScale</definition>
        <argsstring>(double scale, const int behave=0)</argsstring>
        <name>RunToScale</name>
        <qualifiedname>Gambit::SubSpectrum::RunToScale</qualifiedname>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>behave</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run spectrum to a new scale This function is a wrapper for RunToScaleOverride which automatically checks limits and raises warnings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="149" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="550" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a723f6a66f3875abd2c6a6e8d8e03266d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override</name>
        <qualifiedname>Gambit::SubSpectrum::set_override</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Parameter override functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="178" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="205" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ad272d296f35e6ad0168b4e092eb53943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const int, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override</name>
        <qualifiedname>Gambit::SubSpectrum::set_override</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="179" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="358" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1abc80e335179d3633c2f537325673e0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const int, const int, const bool allow_new=false)</argsstring>
        <name>set_override</name>
        <qualifiedname>Gambit::SubSpectrum::set_override</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>j</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="180" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="470" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ae0c6a2e9b63648b48911b76d6fabf63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override_vector</definition>
        <argsstring>(const Par::Tags, const double, const std::vector&lt; str &gt; &amp;, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override_vector</name>
        <qualifiedname>Gambit::SubSpectrum::set_override_vector</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <defname>params</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Vector override functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="185" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="516" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a53c514918a7a32dce21697dbc9af95d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override_vector</definition>
        <argsstring>(const Par::Tags, const double, const std::vector&lt; str &gt; &amp;, const std::vector&lt; int &gt;, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override_vector</name>
        <qualifiedname>Gambit::SubSpectrum::set_override_vector</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <defname>params</defname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <defname>indices</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="186" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="525" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1af1551952a18488ce3793e062bf933a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override_vector</definition>
        <argsstring>(const Par::Tags, const double, const std::vector&lt; str &gt; &amp;, const int, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override_vector</name>
        <qualifiedname>Gambit::SubSpectrum::set_override_vector</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <defname>params</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="187" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="536" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a21cab80b6c51bfb5801fb5e31896e164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override_vector</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const std::vector&lt; int &gt;, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override_vector</name>
        <qualifiedname>Gambit::SubSpectrum::set_override_vector</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>tag</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>par</defname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <defname>indices</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="188" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="543" bodyend="548"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a4828fe7699db6cd695871eac0e944f90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SubSpectrum::has</definition>
        <argsstring>(const Par::Tags, const int, const int, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::SubSpectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>pdg_code</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>context</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
<para>PDB getter/checker overloads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="193" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a4aa3c288df9625876aa5dc1271450a4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::get</definition>
        <argsstring>(const Par::Tags, const int, const int, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::SubSpectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>pdg_code</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>context</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="197" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ab8004e0a7ca69f1a0fffa7b18a3f7182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SubSpectrum::has</definition>
        <argsstring>(const Par::Tags, const std::pair&lt; int, int &gt;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::SubSpectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <defname>pdgpr</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="201" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ad777663700297fc43301c2a71288e56c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::get</definition>
        <argsstring>(const Par::Tags, const std::pair&lt; int, int &gt;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::SubSpectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <defname>pdgpr</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="205" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a1ce6d110547e72c5db901dd92c40444b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SubSpectrum::has</definition>
        <argsstring>(const Par::Tags, const std::pair&lt; str, int &gt;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::SubSpectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, int &gt;</type>
          <defname>shortpr</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="209" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a785b082b5f58bd249dc1a6f6321db435" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::get</definition>
        <argsstring>(const Par::Tags, const std::pair&lt; str, int &gt;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::SubSpectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, int &gt;</type>
          <defname>shortpr</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="213" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1aa6892cfd9db50b229dc8e5c0c8b4d0b9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1OverrideMaps" kindref="compound">OverrideMaps</ref> &gt;</type>
        <definition>std::map&lt; Par::Tags, OverrideMaps &gt; Gambit::SubSpectrum::create_override_maps</definition>
        <argsstring>()</argsstring>
        <name>create_override_maps</name>
        <qualifiedname>Gambit::SubSpectrum::create_override_maps</qualifiedname>
        <briefdescription>
<para>Initialiser function for override_maps. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialiser function for empty map of override maps. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="264" column="26" bodyfile="Elements/src/subspectrum.cpp" bodystart="65" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a12bb8ae854bdbf402adcd3eeab3387e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::safeget</definition>
        <argsstring>(const Par::Tags, const str &amp;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::SubSpectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>mass</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
<para>safeget functions, by Abram </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="219" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1aaeff9db607b0a8118fdcd380ee6a0eba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::safeget</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::SubSpectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>mass</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="223" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="147" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a69d2743c3bc07fd881cc83fd5bbe216a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::safeget</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const int, const SpecOverrideOptions=use_overrides) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::SubSpectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>mass</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>j</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="227" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="158" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a8271aef7ca1cca4c7da767e5cade9c59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::safeget</definition>
        <argsstring>(const Par::Tags, const int, const int, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::SubSpectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>pdg_code</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>context</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="230" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="168" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1adf70c0de7818c1d85c0d0fcd8013aa76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::safeget</definition>
        <argsstring>(const Par::Tags, const std::pair&lt; int, int &gt;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::SubSpectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <defname>pdgpr</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="234" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a622717528952171fa114ae152c7ae340" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SubSpectrum::safeget</definition>
        <argsstring>(const Par::Tags, const std::pair&lt; str, int &gt;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::SubSpectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, int &gt;</type>
          <defname>shortpr</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="238" column="17" bodyfile="Elements/src/subspectrum.cpp" bodystart="190" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a456eeb816ef8539eaa8bd85e04d6f1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override</definition>
        <argsstring>(const Par::Tags, const double, const int, const int, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override</name>
        <qualifiedname>Gambit::SubSpectrum::set_override</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>PDGcode</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>context</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>PDB overloads for setters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="245" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="493" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1adef6cacf9f63fcd1cbba22629399ad18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override</definition>
        <argsstring>(const Par::Tags, const double, const std::pair&lt; int, int &gt;, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override</name>
        <qualifiedname>Gambit::SubSpectrum::set_override</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <defname>pdgpr</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="246" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="498" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a8f4bd036dd357d53e34e28615842a803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SubSpectrum::set_override</definition>
        <argsstring>(const Par::Tags, const double, const std::pair&lt; str, int &gt;, const bool allow_new=false, const bool decouple=false)</argsstring>
        <name>set_override</name>
        <qualifiedname>Gambit::SubSpectrum::set_override</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, int &gt;</type>
          <defname>shortpr</defname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_new</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>decouple</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>PDB overloads of set_override functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="249" column="15" bodyfile="Elements/src/subspectrum.cpp" bodystart="487" bodyend="490"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGambit_1_1SubSpectrum_1a43a6a9242c75a6addc856c9370db2c18" prot="private" static="no" mutable="no">
        <type>const std::map&lt; int, int &gt;</type>
        <definition>const std::map&lt;int, int&gt; Gambit::SubSpectrum::empty_map</definition>
        <argsstring></argsstring>
        <name>empty_map</name>
        <qualifiedname>Gambit::SubSpectrum::empty_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="261" column="25" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGambit_1_1SubSpectrum_1ae733c2e2d247f846a957dd880d165144" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1OverrideMaps" kindref="compound">OverrideMaps</ref> &gt;</type>
        <definition>std::map&lt;Par::Tags,OverrideMaps&gt; Gambit::SubSpectrum::override_maps</definition>
        <argsstring></argsstring>
        <name>override_maps</name>
        <qualifiedname>Gambit::SubSpectrum::override_maps</qualifiedname>
        <briefdescription>
<para>Map of override maps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="268" column="19" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a2725617f7d7a1ae7f096c7d6269c9293" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Gambit::SubSpectrum::has</definition>
        <argsstring>(const Par::Tags, const str &amp;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const =0</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::SubSpectrum::has</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6">has</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
<para>Getters/Setters etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="157" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a7628765f659616f92dfb00d250135a45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::get</definition>
        <argsstring>(const Par::Tags, const str &amp;, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const =0</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::SubSpectrum::get</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294">get</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="158" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ac9b850848b43d82b58f7d72c0ec4885b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Gambit::SubSpectrum::has</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const =0</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::SubSpectrum::has</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b">has</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="159" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1aee87dab2aba184c8791f66e48faf4017" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::get</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const SpecOverrideOptions=use_overrides, const SafeBool check_antiparticle=SafeBool(true)) const =0</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::SubSpectrum::get</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef">get</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="160" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ad91d2826ed9118ce59ab42e098a31d70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Gambit::SubSpectrum::has</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const int, const SpecOverrideOptions=use_overrides) const =0</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::SubSpectrum::has</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9">has</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="161" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a5d7f05d24f9ea7053017fa4467d08fe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double Gambit::SubSpectrum::get</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const int, const SpecOverrideOptions=use_overrides) const =0</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::SubSpectrum::get</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04">get</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defval>use_overrides</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="162" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ad2b12a60691536d81893dfb12d31007f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Gambit::SubSpectrum::set</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const SafeBool check_antiparticle=SafeBool(true))=0</argsstring>
        <name>set</name>
        <qualifiedname>Gambit::SubSpectrum::set</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60">set</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const double</type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="169" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1afc3ec1d834adbb46f5074c071a63992b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Gambit::SubSpectrum::set</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const int, const SafeBool check_antiparticle=SafeBool(true))=0</argsstring>
        <name>set</name>
        <qualifiedname>Gambit::SubSpectrum::set</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e">set</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const double</type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref></type>
          <declname>check_antiparticle</declname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="170" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1ab49d43623cb1e9a4025e42a66a8d9803" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Gambit::SubSpectrum::set</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const int, const int)=0</argsstring>
        <name>set</name>
        <qualifiedname>Gambit::SubSpectrum::set</qualifiedname>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <reimplementedby refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b">set</reimplementedby>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
        </param>
        <param>
          <type>const double</type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="171" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SubSpectrum_1a6f23c9146e2d9eab8a3db88f5a5232b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::map&lt; int, int &gt; &amp;</type>
        <definition>virtual const std::map&lt; int, int &gt; &amp; Gambit::SubSpectrum::PDG_translator</definition>
        <argsstring>() const</argsstring>
        <name>PDG_translator</name>
        <qualifiedname>Gambit::SubSpectrum::PDG_translator</qualifiedname>
        <reimplementedby refid="classGambit_1_1MSSMSimpleSpec_1a831ad353f519697c28917a1cd03a8a8d">PDG_translator</reimplementedby>
        <briefdescription>
<para>TODO: extra PDB overloads to handle all the one and two index cases (well all the ones that are feasible...) </para>
        </briefdescription>
        <detaileddescription>
<para>PDG code translation map, for special cases where an SLHA file has been read in and the PDG codes changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="257" column="33" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="257" bodyend="257"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Virtual base class for interacting with spectrum generator output. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>Gambit::MSSMSimpleSpec</label>
        <link refid="classGambit_1_1MSSMSimpleSpec"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Gambit::Models::DMEFTSimpleSpec</label>
        <link refid="classGambit_1_1Models_1_1DMEFTSimpleSpec"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>Gambit::Models::DiracSingletDM_Z2SimpleSpec</label>
        <link refid="classGambit_1_1Models_1_1DiracSingletDM__Z2SimpleSpec"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>Gambit::Models::MajoranaSingletDM_Z2SimpleSpec</label>
        <link refid="classGambit_1_1Models_1_1MajoranaSingletDM__Z2SimpleSpec"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>Gambit::Models::ScalarSingletDM_Z2SimpleSpec</label>
        <link refid="classGambit_1_1Models_1_1ScalarSingletDM__Z2SimpleSpec"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>Gambit::Models::ScalarSingletDM_Z3SimpleSpec</label>
        <link refid="classGambit_1_1Models_1_1ScalarSingletDM__Z3SimpleSpec"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>Gambit::Models::VectorSingletDM_Z2SimpleSpec</label>
        <link refid="classGambit_1_1Models_1_1VectorSingletDM__Z2SimpleSpec"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>Gambit::SLHASimpleSpec&lt; Derived &gt;</label>
        <link refid="classGambit_1_1SLHASimpleSpec"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>Gambit::SMSimpleSpec</label>
        <link refid="classGambit_1_1SMSimpleSpec"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>Gambit::Spec&lt; DerivedSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>Gambit::SpecBit::MDMSpec&lt; MI &gt;</label>
        <link refid="classGambit_1_1SpecBit_1_1MDMSpec"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>Gambit::SpecBit::MSSMSpec&lt; MI &gt;</label>
        <link refid="classGambit_1_1SpecBit_1_1MSSMSpec"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>Gambit::SpecBit::QedQcdWrapper</label>
        <link refid="classGambit_1_1SpecBit_1_1QedQcdWrapper"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>Gambit::SpecBit::SMHiggsSimpleSpec</label>
        <link refid="classGambit_1_1SpecBit_1_1SMHiggsSimpleSpec"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>Gambit::SpecBit::ScalarSingletDM_Z2Spec&lt; MI &gt;</label>
        <link refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z2Spec"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>Gambit::SpecBit::ScalarSingletDM_Z3Spec&lt; MI &gt;</label>
        <link refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z3Spec"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Gambit::SubSpectrum</label>
        <link refid="classGambit_1_1SubSpectrum"/>
      </node>
      <node id="3">
        <label>Gambit::SLHASimpleSpec&lt; MSSMSimpleSpec &gt;</label>
        <link refid="classGambit_1_1SLHASimpleSpec"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>Gambit::SLHASimpleSpec&lt; SMSimpleSpec &gt;</label>
        <link refid="classGambit_1_1SLHASimpleSpec"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Gambit::Spec&lt; DMEFTSimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>Gambit::Spec&lt; Derived &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Gambit::Spec&lt; DiracSingletDM_Z2SimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>Gambit::Spec&lt; MDMSpec&lt; MI &gt; &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Gambit::Spec&lt; MSSMSimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>Gambit::Spec&lt; MSSMSpec&lt; MI &gt; &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>Gambit::Spec&lt; MajoranaSingletDM_Z2SimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>Gambit::Spec&lt; QedQcdWrapper &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>Gambit::Spec&lt; SMHiggsSimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>Gambit::Spec&lt; SMSimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Gambit::Spec&lt; ScalarSingletDM_Z2SimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>Gambit::Spec&lt; ScalarSingletDM_Z2Spec&lt; MI &gt; &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>Gambit::Spec&lt; ScalarSingletDM_Z3SimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>Gambit::Spec&lt; ScalarSingletDM_Z3Spec&lt; MI &gt; &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>Gambit::Spec&lt; VectorSingletDM_Z2SimpleSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="Elements/include/gambit/Elements/subspectrum.hpp" line="87" column="4" bodyfile="Elements/include/gambit/Elements/subspectrum.hpp" bodystart="88" bodyend="270"/>
    <listofallmembers>
      <member refid="classGambit_1_1SubSpectrum_1acdbd6db5cc3b473b7e6445bfcf686f64" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>add_to_SLHAea</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a65f9dc06f3c8c6f15094a18b840a149d" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>clone</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aa6892cfd9db50b229dc8e5c0c8b4d0b9" prot="private" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>create_override_maps</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a43a6a9242c75a6addc856c9370db2c18" prot="private" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>empty_map</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a7628765f659616f92dfb00d250135a45" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aee87dab2aba184c8791f66e48faf4017" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a5d7f05d24f9ea7053017fa4467d08fe4" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a4aa3c288df9625876aa5dc1271450a4f" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ad777663700297fc43301c2a71288e56c" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a785b082b5f58bd249dc1a6f6321db435" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a5e9acc22b9d462e531c50b5727c870c1" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>get_numbers_stable_particles</name></member>
      <member refid="classGambit_1_1SubSpectrum_1af6ff4528277f9d6acab373942f346331" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>getName</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a7bd448d64af954e4b596f4a6eebea0e9" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>GetScale</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a5a6fd9949ec1ffe5d0b1d6b64f568b01" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>getSLHAea</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aa4b3a1ca4b864081a054b323a1c2f90f" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>hard_lower</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a7f39428653fa985b340c1df498d6ec42" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>hard_upper</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a2725617f7d7a1ae7f096c7d6269c9293" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ac9b850848b43d82b58f7d72c0ec4885b" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ad91d2826ed9118ce59ab42e098a31d70" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a4828fe7699db6cd695871eac0e944f90" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ab8004e0a7ca69f1a0fffa7b18a3f7182" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a1ce6d110547e72c5db901dd92c40444b" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ae733c2e2d247f846a957dd880d165144" prot="protected" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>override_maps</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a6f23c9146e2d9eab8a3db88f5a5232b6" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>PDG_translator</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a123082cb4740033d2ae243c1d27cea28" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>RunToScale</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a64445baba3f7a8bf116bea7caba1a52c" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>RunToScaleOverride</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a12bb8ae854bdbf402adcd3eeab3387e2" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aaeff9db607b0a8118fdcd380ee6a0eba" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a69d2743c3bc07fd881cc83fd5bbe216a" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a8271aef7ca1cca4c7da767e5cade9c59" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1adf70c0de7818c1d85c0d0fcd8013aa76" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a622717528952171fa114ae152c7ae340" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ad2b12a60691536d81893dfb12d31007f" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>set</name></member>
      <member refid="classGambit_1_1SubSpectrum_1afc3ec1d834adbb46f5074c071a63992b" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>set</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ab49d43623cb1e9a4025e42a66a8d9803" prot="public" virt="pure-virtual"><scope>Gambit::SubSpectrum</scope><name>set</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a723f6a66f3875abd2c6a6e8d8e03266d" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ad272d296f35e6ad0168b4e092eb53943" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1abc80e335179d3633c2f537325673e0ab" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a456eeb816ef8539eaa8bd85e04d6f1c8" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1adef6cacf9f63fcd1cbba22629399ad18" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a8f4bd036dd357d53e34e28615842a803" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ae0c6a2e9b63648b48911b76d6fabf63d" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a53c514918a7a32dce21697dbc9af95d7" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1af1551952a18488ce3793e062bf933a7a" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a21cab80b6c51bfb5801fb5e31896e164" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aa6014ef072831d0117332e3df719ebf3" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>SetScale</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a86e81042c8a0c13821a9c45d616c5b9b" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>soft_lower</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a3fa1af32eea87011aa4c6dce006878c7" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>soft_upper</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a56f353d2be541104f324b2e449a0e682" prot="public" virt="non-virtual"><scope>Gambit::SubSpectrum</scope><name>SubSpectrum</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a7f86c4329e031f37ec2faffa5b1a48f4" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>writeSLHAfile</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a52ae9f8b079817bb6a26b53779fd1df9" prot="public" virt="virtual"><scope>Gambit::SubSpectrum</scope><name>~SubSpectrum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
