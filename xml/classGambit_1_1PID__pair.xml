<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1PID__pair" kind="class" language="C++" prot="public">
    <compoundname>Gambit::PID_pair</compoundname>
    <includes refid="PID__pair_8hpp" local="no">PID_pair.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classGambit_1_1PID__pair_1a58cc095f0130673531ce715224e00e6e" prot="public" static="no">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>typedef std::pair&lt;int,int&gt; Gambit::PID_pair::iipair</definition>
        <argsstring></argsstring>
        <name>iipair</name>
        <qualifiedname>Gambit::PID_pair::iipair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="36" column="25" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGambit_1_1PID__pair_1a066bf1aa27c2ea2b6d19f558129fffba" prot="private" static="no" mutable="no">
        <type>iipair</type>
        <definition>iipair Gambit::PID_pair::_pids</definition>
        <argsstring></argsstring>
        <name>_pids</name>
        <qualifiedname>Gambit::PID_pair::_pids</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="144" column="14" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1PID__pair_1af7342a06a25c91e4d5a1ee5ee6709e59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::PID_pair::PID_pair</definition>
        <argsstring>()</argsstring>
        <name>PID_pair</name>
        <qualifiedname>Gambit::PID_pair::PID_pair</qualifiedname>
        <briefdescription>
<para>Constructors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="39" column="7" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1ac1a41c7434f27c0cf3e2f82acb379a2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::PID_pair::PID_pair</definition>
        <argsstring>(int pid1_in, int pid2_in)</argsstring>
        <name>PID_pair</name>
        <qualifiedname>Gambit::PID_pair::PID_pair</qualifiedname>
        <param>
          <type>int</type>
          <declname>pid1_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="43" column="7" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1ad7b302c3be930777a63ef327b630af5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::PID_pair::PID_pair</definition>
        <argsstring>(const iipair &amp;PIDs_in)</argsstring>
        <name>PID_pair</name>
        <qualifiedname>Gambit::PID_pair::PID_pair</qualifiedname>
        <param>
          <type>const iipair &amp;</type>
          <declname>PIDs_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="49" column="7" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1af70c6da31f21c944d37c140aeaa95e01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Gambit::PID_pair::~PID_pair</definition>
        <argsstring>()</argsstring>
        <name>~PID_pair</name>
        <qualifiedname>Gambit::PID_pair::~PID_pair</qualifiedname>
        <briefdescription>
<para>Detstructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="56" column="15" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a73c34d37abde49c50929f0ec0527153f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::PID_pair::set_pids</definition>
        <argsstring>(int pid1_in, int pid2_in)</argsstring>
        <name>set_pids</name>
        <qualifiedname>Gambit::PID_pair::set_pids</qualifiedname>
        <param>
          <type>int</type>
          <declname>pid1_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2_in</declname>
        </param>
        <briefdescription>
<para>Set PIDs, with sorting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="60" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a15d62a1947a69aaf4d5cb186e34357db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::PID_pair::set_pids</definition>
        <argsstring>(const iipair &amp;PIDs_in)</argsstring>
        <name>set_pids</name>
        <qualifiedname>Gambit::PID_pair::set_pids</qualifiedname>
        <param>
          <type>const iipair &amp;</type>
          <declname>PIDs_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="72" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a99a97b13f0fbdd7ba78d6816639114c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const iipair &amp;</type>
        <definition>const iipair &amp; Gambit::PID_pair::PIDs</definition>
        <argsstring>() const</argsstring>
        <name>PIDs</name>
        <qualifiedname>Gambit::PID_pair::PIDs</qualifiedname>
        <briefdescription>
<para>Get PIDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="79" column="20" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1adb0bdaaf0ed803abae5e07234a15bcb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::PID_pair::pid1</definition>
        <argsstring>() const</argsstring>
        <name>pid1</name>
        <qualifiedname>Gambit::PID_pair::pid1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="84" column="11" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1ab67884dc7f268416e03dce82dd2fa28f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::PID_pair::pid2</definition>
        <argsstring>() const</argsstring>
        <name>pid2</name>
        <qualifiedname>Gambit::PID_pair::pid2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="89" column="11" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a34e78c302595256beb94420a6ff44e2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1PID__pair" kindref="compound">PID_pair</ref></type>
        <definition>PID_pair Gambit::PID_pair::cc_pid_pair</definition>
        <argsstring>() const</argsstring>
        <name>cc_pid_pair</name>
        <qualifiedname>Gambit::PID_pair::cc_pid_pair</qualifiedname>
        <briefdescription>
<para>Get the charge-conjugated PID pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="95" column="16" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a83252ce06a7ac05006f783d86656d246" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::PID_pair::is_antiparticle_pair</definition>
        <argsstring>() const</argsstring>
        <name>is_antiparticle_pair</name>
        <qualifiedname>Gambit::PID_pair::is_antiparticle_pair</qualifiedname>
        <briefdescription>
<para>Check if |pid1| == |pid2|. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="101" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a994e20ecca74e98cb48084854cd8419b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::PID_pair::operator==</definition>
        <argsstring>(const PID_pair &amp;rhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Gambit::PID_pair::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1PID__pair" kindref="compound">PID_pair</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Relational operators, simply using the relational operators for the underlying pair&lt;int,int&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="108" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="108" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1ab04a87d5da5924d319aafaceb849d7aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::PID_pair::operator!=</definition>
        <argsstring>(const PID_pair &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Gambit::PID_pair::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1PID__pair" kindref="compound">PID_pair</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="111" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="111" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a41b5c155c2d8c8c2d8c80e5bec962ac5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::PID_pair::operator&lt;</definition>
        <argsstring>(const PID_pair &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>Gambit::PID_pair::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1PID__pair" kindref="compound">PID_pair</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="114" column="7" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="114" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1ad3121d94a2be8e3195057cb18ed00d88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::PID_pair::operator&lt;=</definition>
        <argsstring>(const PID_pair &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Gambit::PID_pair::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1PID__pair" kindref="compound">PID_pair</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="117" column="7" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="117" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1afd1668a990f1cb96549a16df1b6cad00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::PID_pair::operator&gt;</definition>
        <argsstring>(const PID_pair &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>Gambit::PID_pair::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1PID__pair" kindref="compound">PID_pair</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="120" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="120" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a0e685a7bb09c76ac7c9861ddbd8a7854" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::PID_pair::operator&gt;=</definition>
        <argsstring>(const PID_pair &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Gambit::PID_pair::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1PID__pair" kindref="compound">PID_pair</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="123" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="123" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a8633b37b6db054f306b4e8d3b1fd60f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::PID_pair::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>Gambit::PID_pair::reset</qualifiedname>
        <briefdescription>
<para>Reset the PIDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="128" column="12" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1PID__pair_1a8a289e6164aa7333fb6a1813e75967b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::PID_pair::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <qualifiedname>Gambit::PID_pair::str</qualifiedname>
        <briefdescription>
<para>Get the PID pair as a string: &quot;&lt;pid1&gt;_&lt;pid2&gt;&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="135" column="19" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="135" bodyend="139"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Simple class for holding a sorted pair of particle ID (PID) codes. This is essentially just a wrapper around a std::pair&lt;int,int&gt;, with forced ordering (first element &lt;= second element) and some extra bells and whistles. </para>
    </detaileddescription>
    <location file="Utils/include/gambit/Utils/PID_pair.hpp" line="31" column="3" bodyfile="Utils/include/gambit/Utils/PID_pair.hpp" bodystart="32" bodyend="145"/>
    <listofallmembers>
      <member refid="classGambit_1_1PID__pair_1a066bf1aa27c2ea2b6d19f558129fffba" prot="private" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>_pids</name></member>
      <member refid="classGambit_1_1PID__pair_1a34e78c302595256beb94420a6ff44e2d" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>cc_pid_pair</name></member>
      <member refid="classGambit_1_1PID__pair_1a58cc095f0130673531ce715224e00e6e" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>iipair</name></member>
      <member refid="classGambit_1_1PID__pair_1a83252ce06a7ac05006f783d86656d246" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>is_antiparticle_pair</name></member>
      <member refid="classGambit_1_1PID__pair_1ab04a87d5da5924d319aafaceb849d7aa" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>operator!=</name></member>
      <member refid="classGambit_1_1PID__pair_1a41b5c155c2d8c8c2d8c80e5bec962ac5" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>operator&lt;</name></member>
      <member refid="classGambit_1_1PID__pair_1ad3121d94a2be8e3195057cb18ed00d88" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>operator&lt;=</name></member>
      <member refid="classGambit_1_1PID__pair_1a994e20ecca74e98cb48084854cd8419b" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>operator==</name></member>
      <member refid="classGambit_1_1PID__pair_1afd1668a990f1cb96549a16df1b6cad00" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>operator&gt;</name></member>
      <member refid="classGambit_1_1PID__pair_1a0e685a7bb09c76ac7c9861ddbd8a7854" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>operator&gt;=</name></member>
      <member refid="classGambit_1_1PID__pair_1adb0bdaaf0ed803abae5e07234a15bcb6" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>pid1</name></member>
      <member refid="classGambit_1_1PID__pair_1ab67884dc7f268416e03dce82dd2fa28f" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>pid2</name></member>
      <member refid="classGambit_1_1PID__pair_1af7342a06a25c91e4d5a1ee5ee6709e59" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>PID_pair</name></member>
      <member refid="classGambit_1_1PID__pair_1ac1a41c7434f27c0cf3e2f82acb379a2b" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>PID_pair</name></member>
      <member refid="classGambit_1_1PID__pair_1ad7b302c3be930777a63ef327b630af5e" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>PID_pair</name></member>
      <member refid="classGambit_1_1PID__pair_1a99a97b13f0fbdd7ba78d6816639114c9" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>PIDs</name></member>
      <member refid="classGambit_1_1PID__pair_1a8633b37b6db054f306b4e8d3b1fd60f6" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>reset</name></member>
      <member refid="classGambit_1_1PID__pair_1a73c34d37abde49c50929f0ec0527153f" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>set_pids</name></member>
      <member refid="classGambit_1_1PID__pair_1a15d62a1947a69aaf4d5cb186e34357db" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>set_pids</name></member>
      <member refid="classGambit_1_1PID__pair_1a8a289e6164aa7333fb6a1813e75967b8" prot="public" virt="non-virtual"><scope>Gambit::PID_pair</scope><name>str</name></member>
      <member refid="classGambit_1_1PID__pair_1af70c6da31f21c944d37c140aeaa95e01" prot="public" virt="virtual"><scope>Gambit::PID_pair</scope><name>~PID_pair</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
