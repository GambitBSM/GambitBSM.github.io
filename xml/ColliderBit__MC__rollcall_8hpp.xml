<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ColliderBit__MC__rollcall_8hpp" kind="file" language="C++">
    <compoundname>ColliderBit_MC_rollcall.hpp</compoundname>
    <includes refid="util__types_8hpp" local="yes">gambit/Utils/util_types.hpp</includes>
    <includedby refid="ColliderBit__rollcall_8hpp" local="yes">ColliderBit_rollcall.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>ColliderBit_MC_rollcall.hpp</label>
        <link refid="ColliderBit__MC__rollcall_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gambit/Logs/log_tags.hpp</label>
        <link refid="log__tags_8hpp"/>
      </node>
      <node id="13">
        <label>gambit/Utils/boost_fallbacks.hpp</label>
        <link refid="boost__fallbacks_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>gambit/Utils/cats.hpp</label>
        <link refid="Utils_2include_2gambit_2Utils_2cats_8hpp"/>
      </node>
      <node id="30">
        <label>gambit/Utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>gambit/Utils/export_symbols.hpp</label>
        <link refid="export__symbols_8hpp"/>
      </node>
      <node id="20">
        <label>gambit/Utils/local_info.hpp</label>
        <link refid="local__info_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
        <link refid="standalone__error__handlers_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>gambit/Utils/stringify.hpp</label>
        <link refid="stringify_8hpp"/>
      </node>
      <node id="11">
        <label>gambit/Utils/util_macros.hpp</label>
        <link refid="util__macros_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gambit/Utils/util_types.hpp</label>
        <link refid="util__types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gambit/Utils/variadic_functions.hpp</label>
        <link refid="variadic__functions_8hpp"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>array</label>
      </node>
      <node id="21">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="16">
        <label>boost/detail/workaround.hpp</label>
      </node>
      <node id="27">
        <label>boost/preprocessor/arithmetic/sub.hpp</label>
      </node>
      <node id="17">
        <label>boost/preprocessor/cat.hpp</label>
      </node>
      <node id="26">
        <label>boost/preprocessor/comparison/equal.hpp</label>
      </node>
      <node id="15">
        <label>boost/preprocessor/config/config.hpp</label>
      </node>
      <node id="25">
        <label>boost/preprocessor/control/if.hpp</label>
      </node>
      <node id="28">
        <label>boost/preprocessor/punctuation/comma.hpp</label>
      </node>
      <node id="29">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="23">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="24">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="14">
        <label>boost/version.hpp</label>
      </node>
      <node id="40">
        <label>cassert</label>
      </node>
      <node id="8">
        <label>complex</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="45">
        <label>deque</label>
      </node>
      <node id="32">
        <label>exception</label>
      </node>
      <node id="44">
        <label>forward_list</label>
      </node>
      <node id="38">
        <label>fstream</label>
      </node>
      <node id="37">
        <label>iostream</label>
      </node>
      <node id="43">
        <label>list</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="9">
        <label>memory</label>
      </node>
      <node id="6">
        <label>omp.h</label>
      </node>
      <node id="31">
        <label>set</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="39">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>unistd.h</label>
      </node>
      <node id="41">
        <label>unordered_map</label>
      </node>
      <node id="42">
        <label>unordered_set</label>
      </node>
      <node id="34">
        <label>utility</label>
      </node>
      <node id="33">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>ColliderBit_MC_rollcall.hpp</label>
        <link refid="ColliderBit__MC__rollcall_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ColliderBit_eventloop.hpp</label>
        <link refid="ColliderBit__eventloop_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ColliderBit_rollcall.hpp</label>
        <link refid="ColliderBit__rollcall_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>generateEventPy8Collider.hpp</label>
        <link refid="generateEventPy8Collider_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>getPy8Collider.hpp</label>
        <link refid="getPy8Collider_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ColliderBit_Higgs.cpp</label>
        <link refid="ColliderBit__Higgs_8cpp"/>
      </node>
      <node id="4">
        <label>ColliderBit_InterpolatedYields.cpp</label>
        <link refid="ColliderBit__InterpolatedYields_8cpp"/>
      </node>
      <node id="5">
        <label>ColliderBit_LEP.cpp</label>
        <link refid="ColliderBit__LEP_8cpp"/>
      </node>
      <node id="6">
        <label>ColliderBit_dummy.cpp</label>
        <link refid="ColliderBit__dummy_8cpp"/>
      </node>
      <node id="8">
        <label>ColliderBit_eventloop.cpp</label>
        <link refid="ColliderBit__eventloop_8cpp"/>
      </node>
      <node id="9">
        <label>ColliderBit_measurements.cpp</label>
        <link refid="ColliderBit__measurements_8cpp"/>
      </node>
      <node id="24">
        <label>LHC_likelihoods.cpp</label>
        <link refid="LHC__likelihoods_8cpp"/>
      </node>
      <node id="10">
        <label>collider_event_weights.cpp</label>
        <link refid="collider__event__weights_8cpp"/>
      </node>
      <node id="14">
        <label>getActiveProcessCodes.cpp</label>
        <link refid="getActiveProcessCodes_8cpp"/>
      </node>
      <node id="15">
        <label>getAnalysisContainer.cpp</label>
        <link refid="getAnalysisContainer_8cpp"/>
      </node>
      <node id="16">
        <label>getBuckFast.cpp</label>
        <link refid="getBuckFast_8cpp"/>
      </node>
      <node id="17">
        <label>getHepMCEvent.cpp</label>
        <link refid="getHepMCEvent_8cpp"/>
      </node>
      <node id="18">
        <label>getLHEvent.cpp</label>
        <link refid="getLHEvent_8cpp"/>
      </node>
      <node id="20">
        <label>getxsec.cpp</label>
        <link refid="getxsec_8cpp"/>
      </node>
      <node id="25">
        <label>lep_mssm_xsecs.cpp</label>
        <link refid="lep__mssm__xsecs_8cpp"/>
      </node>
      <node id="12">
        <label>SUSY.cpp</label>
        <link refid="SUSY_8cpp"/>
      </node>
      <node id="13">
        <label>SUSY_extras.cpp</label>
        <link refid="SUSY__extras_8cpp"/>
      </node>
      <node id="21">
        <label>process_code_PID_pair_mapping.cpp</label>
        <link refid="process__code__PID__pair__mapping_8cpp"/>
      </node>
      <node id="22">
        <label>runAnalyses.cpp</label>
        <link refid="runAnalyses_8cpp"/>
      </node>
      <node id="23">
        <label>smearEvent.cpp</label>
        <link refid="smearEvent_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>RunMC</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="51" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>operateLHCLoop</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="53" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>InterpolatedMCInfo</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="59" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>TotalEvGenCrossSection</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="69" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getEvGenCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="71" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>TotalCrossSection</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="78" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getEvGenCrossSection_as_base</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="82" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getNLLFastCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="89" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getYAMLCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="96" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getYAMLCrossSection_SLHA</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="103" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getYAMLCrossSection_param</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="112" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>TotalCrossSectionAsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="121" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getTotalCrossSectionAsMap</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="123" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ActiveProcessCodes</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="135" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getActiveProcessCodes</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="137" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ActivePIDPairs</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="145" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getActivePIDPairs</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="147" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ActiveProcessCodeToPIDPairsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="156" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getActiveProcessCodeToPIDPairsMap</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="158" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ProcessCrossSectionsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="171" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getProcessCrossSectionsMap</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="173" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>PIDPairCrossSectionsMap</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="183" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getPIDPairCrossSectionsMap_testing</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="185" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>PIDPairCrossSectionsInfo</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="194" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getPIDPairCrossSectionsInfo</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="196" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CrossSectionConsistencyCheck</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="207" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>doCrossSectionConsistencyCheck</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="209" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASAnalysisContainer</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="220" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getATLASAnalysisContainer</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="222" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSAnalysisContainer</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="229" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getCMSAnalysisContainer</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="231" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>IdentityAnalysisContainer</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="238" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getIdentityAnalysisContainer</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="240" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="250" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>runATLASAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="252" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="260" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>runCMSAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="262" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>IdentityAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="270" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>runIdentityAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="272" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>AllAnalysisNumbers</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="282" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>CollectAnalyses</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="284" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DMEFT_results_profiled</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="292" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DMEFT_results_cutoff</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="300" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DMsimp_results</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="307" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>AllAnalysisNumbersUnmodified</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="319" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DMEFT_results</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="320" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>DMEFT_profiled_LHC_nuisance_params</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="327" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_DMEFT_profiled_LHC_nuisance_params</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="328" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>Dijet_LogLike</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="337" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>DiJet_LogLike_DMsimp</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="338" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_signals</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="350" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_LHC_signals</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="352" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLikes</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="359" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_LHC_LogLikes_full</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="362" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_LHC_LogLikes</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="374" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_per_SR</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="385" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_per_SR</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="387" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_per_analysis</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="394" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_per_analysis</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="396" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_SR_labels</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="404" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_SR_labels</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="406" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_SR_indices</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="413" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>get_LHC_LogLike_SR_indices</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="415" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_Combined_LogLike</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="422" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_combined_LHC_LogLike</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="424" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHC_LogLike_scan_guide</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="432" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>calc_LHC_LogLike_scan_guide</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="434" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>LHCEventLoopInfo</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="442" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getLHCEventLoopInfo</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="444" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>DummyColliderObservable</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="454" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getDummyColliderObservable</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="456" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASDetectorSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="464" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getBuckFastATLAS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="466" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSDetectorSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="472" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getBuckFastCMS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="474" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>IdentityDetectorSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="480" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getBuckFastIdentity</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="482" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>ATLASSmearedEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="491" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>smearEventATLAS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="493" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CMSSmearedEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="501" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>smearEventCMS</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="503" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>CopiedEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="511" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>copyEvent</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="513" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>EventWeighterFunction</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="525" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>setEventWeight_unity</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="530" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>setEventWeight_fromCrossSection</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="535" column="13" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>SpectrumAndDecaysForPythia</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="552" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>HardScatteringSim</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="557" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" prot="public" static="no">
        <name>CAPABILITY</name>
        <initializer>HardScatteringEvent</initializer>
        <briefdescription>
<para>Get a list of all the PID pairs related to active process codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculate the log likelihood for each SR in each analysis using the analysis numbers.</para>
<para>Extract the signal predictions and uncertainties for all analyses.</para>
<para>Di-jet likelihoods.</para>
<para>Collect all the analysis numbers in one place.</para>
<para>A map between PID pairs and cross-sections.</para>
<para>Execute the main Monte Carlo event loop. Note: &quot;Non-loop&quot; capabilities that some in-loop capabilities depend on can be added as dependencies here to ensure that they are calculated before the loop starts.</para>
<para>Total cross-section</para>
<para>Output info on TotalCrossSection as a str-double map, for easy printing</para>
<para>Process codes and PID pairs</para>
<para>Get list of Pythia process codes for all active processes</para>
<para>Translate a list of Pythia process codes to list of (PID,PID) pairs for the two final state particles of the hard process.</para>
<para>Process-level cross-sections</para>
<para>A map between Pythia process codes and cross-sections</para>
<para>Output PID pair cross-sections as a str-dbl map, for easy printing</para>
<para>A consistency check that ensures that if each event is weighted by a process-level cross-section from an external calculator, then the total cross-section is taken from the event generator</para>
<para>Lists of analyses to run</para>
<para>Run all analyses and fill vector of analysis results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="562" column="11" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getLHEvent_HEPUtils</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="569" column="15" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getHepMCEvent</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="575" column="15" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>getHepMCEvent_HEPUtils</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="581" column="15" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" prot="public" static="no">
        <name>FUNCTION</name>
        <initializer>convertHepMCEvent_HEPUtils</initializer>
        <briefdescription>
<para>Example function for interfacing alternative cross-section calculators. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert the TotalEvGenCrossSection (type MC_xsec_container) into a regular TotalCrossSection (type xsec_container)</para>
<para>A function that reads the total cross-section from the input file, but builds up the number of events from the event loop</para>
<para>A function that assigns a total cross-sections to a given SLHA input file (for model ColliderBit_SLHA_file_model)</para>
<para>A function that assigns a total cross-sections directly from the scan parameters for model ColliderBit_SLHA_scan_model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="587" column="15" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="ColliderBit__MC__rollcall_8hpp_1a2c63ae95fe7c6106ae1ec9c283afa486" prot="public" static="no">
        <name>MODULE</name>
        <initializer>ColliderBit</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="44" column="9" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ColliderBit__MC__rollcall_8hpp_1a831b74f6fd9f8b6566cc5e954672c6b4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lnlike_marg_poisson_gaussian_error</definition>
        <argsstring></argsstring>
        <name>lnlike_marg_poisson_gaussian_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="367" column="6" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ColliderBit__MC__rollcall_8hpp_1aebf23f94f4198dd6692333872063c6c4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>const int const double const double const double const str const str double</definition>
        <argsstring></argsstring>
        <name>double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="367" column="42" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ColliderBit__MC__rollcall_8hpp_1aa5e0bae97c9a9448d7c7b3f28dea4889" prot="public" static="no" mutable="no">
        <type>const int const double const double const double</type>
        <definition>const int const double const double const double ATLAS_FullLikes</definition>
        <argsstring></argsstring>
        <name>ATLAS_FullLikes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="370" column="6" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ColliderBit__MC__rollcall_8hpp_1a51bb225d17877396161100ca354ffe71" prot="public" static="no" mutable="no">
        <type>const int const double const double const double</type>
        <definition>obsname double double const nuisance char const parameters double char int const parameters const nuisance double const parameters const parameters const parameters const parameters const parameters const parameters const parameters const parameters double const parameters double const parameters double const parameters int</definition>
        <argsstring></argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="370" column="22" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ColliderBit__MC__rollcall_8hpp_1ab5c92de626d6b1e4286c97aeea947955" prot="public" static="no" mutable="no">
        <type>const int const double const double const double const str const str</type>
        <definition>const int const double const double const double const str const str lnlike_marg_poisson_lognormal_error</definition>
        <argsstring></argsstring>
        <name>lnlike_marg_poisson_lognormal_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="378" column="6" bodyfile="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" bodystart="378" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ColliderBit__MC__rollcall_8hpp_1af949739165c340ceffda04cdda8e8c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BACKEND_REQ_FROM_GROUP</definition>
        <argsstring>(lnlike_marg_poisson, lnlike_marg_poisson_lognormal_error,(), double,(const int &amp;, const double &amp;, const double &amp;, const double &amp;)) BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson</argsstring>
        <name>BACKEND_REQ_FROM_GROUP</name>
        <param>
          <type>lnlike_marg_poisson</type>
        </param>
        <param>
          <type>lnlike_marg_poisson_lognormal_error</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>(const int &amp;, const double &amp;, const double &amp;, const double &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="366" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__MC__rollcall_8hpp_1ae643da01d3d92cca88f6e51e9ed71a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int const double const double const double &amp;</type>
        <definition>const int const double const double const double &amp; BACKEND_REQ</definition>
        <argsstring>(FullLikes_Evaluate,(ATLAS_FullLikes), double,(std::map&lt; str, double &gt; &amp;, const str &amp;)) BACKEND_REQ(FullLikes_ReadIn</argsstring>
        <name>BACKEND_REQ</name>
        <param>
          <type>FullLikes_Evaluate</type>
        </param>
        <param>
          <type>(ATLAS_FullLikes)</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>(std::map&lt; str, double &gt; &amp;, const str &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="369" column="5"/>
      </memberdef>
      <memberdef kind="function" id="ColliderBit__MC__rollcall_8hpp_1a91bb2ca97ddb25bc3a1661696a75fa03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int const double const double const double const str const str &amp;</type>
        <definition>const int const double const double const double const str const str &amp; BACKEND_REQ</definition>
        <argsstring>(FullLikes_FileExists,(ATLAS_FullLikes), bool,(const str &amp;)) BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson</argsstring>
        <name>BACKEND_REQ</name>
        <param>
          <type>FullLikes_FileExists</type>
        </param>
        <param>
          <type>(ATLAS_FullLikes)</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>(const str &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp" line="371" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Rollcall header for ColliderBit module.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Abram Krislock (<ulink url="mailto:a.m.b.krislock@fys.uio.no">a.m.b.krislock@fys.uio.no</ulink>)</para>
</simplesect>
<simplesect kind="author"><para>Aldo Saavedra</para>
</simplesect>
<simplesect kind="author"><para>Christopher Rogan (<ulink url="mailto:christophersrogan@gmail.com">christophersrogan@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Apr</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Jul </para>
</simplesect>
<simplesect kind="date"><para>2018 Jan </para>
</simplesect>
<simplesect kind="date"><para>2019 Jan, Feb</para>
</simplesect>
<simplesect kind="author"><para>Andy Buckley (<ulink url="mailto:andy.buckley@cern.ch">andy.buckley@cern.ch</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Jun</para>
</simplesect>
<simplesect kind="author"><para>Anders Kvellestad (<ulink url="mailto:a.kvellestad@imperial.ac.uk">a.kvellestad@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 Sep</para>
</simplesect>
<simplesect kind="author"><para>Tomasz Procter (<ulink url="mailto:t.procter.1@research.gla.ac.uk">t.procter.1@research.gla.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2021 November</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>Rollcall<sp/>header<sp/>for<sp/>ColliderBit<sp/>module.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///<sp/><sp/>Authors<sp/>(add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify):</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///<sp/><sp/>\author<sp/>Abram<sp/>Krislock</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a.m.b.krislock@fys.uio.no)</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/><sp/>\author<sp/>Aldo<sp/>Saavedra</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/><sp/>\author<sp/>Christopher<sp/>Rogan</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(christophersrogan@gmail.com)</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///<sp/><sp/>\date<sp/>2015<sp/>Apr</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///</highlight></codeline>
<codeline lineno="20"><highlight class="comment">///<sp/><sp/>\author<sp/>Pat<sp/>Scott</highlight></codeline>
<codeline lineno="21"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p.scott@imperial.ac.uk)</highlight></codeline>
<codeline lineno="22"><highlight class="comment">///<sp/><sp/>\date<sp/>2015<sp/>Jul</highlight></codeline>
<codeline lineno="23"><highlight class="comment">///<sp/><sp/>\date<sp/>2018<sp/>Jan</highlight></codeline>
<codeline lineno="24"><highlight class="comment">///<sp/><sp/>\date<sp/>2019<sp/>Jan,<sp/>Feb</highlight></codeline>
<codeline lineno="25"><highlight class="comment">///</highlight></codeline>
<codeline lineno="26"><highlight class="comment">///<sp/><sp/>\author<sp/>Andy<sp/>Buckley</highlight></codeline>
<codeline lineno="27"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(andy.buckley@cern.ch)</highlight></codeline>
<codeline lineno="28"><highlight class="comment">///<sp/><sp/>\date<sp/>2017<sp/>Jun</highlight></codeline>
<codeline lineno="29"><highlight class="comment">///</highlight></codeline>
<codeline lineno="30"><highlight class="comment">///<sp/><sp/>\author<sp/>Anders<sp/>Kvellestad</highlight></codeline>
<codeline lineno="31"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a.kvellestad@imperial.ac.uk)</highlight></codeline>
<codeline lineno="32"><highlight class="comment">///<sp/><sp/>\date<sp/>2019<sp/>Sep</highlight></codeline>
<codeline lineno="33"><highlight class="comment">///</highlight></codeline>
<codeline lineno="34"><highlight class="comment">///<sp/>\author<sp/>Tomasz<sp/>Procter</highlight></codeline>
<codeline lineno="35"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(t.procter.1@research.gla.ac.uk)</highlight></codeline>
<codeline lineno="36"><highlight class="comment">///<sp/>\date<sp/>2021<sp/>November</highlight></codeline>
<codeline lineno="37"><highlight class="comment">///</highlight></codeline>
<codeline lineno="38"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util__types_8hpp" kindref="compound">gambit/Utils/util_types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODULE<sp/>ColliderBit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/>///<sp/>Execute<sp/>the<sp/>main<sp/>Monte<sp/>Carlo<sp/>event<sp/>loop.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>///<sp/>Note:<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/>///<sp/><sp/><sp/>&quot;Non-loop&quot;<sp/>capabilities<sp/>that<sp/>some<sp/>in-loop<sp/>capabilities<sp/>depend<sp/>on</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>///<sp/><sp/><sp/>can<sp/>be<sp/>added<sp/>as<sp/>dependencies<sp/>here<sp/>to<sp/>ensure<sp/>that<sp/>they<sp/>are<sp/>calculated</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>///<sp/><sp/><sp/>before<sp/>the<sp/>loop<sp/>starts.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>RunMC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>operateLHCLoop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(MCLoopInfo,<sp/>CAN_MANAGE_LOOPS)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(SLHAFileNameAndContent,<sp/>pair_str_SLHAstruct,<sp/>ColliderBit_SLHA_file_model,<sp/>ColliderBit_SLHA_scan_model)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>dummy<sp/>MCLoopInfo<sp/>object<sp/>for<sp/>interpolated<sp/>yield<sp/>&quot;colliders&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>InterpolatedMCInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(MCLoopInfo)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>///<sp/>Total<sp/>cross-section</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>total<sp/>cross-section<sp/>as<sp/>calculated<sp/>by<sp/>the<sp/>event<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>TotalEvGenCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getEvGenCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(MC_xsec_container)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(HardScatteringSim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseCollider*)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>TotalCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Convert<sp/>the<sp/>TotalEvGenCrossSection<sp/>(type<sp/>MC_xsec_container)<sp/>into<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>a<sp/>regular<sp/>TotalCrossSection<sp/>(type<sp/>xsec_container)</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getEvGenCrossSection_as_base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(TotalEvGenCrossSection,<sp/>MC_xsec_container)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Example<sp/>function<sp/>for<sp/>interfacing<sp/>alternative<sp/>cross-section<sp/>calculators</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getNLLFastCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>A<sp/>function<sp/>that<sp/>reads<sp/>the<sp/>total<sp/>cross-section<sp/>from<sp/>the<sp/>input<sp/>file,</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>but<sp/>builds<sp/>up<sp/>the<sp/>number<sp/>of<sp/>events<sp/>from<sp/>the<sp/>event<sp/>loop</highlight></codeline>
<codeline lineno="96"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getYAMLCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>A<sp/>function<sp/>that<sp/>assigns<sp/>a<sp/>total<sp/>cross-sections<sp/>to<sp/>a<sp/>given<sp/>SLHA<sp/>input<sp/>file</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>(for<sp/>model<sp/>ColliderBit_SLHA_file_model)</highlight></codeline>
<codeline lineno="103"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getYAMLCrossSection_SLHA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(ColliderBit_SLHA_file_model)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(SLHAFileNameAndContent,<sp/>pair_str_SLHAstruct)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>A<sp/>function<sp/>that<sp/>assigns<sp/>a<sp/>total<sp/>cross-sections<sp/>directly<sp/>from<sp/>the<sp/>scan<sp/>parameters</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>for<sp/>model<sp/>ColliderBit_SLHA_scan_model</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getYAMLCrossSection_param</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(xsec_container)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(ColliderBit_SLHA_scan_model)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>///<sp/>Output<sp/>info<sp/>on<sp/>TotalCrossSection<sp/>as<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/>///<sp/>a<sp/>str-double<sp/>map,<sp/>for<sp/>easy<sp/>printing</highlight></codeline>
<codeline lineno="121"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>TotalCrossSectionAsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getTotalCrossSectionAsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/>///<sp/>Process<sp/>codes<sp/>and<sp/>PID<sp/>pairs</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/>///<sp/>Get<sp/>list<sp/>of<sp/>Pythia<sp/>process<sp/>codes<sp/>for<sp/>all<sp/>active<sp/>processes</highlight></codeline>
<codeline lineno="135"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ActiveProcessCodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getActiveProcessCodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(std::vector&lt;int&gt;)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(HardScatteringSim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseCollider*)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/>///<sp/>Get<sp/>a<sp/>list<sp/>of<sp/>all<sp/>the<sp/>PID<sp/>pairs<sp/>related<sp/>to<sp/>active<sp/>process<sp/>codes</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ActivePIDPairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getActivePIDPairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(vec_PID_pair)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ActiveProcessCodeToPIDPairsMap,<sp/>multimap_int_PID_pair)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>///<sp/>Translate<sp/>a<sp/>list<sp/>of<sp/>Pythia<sp/>process<sp/>codes<sp/>to<sp/>list<sp/>of<sp/>(PID,PID)<sp/>pairs</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>///<sp/>for<sp/>the<sp/>two<sp/>final<sp/>state<sp/>particles<sp/>of<sp/>the<sp/>hard<sp/>process.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ActiveProcessCodeToPIDPairsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getActiveProcessCodeToPIDPairsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(multimap_int_PID_pair)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ActiveProcessCodes,<sp/>std::vector&lt;int&gt;)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY<sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="165"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/>///<sp/>Process-level<sp/>cross-sections</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>///<sp/>A<sp/>map<sp/>between<sp/>Pythia<sp/>process<sp/>codes<sp/>and<sp/>cross-sections</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ProcessCrossSectionsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getProcessCrossSectionsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_int_process_xsec)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ActiveProcessCodes,<sp/>std::vector&lt;int&gt;)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ActiveProcessCodeToPIDPairsMap,<sp/>multimap_int_PID_pair)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(PIDPairCrossSectionsMap,<sp/>map_PID_pair_PID_pair_xsec)<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>///<sp/>A<sp/>map<sp/>between<sp/>PID<sp/>pairs<sp/>and<sp/>cross-sections</highlight></codeline>
<codeline lineno="183"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>PIDPairCrossSectionsMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getPIDPairCrossSectionsMap_testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_PID_pair_PID_pair_xsec)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ActivePIDPairs,<sp/>vec_PID_pair)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>///<sp/>Output<sp/>PID<sp/>pair<sp/>cross-sections<sp/>as<sp/>a<sp/></highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>///<sp/>str-dbl<sp/>map,<sp/>for<sp/>easy<sp/>printing</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>PIDPairCrossSectionsInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getPIDPairCrossSectionsInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(PIDPairCrossSectionsMap,<sp/>map_PID_pair_PID_pair_xsec)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/>///<sp/>A<sp/>consistency<sp/>check<sp/>that<sp/>ensures<sp/>that<sp/>if<sp/>each<sp/>event<sp/>is<sp/>weighted</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>///<sp/>by<sp/>a<sp/>process-level<sp/>cross-section<sp/>from<sp/>an<sp/>external<sp/>calculator,<sp/>then</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/>///<sp/>the<sp/>total<sp/>cross-section<sp/>is<sp/>taken<sp/>from<sp/>the<sp/>event<sp/>generator</highlight></codeline>
<codeline lineno="207"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CrossSectionConsistencyCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>doCrossSectionConsistencyCheck</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NEEDS_MANAGER(RunMC,<sp/>MCLoopInfo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(EventWeighterFunction,<sp/>EventWeighterFunctionType)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>///<sp/>Lists<sp/>of<sp/>analyses<sp/>to<sp/>run</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getATLASAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisContainer)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getCMSAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisContainer)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>IdentityAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getIdentityAnalysisContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisContainer)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(TotalCrossSection,<sp/>xsec_container)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="247"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/>///<sp/>Run<sp/>all<sp/>analyses<sp/>and<sp/>fill<sp/>vector<sp/>of<sp/>analysis<sp/>results.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="250"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>runATLASAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ATLASSmearedEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ATLASAnalysisContainer,<sp/>AnalysisContainer)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>runCMSAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(CMSSmearedEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(CMSAnalysisContainer,<sp/>AnalysisContainer)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>IdentityAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>runIdentityAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(CopiedEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(IdentityAnalysisContainer,<sp/>AnalysisContainer)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/>///<sp/>Collect<sp/>all<sp/>the<sp/>analysis<sp/>numbers<sp/>in<sp/>one<sp/>place</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>AllAnalysisNumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>CollectAnalyses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(CrossSectionConsistencyCheck,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ATLASAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(CMSAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(IdentityAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DMEFT_results_profiled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(AllAnalysisNumbersUnmodified,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(DMEFT_profiled_LHC_nuisance_params,<sp/><ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(DMEFT)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DMEFT_results_cutoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(AllAnalysisNumbersUnmodified,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(DMEFT)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DMsimp_results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedScalarDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedScalarDM)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedMajoranaDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedMajoranaDM)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedDiracDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedDiracDM)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedVectorDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedVectorDM)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(Unitarity_Bound_DMsimpVectorMedMajoranaDM,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>DMsimpVectorMedMajoranaDM)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(Unitarity_Bound_DMsimpVectorMedDiracDM,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>DMsimpVectorMedDiracDM)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(DMsimpVectorMedScalarDM,<sp/>DMsimpVectorMedMajoranaDM,<sp/>DMsimpVectorMedDiracDM,<sp/>DMsimpVectorMedVectorDM)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>AllAnalysisNumbersUnmodified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DMEFT_results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(AnalysisDataPointers)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(DMEFT)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>DMEFT_profiled_LHC_nuisance_params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_DMEFT_profiled_LHC_nuisance_params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(AllAnalysisNumbersUnmodified,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(DMEFT_spectrum,<sp/>Spectrum)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(DMEFT)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/>///<sp/>Di-jet<sp/>likelihoods</highlight></codeline>
<codeline lineno="337"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>Dijet_LogLike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>DiJet_LogLike_DMsimp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedScalarDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedScalarDM)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedMajoranaDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedMajoranaDM)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedDiracDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedDiracDM)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a500a90d486ecabb9887b0fc4b35d3e1a" kindref="member">MODEL_CONDITIONAL_DEPENDENCY</ref>(DMsimpVectorMedVectorDM_spectrum,<sp/>Spectrum,<sp/>DMsimpVectorMedVectorDM)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(Y1_decay_rates,DecayTable::Entry)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(DMsimpVectorMedScalarDM,<sp/>DMsimpVectorMedMajoranaDM,<sp/>DMsimpVectorMedDiracDM,<sp/>DMsimpVectorMedVectorDM)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/>///<sp/>Extract<sp/>the<sp/>signal<sp/>predictions<sp/>and<sp/>uncertainties<sp/>for<sp/>all<sp/>analyses</highlight></codeline>
<codeline lineno="350"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_LHC_signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(AllAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/>///<sp/>Calculate<sp/>the<sp/>log<sp/>likelihood<sp/>for<sp/>each<sp/>SR<sp/>in<sp/>each<sp/>analysis<sp/>using<sp/>the<sp/>analysis<sp/>numbers</highlight></codeline>
<codeline lineno="359" refid="ColliderBit__MC__rollcall_8hpp_1a99414bf65bb722f6204c37c7a507b92f" refkind="member"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="362" refid="ColliderBit__MC__rollcall_8hpp_1aee0cf83ee6d754df700e396da8987f1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_LHC_LogLikes_full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(AllAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson,<sp/>lnlike_marg_poisson_lognormal_error,<sp/>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)<sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson,<sp/>lnlike_marg_poisson_gaussian_error,<sp/>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)<sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a80e9237858ed78192dc55b4bdff133b0" kindref="member">BACKEND_GROUP</ref>(lnlike_marg_poisson)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(FullLikes_Evaluate,<sp/>(ATLAS_FullLikes),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(std::map&lt;str,double&gt;&amp;,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(FullLikes_ReadIn,<sp/>(ATLAS_FullLikes),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;))</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a9d53302470f0656e79118389a48727ce" kindref="member">BACKEND_REQ</ref>(FullLikes_FileExists,<sp/>(ATLAS_FullLikes),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;))</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_LHC_LogLikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(AllAnalysisNumbers,<sp/>AnalysisDataPointers)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson,<sp/>lnlike_marg_poisson_lognormal_error,<sp/>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)<sp/>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>BACKEND_REQ_FROM_GROUP(lnlike_marg_poisson,<sp/>lnlike_marg_poisson_gaussian_error,<sp/>(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)<sp/>)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__common_8hpp_1a80e9237858ed78192dc55b4bdff133b0" kindref="member">BACKEND_GROUP</ref>(lnlike_marg_poisson)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/>///<sp/>Extract<sp/>the<sp/>log<sp/>likelihood<sp/>for<sp/>each<sp/>SR<sp/>to<sp/>a<sp/>simple<sp/>map_str_dbl</highlight></codeline>
<codeline lineno="385"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_per_SR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_per_SR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/>///<sp/>Extract<sp/>the<sp/>combined<sp/>log<sp/>likelihood<sp/>for<sp/>each<sp/>analysis<sp/>to<sp/>a<sp/>simple<sp/>map_str_dbl</highlight></codeline>
<codeline lineno="394"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_per_analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_per_analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/>///<sp/>Extract<sp/>the<sp/>labels<sp/>for<sp/>the<sp/>SRs<sp/>used<sp/>in<sp/>the<sp/>analysis<sp/>loglikes</highlight></codeline>
<codeline lineno="404"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_SR_labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_SR_labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1ae96b932df1a511063b912a23631f260b" kindref="member">map_str_str</ref>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>///<sp/>Extract<sp/>the<sp/>indices<sp/>for<sp/>the<sp/>SRs<sp/>used<sp/>in<sp/>the<sp/>analysis<sp/>loglikes<sp/>(alphabetical<sp/>SR<sp/>ordering)</highlight></codeline>
<codeline lineno="413"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_SR_indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>get_LHC_LogLike_SR_indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/>///<sp/>Calculate<sp/>the<sp/>total<sp/>LHC<sp/>log<sp/>likelihood</highlight></codeline>
<codeline lineno="422"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_Combined_LogLike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_combined_LHC_LogLike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(LHC_LogLikes,<sp/>map_str_AnalysisLogLikes)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>///<sp/>Calculate<sp/>the<sp/>total<sp/>LHC<sp/>log<sp/>likelihood</highlight></codeline>
<codeline lineno="432"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHC_LogLike_scan_guide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>calc_LHC_LogLike_scan_guide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(LHC_Combined_LogLike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>///<sp/>Output<sp/>some<sp/>info<sp/>about<sp/>the<sp/>event<sp/>loop</highlight></codeline>
<codeline lineno="442"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>LHCEventLoopInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getLHCEventLoopInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(<ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref>)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/>///<sp/>Dummy<sp/>observable<sp/>that<sp/>creates<sp/>a<sp/>dependency<sp/>on<sp/>TestModel1D,<sp/>which<sp/>is<sp/>used<sp/>to<sp/>satisfy<sp/>the<sp/>normal</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/>///<sp/>GAMBIT<sp/>model<sp/>requrements<sp/>in<sp/>a<sp/>minimal<sp/>way.<sp/>This<sp/>is<sp/>useful<sp/>in<sp/>the<sp/>case<sp/>where<sp/>we<sp/>just<sp/>want<sp/>to<sp/>test</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/>///<sp/>ColliderBit<sp/>on<sp/>a<sp/>single<sp/>point<sp/>with<sp/>Pythia&apos;s<sp/>SLHA<sp/>interface,<sp/>but<sp/>not<sp/>use<sp/>the<sp/>ColliderBit<sp/>standalone</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>///<sp/>interface.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>DummyColliderObservable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getDummyColliderObservable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="DarkBit__rollcall_8hpp_1a914ec6f557b5dc34284eb74649e7da07" kindref="member">ALLOW_MODELS</ref>(TestModel1D)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/>///<sp/>Detector<sp/>sim<sp/>capabilities.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="464"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASDetectorSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getBuckFastATLAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(BaseDetector*)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSDetectorSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getBuckFastCMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(BaseDetector*)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>IdentityDetectorSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getBuckFastIdentity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(BaseDetector*)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/>///<sp/>Run<sp/>detector<sp/>simulators<sp/>and<sp/>produce<sp/>the<sp/>standard<sp/>event<sp/>format.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="491"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>ATLASSmearedEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>smearEventATLAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(HardScatteringEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ATLASDetectorSim,<sp/>BaseDetector*)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CMSSmearedEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>smearEventCMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(HardScatteringEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(CMSDetectorSim,<sp/>BaseDetector*)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>CopiedEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>copyEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(HardScatteringEvent,<sp/>HEPUtils::Event)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(IdentityDetectorSim,<sp/>BaseDetector*)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="521"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/>///<sp/>Provide<sp/>functions<sp/>that<sp/>can<sp/>be<sp/>used<sp/>for<sp/>event<sp/>weighting,<sp/>e.g.<sp/>for<sp/>process-level<sp/>cross-section<sp/>scaling.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/>///<sp/>{@</highlight></codeline>
<codeline lineno="525"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>EventWeighterFunction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>This<sp/>function<sp/>is<sp/>intended<sp/>as<sp/>a<sp/>fallback<sp/>option<sp/></highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>that<sp/>simply<sp/>assigns<sp/>a<sp/>unit<sp/>weight<sp/>to<sp/>all<sp/>events</highlight></codeline>
<codeline lineno="530"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>setEventWeight_unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(EventWeighterFunctionType)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Weight<sp/>events<sp/>according<sp/>to<sp/>process<sp/>cross-section<sp/></highlight></codeline>
<codeline lineno="535"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>setEventWeight_fromCrossSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>START_FUNCTION(EventWeighterFunctionType)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(ProcessCrossSectionsMap,<sp/>map_int_process_xsec)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Event<sp/>weight<sp/>functions<sp/>that<sp/>depend<sp/>on<sp/>model-specific<sp/>Py8Collider<sp/>versions</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>should<sp/>be<sp/>declared<sp/>in<sp/>the<sp/>corresponding<sp/>model<sp/>header<sp/>in<sp/>ColliderBit/models.</highlight></codeline>
<codeline lineno="543"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="546"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>functions<sp/>are<sp/>declared<sp/>in<sp/>additional<sp/>headers<sp/>in<sp/>the<sp/>ColliderBit/models<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>capabilities<sp/>need<sp/>to<sp/>be<sp/>provided<sp/>for<sp/>each<sp/>new<sp/>model:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SLHAea<sp/>object<sp/>with<sp/>spectrum<sp/>and<sp/>decays<sp/>for<sp/>a<sp/>Pythia8<sp/>collider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>SpectrumAndDecaysForPythia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/>///<sp/>Collider<sp/>sim<sp/>capability.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>HardScatteringSim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/>///<sp/>Collider<sp/>sim<sp/>event<sp/>capability.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CAPABILITY<sp/>HardScatteringEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="module__macros__incore_8hpp_1a8171a83100431546898e4c5b8216b414" kindref="member">START_CAPABILITY</ref></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Only<sp/>activate<sp/>these<sp/>functions<sp/>if<sp/>HepMC<sp/>is<sp/>activated</highlight></codeline>
<codeline lineno="566"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>EXCLUDE_HEPMC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>A<sp/>nested<sp/>function<sp/>that<sp/>reads<sp/>in<sp/>Les<sp/>Houches<sp/>Event<sp/>files<sp/>and<sp/>converts<sp/>them<sp/>to<sp/>HEPUtils::Event<sp/>format</highlight></codeline>
<codeline lineno="569"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getLHEvent_HEPUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>A<sp/>nested<sp/>function<sp/>that<sp/>reads<sp/>in<sp/>HepMC<sp/>event<sp/>files</highlight></codeline>
<codeline lineno="575"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getHepMCEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(HepMC3::GenEvent)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>A<sp/>nested<sp/>function<sp/>that<sp/>reads<sp/>in<sp/>HepMC<sp/>event<sp/>files<sp/>and<sp/>converts<sp/>them<sp/>to<sp/>HEPUtils::Event<sp/>format</highlight></codeline>
<codeline lineno="581"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>getHepMCEvent_HEPUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>A<sp/>nested<sp/>function<sp/>that<sp/>reads<sp/>in<sp/>HepMC<sp/>event<sp/>files<sp/>and<sp/>converts<sp/>them<sp/>to<sp/>HEPUtils::Event<sp/>format</highlight></codeline>
<codeline lineno="587"><highlight class="comment"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>FUNCTION<sp/>convertHepMCEvent_HEPUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START_FUNCTION(HEPUtils::Event)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY</ref>(HardScatteringEvent,<sp/>HepMC3::GenEvent)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module__macros__incore_8hpp_1a61bd23bef8de86ec3973508d5498577d" kindref="member">NEEDS_MANAGER</ref>(RunMC,<sp/>MCLoopInfo)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CAPABILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MODULE</highlight></codeline>
    </programlisting>
    <location file="ColliderBit/include/gambit/ColliderBit/ColliderBit_MC_rollcall.hpp"/>
  </compounddef>
</doxygen>
