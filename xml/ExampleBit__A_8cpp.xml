<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="ExampleBit__A_8cpp" kind="file" language="C++">
    <compoundname>ExampleBit_A.cpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cmath</includes>
    <includes local="no">functional</includes>
    <includes local="no">omp.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="gambit__module__headers_8hpp" local="yes">gambit/Elements/gambit_module_headers.hpp</includes>
    <includes refid="ExampleBit__A__rollcall_8hpp" local="yes">gambit/ExampleBit_A/ExampleBit_A_rollcall.hpp</includes>
    <incdepgraph>
      <node id="112">
        <label>gambit/Backends/backend_info.hpp</label>
        <link refid="backend__info_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>gambit/Backends/backend_singleton.hpp</label>
        <link refid="backend__singleton_8hpp"/>
        <childnode refid="112" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>gambit/Backends/default_bossed_versions.hpp</label>
        <link refid="default__bossed__versions_8hpp"/>
      </node>
      <node id="109">
        <label>gambit/Backends/mathematica_variable.hpp</label>
        <link refid="mathematica__variable_8hpp"/>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>gambit/Backends/python_helpers.hpp</label>
        <link refid="python__helpers_8hpp"/>
      </node>
      <node id="114">
        <label>gambit/Backends/python_variable.hpp</label>
        <link refid="python__variable_8hpp"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>gambit/Elements/daFunk.hpp</label>
        <link refid="daFunk_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>gambit/Elements/decay_table.hpp</label>
        <link refid="decay__table_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>gambit/Elements/flav_prediction.hpp</label>
        <link refid="flav__prediction_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gambit/Elements/functors.hpp</label>
        <link refid="functors_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>gambit/Elements/gambit_module_headers.hpp</label>
        <link refid="gambit__module__headers_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>gambit/Elements/halo_types.hpp</label>
        <link refid="halo__types_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>gambit/Elements/higgs_couplings_table.hpp</label>
        <link refid="higgs__couplings__table_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>gambit/Elements/ini_catch.hpp</label>
        <link refid="ini__catch_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>gambit/Elements/module_macros_common.hpp</label>
        <link refid="module__macros__common_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>gambit/Elements/module_macros_inmodule.hpp</label>
        <link refid="module__macros__inmodule_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>gambit/Elements/module_macros_inmodule_defs.hpp</label>
        <link refid="module__macros__inmodule__defs_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>gambit/Elements/mssm_slhahelp.hpp</label>
        <link refid="mssm__slhahelp_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>gambit/Elements/safety_bucket.hpp</label>
        <link refid="safety__bucket_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>gambit/Elements/shared_types.hpp</label>
        <link refid="shared__types_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>gambit/Elements/slhaea_spec_helpers.hpp</label>
        <link refid="slhaea__spec__helpers_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>gambit/Elements/sminputs.hpp</label>
        <link refid="sminputs_8hpp"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>gambit/Elements/spectrum.hpp</label>
        <link refid="spectrum_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>gambit/Elements/spectrum_helpers.hpp</label>
        <link refid="spectrum__helpers_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>gambit/Elements/subspectrum.hpp</label>
        <link refid="subspectrum_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>gambit/Elements/wimp_types.hpp</label>
        <link refid="wimp__types_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>gambit/ExampleBit_A/ExampleBit_A_rollcall.hpp</label>
        <link refid="ExampleBit__A__rollcall_8hpp"/>
      </node>
      <node id="1">
        <label>ExampleBit_A.cpp</label>
        <link refid="ExampleBit__A_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>gambit/Logs/log_tags.hpp</label>
        <link refid="log__tags_8hpp"/>
      </node>
      <node id="68">
        <label>gambit/Logs/logger.hpp</label>
        <link refid="logger_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>gambit/Logs/logmaster.hpp</label>
        <link refid="logmaster_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>gambit/Models/SpectrumContents/subspectrum_contents.hpp</label>
        <link refid="subspectrum__contents_8hpp"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>gambit/Models/partmap.hpp</label>
        <link refid="partmap_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>gambit/Models/safe_param_map.hpp</label>
        <link refid="safe__param__map_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>gambit/Utils/boost_fallbacks.hpp</label>
        <link refid="boost__fallbacks_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gambit/Utils/cats.hpp</label>
        <link refid="Utils_2include_2gambit_2Utils_2cats_8hpp"/>
      </node>
      <node id="43">
        <label>gambit/Utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gambit/Utils/export_symbols.hpp</label>
        <link refid="export__symbols_8hpp"/>
      </node>
      <node id="33">
        <label>gambit/Utils/local_info.hpp</label>
        <link refid="local__info_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gambit/Utils/model_parameters.hpp</label>
        <link refid="model__parameters_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>gambit/Utils/numerical_constants.hpp</label>
        <link refid="numerical__constants_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>gambit/Utils/safebool.hpp</label>
        <link refid="safebool_8hpp"/>
      </node>
      <node id="83">
        <label>gambit/Utils/slhaea_helpers.hpp</label>
        <link refid="slhaea__helpers_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
        <link refid="standalone__error__handlers_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>gambit/Utils/stream_overloads.hpp</label>
        <link refid="stream__overloads_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>gambit/Utils/stringify.hpp</label>
        <link refid="stringify_8hpp"/>
      </node>
      <node id="117">
        <label>gambit/Utils/threadsafe_rng.hpp</label>
        <link refid="threadsafe__rng_8hpp"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gambit/Utils/util_functions.hpp</label>
        <link refid="util__functions_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>gambit/Utils/util_macros.hpp</label>
        <link refid="util__macros_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>gambit/Utils/util_types.hpp</label>
        <link refid="util__types_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>gambit/Utils/variadic_functions.hpp</label>
        <link refid="variadic__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gambit/Utils/yaml_node_utility.hpp</label>
        <link refid="yaml__node__utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gambit/Utils/yaml_options.hpp</label>
        <link refid="yaml__options_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gambit/Utils/yaml_variadic_functions.hpp</label>
        <link refid="yaml__variadic__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>SLHAea/slhaea.h</label>
      </node>
      <node id="18">
        <label>algorithm</label>
      </node>
      <node id="56">
        <label>array</label>
      </node>
      <node id="101">
        <label>assert.h</label>
      </node>
      <node id="60">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="113">
        <label>boost/algorithm/string/replace.hpp</label>
      </node>
      <node id="59">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="34">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="29">
        <label>boost/detail/workaround.hpp</label>
      </node>
      <node id="103">
        <label>boost/enable_shared_from_this.hpp</label>
      </node>
      <node id="40">
        <label>boost/preprocessor/arithmetic/sub.hpp</label>
      </node>
      <node id="30">
        <label>boost/preprocessor/cat.hpp</label>
      </node>
      <node id="39">
        <label>boost/preprocessor/comparison/equal.hpp</label>
      </node>
      <node id="73">
        <label>boost/preprocessor/comparison/greater.hpp</label>
      </node>
      <node id="28">
        <label>boost/preprocessor/config/config.hpp</label>
      </node>
      <node id="38">
        <label>boost/preprocessor/control/if.hpp</label>
      </node>
      <node id="74">
        <label>boost/preprocessor/control/iif.hpp</label>
      </node>
      <node id="41">
        <label>boost/preprocessor/punctuation/comma.hpp</label>
      </node>
      <node id="42">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="75">
        <label>boost/preprocessor/repetition/enum.hpp</label>
      </node>
      <node id="76">
        <label>boost/preprocessor/seq/for_each_i.hpp</label>
      </node>
      <node id="36">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="37">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="77">
        <label>boost/preprocessor/tuple/to_seq.hpp</label>
      </node>
      <node id="85">
        <label>boost/serialization/strong_typedef.hpp</label>
      </node>
      <node id="102">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="27">
        <label>boost/version.hpp</label>
      </node>
      <node id="50">
        <label>cassert</label>
      </node>
      <node id="88">
        <label>cfloat</label>
      </node>
      <node id="16">
        <label>chrono</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>complex</label>
      </node>
      <node id="20">
        <label>cstring</label>
      </node>
      <node id="55">
        <label>deque</label>
      </node>
      <node id="44">
        <label>exception</label>
      </node>
      <node id="54">
        <label>forward_list</label>
      </node>
      <node id="48">
        <label>fstream</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="116">
        <label>gambit/Backends/backend_types_rollcall.hpp</label>
      </node>
      <node id="58">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="105">
        <label>gsl/gsl_errno.h</label>
      </node>
      <node id="104">
        <label>gsl/gsl_integration.h</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="66">
        <label>limits</label>
      </node>
      <node id="53">
        <label>list</label>
      </node>
      <node id="13">
        <label>map</label>
      </node>
      <node id="22">
        <label>memory</label>
      </node>
      <node id="61">
        <label>mkpath/mkpath.h</label>
      </node>
      <node id="6">
        <label>omp.h</label>
      </node>
      <node id="70">
        <label>ostream</label>
      </node>
      <node id="118">
        <label>random</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="17">
        <label>sstream</label>
      </node>
      <node id="79">
        <label>stdexcept</label>
      </node>
      <node id="96">
        <label>stdio.h</label>
      </node>
      <node id="97">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="7">
        <label>time.h</label>
      </node>
      <node id="49">
        <label>type_traits</label>
      </node>
      <node id="25">
        <label>unistd.h</label>
      </node>
      <node id="51">
        <label>unordered_map</label>
      </node>
      <node id="52">
        <label>unordered_set</label>
      </node>
      <node id="45">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="64">
        <label>yaml-cpp/yaml.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ExampleBit__A">Gambit::ExampleBit_A</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions of module ExampleBit_A.</para>
<para>Put your functions in files like this if you wish to add observables or likelihoods to this module.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Pat Scott </para>
</simplesect>
<simplesect kind="date"><para>2012 Nov </para>
</simplesect>
<simplesect kind="date"><para>2013 Jan, Feb, May, Dec</para>
</simplesect>
<simplesect kind="author"><para>Christoph Weniger </para>
</simplesect>
<simplesect kind="date"><para>2013 Jan</para>
</simplesect>
<simplesect kind="author"><para>Anders Kvellestad (<ulink url="mailto:anders.kvellestad@fys.uio.no">anders.kvellestad@fys.uio.no</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 Nov</para>
</simplesect>
<simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:ben.farmer@gmail.com">ben.farmer@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Sep</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>Functions<sp/>of<sp/>module<sp/>ExampleBit_A.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///<sp/><sp/>Put<sp/>your<sp/>functions<sp/>in<sp/>files<sp/>like<sp/>this</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///<sp/><sp/>if<sp/>you<sp/>wish<sp/>to<sp/>add<sp/>observables<sp/>or<sp/>likelihoods</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///<sp/><sp/>to<sp/>this<sp/>module.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/>Authors<sp/>(add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify):</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/><sp/>\author<sp/>Pat<sp/>Scott</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/><sp/><sp/><sp/>\date<sp/>2012<sp/>Nov</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/><sp/><sp/><sp/>\date<sp/>2013<sp/>Jan,<sp/>Feb,<sp/>May,<sp/>Dec</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///<sp/><sp/>\author<sp/>Christoph<sp/>Weniger</highlight></codeline>
<codeline lineno="20"><highlight class="comment">///<sp/><sp/><sp/><sp/>\date<sp/>2013<sp/>Jan</highlight></codeline>
<codeline lineno="21"><highlight class="comment">///</highlight></codeline>
<codeline lineno="22"><highlight class="comment">///<sp/><sp/>\author<sp/>Anders<sp/>Kvellestad</highlight></codeline>
<codeline lineno="23"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(anders.kvellestad@fys.uio.no)</highlight></codeline>
<codeline lineno="24"><highlight class="comment">///<sp/><sp/>\date<sp/>2013<sp/>Nov</highlight></codeline>
<codeline lineno="25"><highlight class="comment">///</highlight></codeline>
<codeline lineno="26"><highlight class="comment">///<sp/><sp/>\author<sp/>Ben<sp/>Farmer</highlight></codeline>
<codeline lineno="27"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ben.farmer@gmail.com)</highlight></codeline>
<codeline lineno="28"><highlight class="comment">///<sp/><sp/>\date<sp/>2015<sp/>Sep</highlight></codeline>
<codeline lineno="29"><highlight class="comment">///</highlight></codeline>
<codeline lineno="30"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>For<sp/>nanosleep<sp/>(posix<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gambit__module__headers_8hpp" kindref="compound">gambit/Elements/gambit_module_headers.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ExampleBit__A__rollcall_8hpp" kindref="compound">gambit/ExampleBit_A/ExampleBit_A_rollcall.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ExampleBit_A</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">LogTags;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>\name<sp/>Helper<sp/>functions</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Not<sp/>wrapped<sp/>in<sp/>rollcall<sp/>header.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Pointer<sp/>to<sp/>some<sp/>function</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>double(*callback_pointer)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Some<sp/>other<sp/>example<sp/>function</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1adb88fc34afb821bf767ba9879c3e6e6f" kindref="member">some_other_function</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;input)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>This<sp/>is<sp/>some_other_function,<sp/>invoked<sp/>with<sp/>argument<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>().<ref refid="classGambit_1_1Logging_1_1LogMaster_1af1bcea2c360901c4afba182460541a26" kindref="member">send</ref>(ss.str(),info);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a2b773f6c2e99c5d6039bb5ea132fe7f4" kindref="member">callback_pointer</ref>(input,<sp/>offset);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Un-normalised<sp/>gaussian<sp/>log-likelihood</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1ae81cc51588987f33129d5bf4db4e3e12" kindref="member">logf</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-0.5*log(sig*sig)<sp/>-0.5*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(x-mu,2)/(sig*sig);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>\name<sp/>Module<sp/>functions</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nevents_pred<sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)<sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>3.5;<sp/>result<sp/>=<sp/>count++;<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>xsection<sp/>dep:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*Pipes::nevents_pred::Dep::xsection<sp/>&lt;&lt;<sp/>endl;}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nevents_like<sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)<sp/><sp/><sp/><sp/>{<sp/>result<sp/>=<sp/>2.0<sp/>*<sp/>(*Pipes::nevents_like::Dep::eventAccumulation);<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>particle_identity<sp/>(<ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref><sp/><sp/><sp/><sp/>&amp;result)<sp/><sp/><sp/><sp/>{<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;fakion&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nevents_pred_rounded(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(int)<sp/>(*Pipes::nevents_pred_rounded::Dep::nevents);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Randomly<sp/>raise<sp/>some<sp/>ficticious<sp/>alarms<sp/>about<sp/>this<sp/>point,<sp/>with<sp/>probability<sp/>x,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>x<sp/>is<sp/>given<sp/>by<sp/>the<sp/>input<sp/>yaml<sp/>option<sp/>or<sp/>a<sp/>default<sp/>of<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1.0-Pipes::nevents_pred_rounded::runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0.5,<sp/></highlight><highlight class="stringliteral">&quot;probability_of_validity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classGambit_1_1Random_1a2e1bf1e5c2dc85b07a80e06968080817" kindref="member">Random::draw</ref>()<sp/>&lt;<sp/>x)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Example<sp/>of<sp/>how<sp/>to<sp/>raise<sp/>an<sp/>error<sp/>from<sp/>a<sp/>module<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ExampleBit_A_error().raise(LOCAL_INFO,&quot;Damn,<sp/>this<sp/>integer<sp/>event<sp/>count<sp/>is<sp/>bad.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Example<sp/>of<sp/>how<sp/>to<sp/>declare<sp/>a<sp/>point<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1a4a90fbd9fb34f189fff41ab409eb3c07" kindref="member">invalid_point</ref>().<ref refid="classGambit_1_1invalid__point__exception_1ac2a68704b58ec72f7fb16fcbddd361fc" kindref="member">raise</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>don&apos;t<sp/>like<sp/>this<sp/>point.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example<sp/>of<sp/>how<sp/>to<sp/>check<sp/>if<sp/>computation<sp/>of<sp/>another<sp/>capability<sp/>depends<sp/>on<sp/>this<sp/>one<sp/>at<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>name<sp/>is<sp/>nevents_pred_rounded,<sp/>and<sp/>I<sp/>am<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Pipes::nevents_pred_rounded::Downstream::neededFor(</highlight><highlight class="stringliteral">&quot;nevents&quot;</highlight><highlight class="normal">)<sp/>?</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;proud<sp/>to<sp/>contribute<sp/>to<sp/>the<sp/>calculation<sp/>of<sp/>nevents<sp/>today.&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;completely<sp/>superfluous<sp/>to<sp/>the<sp/>calculation<sp/>of<sp/>nevents.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_sigma(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1.;<sp/></highlight><highlight class="comment">//trivial<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>function_pointer_retriever(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(*&amp;result)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::function_pointer_retriever;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Two<sp/>ways<sp/>to<sp/>return<sp/>this<sp/>result,<sp/>depending<sp/>on<sp/>how<sp/>the<sp/>group<sp/>dependency<sp/>BEgroup::external_funcs<sp/>is<sp/>fulfilled:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*BEgroup::external_funcs<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;externalFunction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//1.<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>fortran<sp/>function<sp/>that<sp/>has<sp/>been<sp/>backended<sp/>(and<sp/>takes<sp/>an<sp/>int<sp/>as<sp/>an<sp/>input<sp/>by<sp/>reference):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::externalFunction.pointer();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*BEgroup::external_funcs<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;externalComplicatedFunction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//2.<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>local<sp/>C++<sp/>function<sp/>(that,<sp/>e.g.<sp/>calls<sp/>a<sp/>function<sp/>provided<sp/>by<sp/>a<sp/>backend)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ExampleBit__A_8cpp_1a2b773f6c2e99c5d6039bb5ea132fe7f4" kindref="member">callback_pointer</ref><sp/>=<sp/>BEreq::externalComplicatedFunction.pointer();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>&amp;<ref refid="ExampleBit__A_8cpp_1adb88fc34afb821bf767ba9879c3e6e6f" kindref="member">some_other_function</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>ExampleBit_A_error().raise(LOCAL_INFO,</highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>choice<sp/>from<sp/>external_funcs<sp/>BEgroup.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Example<sp/>of<sp/>interacting<sp/>with<sp/>models</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a9c1337add7a082fdd61bccb58514b3b7" kindref="member">example_damu</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::example_damu;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>ExampleBit_A,<sp/>function<sp/>damu&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Is<sp/>CMSSM<sp/>being<sp/>scanned?<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;CMSSM&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Is<sp/>NUHM1<sp/>being<sp/>scanned?<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;NUHM1&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Is<sp/>NormalDist<sp/>being<sp/>scanned?<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;NormalDist&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl;;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Is<sp/>ScalarSingletDM_Z2<sp/>being<sp/>scanned?<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;ScalarSingletDM_Z2&quot;</highlight><highlight class="normal">);;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/>info<sp/>&lt;&lt;<sp/><ref refid="namespaceGambit_1aed4726aee167bc7cf497e993d6318514" kindref="member">EOM</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Printing<sp/>parameter<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mu:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;sigma:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*Param[</highlight><highlight class="stringliteral">&quot;sigma&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//A<sp/>safety_bucket<sp/>containing<sp/>the<sp/>ModelParameters<sp/>object<sp/>itself<sp/>is<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//available<sp/>as<sp/>a<sp/>dependency<sp/>at<sp/>Pipes::&lt;functionname&gt;::Dep::&lt;modelname&gt;_parameters,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//in<sp/>case<sp/>you<sp/>want<sp/>to<sp/>do<sp/>something<sp/>more<sp/>advanced<sp/>than<sp/>just<sp/>read<sp/>off<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//parameter<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;p1&quot;</highlight><highlight class="normal">]<sp/>*<sp/>*Param[</highlight><highlight class="stringliteral">&quot;p2&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Likelihood<sp/>function<sp/>for<sp/>fitting<sp/>the<sp/>population<sp/>parameters<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>normal<sp/>distribution<sp/>(with<sp/>hard-coded<sp/>&quot;observations&quot;)</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Mainly<sp/>used<sp/>for<sp/>testing<sp/>scanning<sp/>algorthims</highlight></codeline>
<codeline lineno="152"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1ab52eaa3790901319258e0d13570fd038" kindref="member">lnL_gaussian</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::lnL_gaussian;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Say<sp/>we<sp/>have<sp/>a<sp/>sample<sp/>of<sp/>20<sp/>drawn<sp/>from<sp/>a<sp/>normal<sp/>distribution<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameters<sp/>muTrue<sp/>and<sp/>sigmaTrue.<sp/>Let<sp/>the<sp/>sample<sp/>mean<sp/>and<sp/>standard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deviation<sp/>be<sp/>as<sp/>follows<sp/>(this<sp/>is<sp/>our<sp/>data):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samples<sp/>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21.32034213,<sp/><sp/>20.39713359,<sp/><sp/>19.27957134,<sp/><sp/>19.81839231,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20.89474358,<sp/><sp/>20.11058756,<sp/><sp/>22.38214557,<sp/><sp/>21.41479798,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23.49896999,<sp/><sp/>17.55991187,<sp/><sp/>24.9921142<sp/>,<sp/><sp/>23.90166585,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20.97913273,<sp/><sp/>18.59180551,<sp/><sp/>23.49038072,<sp/><sp/>19.08201714,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21.19538797,<sp/><sp/>16.42544039,<sp/><sp/>18.93568891,<sp/><sp/>22.40925288</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>loglTotal<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>loglikelihood<sp/>value<sp/>for<sp/>the<sp/>hypothesised<sp/>parameters<sp/>is<sp/>then:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;NormalDist&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;sigma&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Utils::isnan(mu)<sp/>or<sp/>Utils::isnan(sigma))</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExampleBit_A_error().raise(LOCAL_INFO,</highlight><highlight class="stringliteral">&quot;NaN<sp/>detected<sp/>in<sp/>input<sp/>parameters<sp/>for<sp/>model&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>NormalDist!<sp/>This<sp/>may<sp/>indicate<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>scanner<sp/>plugin<sp/>you<sp/>are<sp/>using.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sigma==0.)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>likelihood<sp/>is<sp/>nan<sp/>if<sp/>sigma=0,<sp/>so<sp/>the<sp/>point<sp/>is<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1a4a90fbd9fb34f189fff41ab409eb3c07" kindref="member">invalid_point</ref>().<ref refid="classGambit_1_1invalid__point__exception_1ac2a68704b58ec72f7fb16fcbddd361fc" kindref="member">raise</ref>(</highlight><highlight class="stringliteral">&quot;NormalDist::sigma<sp/>=<sp/>0;<sp/>likelihood<sp/>is<sp/>NaN,<sp/>point<sp/>invalid.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loglTotal<sp/>+=<sp/><ref refid="ExampleBit__A_8cpp_1ae81cc51588987f33129d5bf4db4e3e12" kindref="member">logf</ref>(samples[i],<sp/>mu,<sp/>sigma);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExampleBit_A_error().raise(LOCAL_INFO,</highlight><highlight class="stringliteral">&quot;Whoops,<sp/>you<sp/>are<sp/>not<sp/>scanning<sp/>the<sp/>model<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>NormalDist!<sp/>There<sp/>is<sp/>probably<sp/>a<sp/>bug<sp/>ExampleBit_A_rollcall.hpp;<sp/>this<sp/>module<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>function<sp/>should<sp/>have<sp/>ALLOW_MODELS(NormalDist)<sp/>defined.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Randomly<sp/>raise<sp/>some<sp/>ficticious<sp/>alarms<sp/>about<sp/>this<sp/>point,<sp/>with<sp/>probability<sp/>x,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>x<sp/>is<sp/>given<sp/>by<sp/>the<sp/>input<sp/>yaml<sp/>option<sp/>or<sp/>a<sp/>default<sp/>of<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1.0-runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(1.,<sp/></highlight><highlight class="stringliteral">&quot;probability_of_validity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classGambit_1_1Random_1a2e1bf1e5c2dc85b07a80e06968080817" kindref="member">Random::draw</ref>()<sp/>&lt;<sp/>x)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1a4a90fbd9fb34f189fff41ab409eb3c07" kindref="member">invalid_point</ref>().<ref refid="classGambit_1_1invalid__point__exception_1ac2a68704b58ec72f7fb16fcbddd361fc" kindref="member">raise</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>don&apos;t<sp/>like<sp/>this<sp/>point.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Artificially<sp/>slow<sp/>down<sp/>likelihood<sp/>evaluations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Important<sp/>for<sp/>debugging<sp/>new<sp/>scanner<sp/>plugins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eval_time<sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(-1,<sp/></highlight><highlight class="stringliteral">&quot;eval_time&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Measured<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;eval_time:&quot;<sp/>&lt;&lt;<sp/>eval_time<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eval_time&gt;0)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>sleeptime;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleeptime.tv_sec<sp/>=<sp/>floor(eval_time);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleeptime.tv_nsec<sp/>=<sp/>floor((eval_time-floor(eval_time))*1e9);<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>user<sp/>to<sp/>choose<sp/>fractions<sp/>of<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Sleeping<sp/>for<sp/>&quot;&lt;&lt;sleeptime.tv_sec&lt;&lt;&quot;<sp/>seconds<sp/>and<sp/>&quot;&lt;&lt;sleeptime.tv_nsec&lt;&lt;&quot;<sp/>nanoseconds&quot;<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nanosleep(&amp;sleeptime,NULL);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example<sp/>use<sp/>of<sp/>suspicious<sp/>point<sp/>exception<sp/>with<sp/>a<sp/>1%<sp/>chance,<sp/>specifying<sp/>message,<sp/>integer<sp/>code<sp/>and<sp/>whether<sp/>to<sp/>print<sp/>to<sp/>cout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classGambit_1_1Random_1a2e1bf1e5c2dc85b07a80e06968080817" kindref="member">Random::draw</ref>()<sp/>&lt;<sp/>0.01)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Suspicious_point_exception().raise(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>demo<sp/>for<sp/>using<sp/>suspicious<sp/>points.&quot;</highlight><highlight class="normal">,66,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>loglTotal;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>\name<sp/>Loopmanager<sp/>Examples</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Some<sp/>example<sp/>functions<sp/>for<sp/>using<sp/>loops<sp/>within<sp/>the<sp/>dependency<sp/>structure</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Run<sp/>a<sp/>fake<sp/>&apos;event<sp/>loop&apos;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1add03280c08620c3d9c19db942e325bce" kindref="member">eventLoopManager</ref>()</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::eventLoopManager;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEvents<sp/>=<sp/>200;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>times<sp/>to<sp/>run<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//There<sp/>are<sp/>three<sp/>things<sp/>available<sp/>from<sp/>the<sp/>Loops<sp/>namespace<sp/>in<sp/>loop<sp/>managers<sp/>like<sp/>this<sp/>one:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Loop::executeIteration(int<sp/>iteration_number)<sp/>--<sp/>executes<sp/>a<sp/>single<sp/>iteration<sp/>of<sp/>the<sp/>ordered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>of<sp/>nested<sp/>functions,<sp/>passing<sp/>them<sp/>the<sp/>iteration_number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Loop::done<sp/>--<sp/>boolean<sp/>flag<sp/>indicating<sp/>if<sp/>the<sp/>loop<sp/>should<sp/>terminate<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Loop::reset()<sp/>--<sp/>reset<sp/>the<sp/>&apos;done&apos;<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//A<sp/>simple<sp/>loop<sp/>example<sp/>without<sp/>OpenMP.<sp/><sp/>Commented<sp/>out<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>nEvents<sp/>=<sp/>20;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Number<sp/>of<sp/>times<sp/>to<sp/>run<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(unsigned<sp/>long<sp/>it<sp/>=<sp/>0;<sp/>it<sp/>&lt;<sp/>nEvents;<sp/>it++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;This<sp/>is<sp/>iteration<sp/>&quot;<sp/>&lt;&lt;<sp/>it+1<sp/>&lt;&lt;<sp/>&quot;<sp/>of<sp/>&quot;<sp/>&lt;&lt;<sp/>nEvents<sp/>&lt;&lt;<sp/>&quot;<sp/>being<sp/>run<sp/>by<sp/>eventLoopManager.&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Loop::executeIteration(it);<sp/><sp/><sp/><sp/>//<sp/>This<sp/>is<sp/>a<sp/>(member)<sp/>function<sp/>pointer,<sp/>so<sp/>*Loop::executeIteration(it)<sp/>works<sp/>fine<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>eventLoopManager&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceGambit_1aed4726aee167bc7cf497e993d6318514" kindref="member">EOM</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//A<sp/>simple<sp/>loop<sp/>example<sp/>using<sp/>OpenMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Loop::executeIteration(it);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>the<sp/>zero<sp/>iteration<sp/>separately<sp/>to<sp/>allow<sp/>nested<sp/>functions<sp/>to<sp/>self-init.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>*Loop::done<sp/>and<sp/>it&lt;nEvents<sp/>and<sp/>not<sp/><ref refid="namespaceGambit_1ad005964f6d504aba978cc901210b2e09" kindref="member">piped_errors</ref>.<ref refid="classGambit_1_1Piped__exceptions_1ab700a6df1d12715af6e53bd406459916" kindref="member">inquire</ref>())</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Loop::executeIteration(it++);<sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Raise<sp/>any<sp/>piped<sp/>exceptions<sp/>that<sp/>occurred<sp/>in<sp/>the<sp/>loop<sp/>functors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1a2bdd46e135fa3189ef01b1089ea9a788" kindref="member">piped_warnings</ref>.<ref refid="classGambit_1_1Piped__exceptions_1acdf840c4ecb3f9492954365cea384db0" kindref="member">check</ref>(ExampleBit_A_warning());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1ad005964f6d504aba978cc901210b2e09" kindref="member">piped_errors</ref>.<ref refid="classGambit_1_1Piped__exceptions_1acdf840c4ecb3f9492954365cea384db0" kindref="member">check</ref>(ExampleBit_A_error());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>over<sp/>again,<sp/>just<sp/>to<sp/>demonstrate<sp/>the<sp/>reset<sp/>function.<sp/><sp/>This<sp/>just<sp/>sets<sp/>the<sp/>Loop::done<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>false<sp/>again.<sp/><sp/>Note<sp/>that<sp/>when<sp/>you<sp/>do<sp/>this,<sp/>you<sp/>need<sp/>to<sp/>beware<sp/>to<sp/>re-initialise<sp/>the<sp/>nested<sp/>functions<sp/>themselves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>re-running<sp/>iteration<sp/>zero<sp/>again,<sp/>unless<sp/>you<sp/>want<sp/>them<sp/>to<sp/>just<sp/>set<sp/>Loop::done<sp/>true<sp/>again<sp/>straight<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Resetting<sp/>loop!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Loop::reset();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Loop::executeIteration(it);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>the<sp/>zero<sp/>iteration<sp/>separately<sp/>to<sp/>allow<sp/>nested<sp/>functions<sp/>to<sp/>self-init.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>*Loop::done<sp/>and<sp/>it&lt;nEvents<sp/>and<sp/>not<sp/><ref refid="namespaceGambit_1ad005964f6d504aba978cc901210b2e09" kindref="member">piped_errors</ref>.<ref refid="classGambit_1_1Piped__exceptions_1ab700a6df1d12715af6e53bd406459916" kindref="member">inquire</ref>())</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Loop::executeIteration(it++);<sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>the<sp/>final<sp/>iteration<sp/>separately<sp/>to<sp/>make<sp/>the<sp/>final<sp/>result<sp/>&apos;serially<sp/>accessible&apos;<sp/>to<sp/>functions<sp/>that<sp/>run<sp/>after<sp/>this<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Loop::executeIteration(it++);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Produces<sp/>a<sp/>random<sp/>floating-point<sp/>&apos;event<sp/>count&apos;<sp/>between<sp/>0<sp/>and<sp/>5.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a9e33beb6fb3581a88e5135835fb4367f" kindref="member">exampleEventGen</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::exampleEventGen;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="classGambit_1_1Random_1a2e1bf1e5c2dc85b07a80e06968080817" kindref="member">Random::draw</ref>()*5.0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>and<sp/>return<sp/>the<sp/>random<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>some<sp/>diagnostic<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#pragma<sp/>omp<sp/>critical<sp/>(print)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout&lt;&lt;&quot;<sp/><sp/>Running<sp/>exampleEventGen<sp/>in<sp/>iteration<sp/>&quot;&lt;&lt;*Loop::iteration&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>MPI<sp/>shutdown<sp/>on<sp/>random<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(result&lt;0.0001*5.0)<sp/>//<sp/>shut<sp/>down<sp/>with<sp/>0.01%<sp/>probability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Don&apos;t<sp/>raise<sp/>errors<sp/>like<sp/>this<sp/>when<sp/>inside<sp/>a<sp/>looped<sp/>region:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/><sp/><sp/>ExampleBit_A_error().raise(LOCAL_INFO,&quot;Error<sp/>triggered<sp/>for<sp/>testing<sp/>purposes.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Must<sp/>raise<sp/>them<sp/>like<sp/>this<sp/>instead:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>piped_errors.request(LOCAL_INFO,<sp/>&quot;Error<sp/>triggered<sp/>for<sp/>testing<sp/>purposes.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>loggers<sp/>during<sp/>parallel<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;omp_get_thread_num()&lt;&lt;</highlight><highlight class="stringliteral">&quot;:<sp/>Running<sp/>exampleEventGen<sp/>in<sp/>iteration<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*Loop::iteration&lt;&lt;<ref refid="namespaceGambit_1aed4726aee167bc7cf497e993d6318514" kindref="member">EOM</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(result<sp/>&gt;<sp/>2.0)<sp/>invalid_point().raise(&quot;This<sp/>point<sp/>is<sp/>annoying.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Rounds<sp/>an<sp/>event<sp/>count<sp/>to<sp/>the<sp/>nearest<sp/>integer</highlight></codeline>
<codeline lineno="314"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1aa004310dbe78fd3f8b39efb89430272d" kindref="member">exampleCut</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::exampleCut;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(int)<sp/>*Dep::event;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Running<sp/>exampleCut<sp/>in<sp/>iteration<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*Loop::iteration&lt;&lt;endl;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;exampleCut<sp/>has<sp/>the<sp/>following<sp/>dependees:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>*Downstream::dependees)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/>endl;<sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>the<sp/>following<sp/>subcaps:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Downstream::subcaps-&gt;getNames()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref><sp/>s1<sp/>=<sp/>(Downstream::neededFor(</highlight><highlight class="stringliteral">&quot;eventAccumulation&quot;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref><sp/>s2<sp/>=<sp/>(Downstream::neededFor(</highlight><highlight class="stringliteral">&quot;xsection&quot;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;It<sp/>is&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;needed<sp/>for<sp/>eventAccumulation.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;It<sp/>is&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;needed<sp/>for<sp/>xsection.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Adds<sp/>an<sp/>integral<sp/>event<sp/>count<sp/>to<sp/>a<sp/>total<sp/>number<sp/>of<sp/>accumulated<sp/>events.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a0be3dd3f09eacfba0806572d5873ae4a" kindref="member">eventAccumulator</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//There<sp/>are<sp/>basically<sp/>just<sp/>two<sp/>things<sp/>available<sp/>in<sp/>nested<sp/>functions<sp/>from<sp/>the<sp/>Loops<sp/>namespace:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>int*<sp/>Loop::iteration<sp/>--<sp/>the<sp/>iteration<sp/>number<sp/>passed<sp/>down<sp/>directly<sp/>by<sp/>the<sp/>function<sp/>managing<sp/>the<sp/>loop<sp/>that<sp/>this<sp/>one<sp/>runs<sp/>within.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>void<sp/>Loop::wrapup()<sp/><sp/>--<sp/>a<sp/>function<sp/>to<sp/>call<sp/>if<sp/>you<sp/>want<sp/>to<sp/>cause<sp/>the<sp/>loop<sp/>to<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//You<sp/>can<sp/>always<sp/>get<sp/>at<sp/>OpenMP<sp/>functions<sp/>too<sp/>(omp_get_thread_num,<sp/>omp_get_ancestor_thread_num,<sp/>etc)<sp/>--<sp/>but<sp/>it<sp/>is<sp/>better<sp/>not<sp/>to<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//too<sp/>much<sp/>about<sp/>the<sp/>other<sp/>functions<sp/>that<sp/>might<sp/>be<sp/>managing<sp/>this<sp/>one,<sp/>either<sp/>directly<sp/>or<sp/>indirectly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::eventAccumulator;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>actual<sp/>computations<sp/>in<sp/>each<sp/>thread<sp/>seperately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>*Dep::event<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>let<sp/>one<sp/>thread<sp/>at<sp/>a<sp/>time<sp/>mess<sp/>with<sp/>the<sp/>accumulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>critical<sp/>(eventAccumulator_update)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>accumulatedCounts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>first<sp/>iteration<sp/>of<sp/>a<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*Loop::iteration<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>the<sp/>total<sp/>accumulated<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulatedCounts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>latest<sp/>event<sp/>count<sp/>to<sp/>the<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulatedCounts<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>current<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>accumulatedCounts;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>some<sp/>diagnostic<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#pragma<sp/>omp<sp/>critical<sp/>(print)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout&lt;&lt;&quot;<sp/><sp/>Running<sp/>eventAccumulator<sp/>in<sp/>iteration<sp/>&quot;&lt;&lt;*Loop::iteration&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout&lt;&lt;&quot;<sp/><sp/>Retrieved<sp/>event<sp/>count:<sp/>&quot;&lt;&lt;*Dep::event&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout&lt;&lt;&quot;<sp/><sp/>I<sp/>have<sp/>thread<sp/>index:<sp/>&quot;&lt;&lt;omp_get_thread_num()&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout&lt;&lt;&quot;<sp/><sp/>Current<sp/>total<sp/>counts<sp/>is:<sp/>&quot;&lt;&lt;result&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>reached<sp/>50<sp/>counts,<sp/>quit<sp/>the<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;=<sp/>50)<sp/>{<sp/>Loop::wrapup();<sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_Farray_stuff<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::do_Farray_stuff;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::cout;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::endl;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>libFarrayTest_CB_type<sp/><sp/>*commonBlock<sp/><sp/>=<sp/>BEreq::libFarrayTestCommonBlock.pointer();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>libFarrayTest_CB2_type<sp/>*commonBlock2<sp/>=<sp/>BEreq::libFarrayTestCommonBlock2.pointer();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>libFarrayTest_CB3_type<sp/>*commonBlock3<sp/>=<sp/>BEreq::libFarrayTestCommonBlock3.pointer();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;do_Farray_stuff<sp/>has<sp/>been<sp/>summoned!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Ph&apos;nglui<sp/>mglw&apos;nafh<sp/>Cthulhu<sp/>R&apos;lyeh<sp/>wgah&apos;nagl<sp/>fhtagn&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>fillArrays<sp/>to<sp/>reset<sp/>array<sp/>contents&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::libFarrayTest_fillArrays();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>printStuff...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::libFarrayTest_printStuff();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>d(2,0,-1)<sp/>=<sp/>99<sp/>and<sp/>d(1,1,0)<sp/>=<sp/>77<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commonBlock-&gt;d(2,0,-1)<sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commonBlock-&gt;d(1,1,0)<sp/>=<sp/>77;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>printStuff<sp/>again...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::libFarrayTest_printStuff();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>pointers<sp/>here<sp/>is<sp/>not<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Retrieving<sp/>pointer<sp/>to<sp/>doubleFuncArray...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Fdouble(*function_pointer)(Farray&lt;<sp/>Fdouble,1,3&gt;&amp;)<sp/>=<sp/>BEreq::libFarrayTest_doubleFuncArray.pointer();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>doubleFuncArray<sp/>with<sp/>commonblock<sp/>element<sp/>b<sp/>as<sp/>argument...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Passing<sp/>farray<sp/>to<sp/>Fortran<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>function_pointer(commonBlock-&gt;b);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Returned<sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmp<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example<sp/>on<sp/>how<sp/>to<sp/>pass<sp/>an<sp/>farray<sp/>to<sp/>a<sp/>Fortran<sp/>function<sp/>that<sp/>is<sp/>declared<sp/>to<sp/>take<sp/>Fdouble*<sp/>instead<sp/>of<sp/>Farray&lt;<sp/>Fdouble,1,3&gt;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>only<sp/>be<sp/>necessary<sp/>in<sp/>very<sp/>special<sp/>cases,<sp/>where<sp/>you<sp/>need<sp/>to<sp/>pass<sp/>arrays<sp/>with<sp/>different<sp/>index<sp/>ranges<sp/>than<sp/>those<sp/>specified<sp/>in<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>doubleFuncArray2<sp/>with<sp/>commonblock<sp/>element<sp/>b<sp/>as<sp/>argument...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>BEreq::libFarrayTest_doubleFuncArray2(&amp;(commonBlock-&gt;b.array[0]));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Returned<sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmp<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>fptrRoutine<sp/>with<sp/>commonblock<sp/>elements<sp/>b<sp/>and<sp/>c<sp/>and<sp/>function<sp/>doubleFuncArray<sp/>as<sp/>arguments...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::libFarrayTest_fptrRoutine(commonBlock-&gt;b,commonBlock-&gt;c,<ref refid="namespaceGambit_1a54ab4050202c92d10ba74af78318281e" kindref="member">byVal</ref>(function_pointer));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>byVal<sp/>is<sp/>necessary<sp/>to<sp/>convert<sp/>lvalue<sp/>to<sp/>rvalue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>instead<sp/>pass<sp/>BEreq::libFarrayTest_doubleFuncArray2.pointer()<sp/>directly,<sp/>byVal<sp/>is<sp/>not<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>&quot;Calling<sp/>fptrRoutine<sp/>with<sp/>commonblock<sp/>elements<sp/>b<sp/>and<sp/>c<sp/>and<sp/>function<sp/>doubleFuncArray<sp/>as<sp/>arguments...&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BEreq::libFarrayTest_fptrRoutine(commonBlock-&gt;b.array,commonBlock-&gt;c,BEreq::libFarrayTest_doubleFuncArray2.pointer());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>a<sp/>2-dimensional<sp/>array<sp/>in<sp/>c++<sp/>and<sp/>passing<sp/>it<sp/>to<sp/>Fortran:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Farray&lt;double,<sp/>1,2,<sp/>2,3&gt;<sp/>arr;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr(1,2)<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr(1,3)<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr(2,2)<sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr(2,3)<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>BEreq::libFarrayTest_doubleFuncArray3(arr);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmp<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Playing<sp/>around<sp/>with<sp/>commmonBlock2:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>charb(3)<sp/>with<sp/>and<sp/>without<sp/>trailing<sp/>spaces.<sp/>Result:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>trail<sp/><sp/><sp/>=<sp/>commonBlock2-&gt;charb(3)-&gt;str();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>noTrail<sp/>=<sp/>commonBlock2-&gt;charb(3)-&gt;trimmed_str();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>trail<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;--<sp/>string<sp/>ends<sp/>here&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>noTrail<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;--<sp/>string<sp/>ends<sp/>here&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>the<sp/>elements<sp/>of<sp/>charc<sp/>from<sp/>c++:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(1,-1):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock2-&gt;charc(1,-1)-&gt;trimmed_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>(1,0):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock2-&gt;charc(1,0)-&gt;trimmed_str()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(2,-1):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock2-&gt;charc(2,-1)-&gt;trimmed_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>(2,0):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock2-&gt;charc(2,0)-&gt;trimmed_str()<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>charc(2,0)<sp/>=<sp/>chara.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*commonBlock2-&gt;charc(2,0)=commonBlock2-&gt;chara;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>charc(1,-1)<sp/>=<sp/>\&quot;WIN!567\&quot;,<sp/>which<sp/>will<sp/>be<sp/>truncated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*commonBlock2-&gt;charc(1,-1)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;WIN!567&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>charb(1)<sp/>=<sp/>\&quot;ha!\&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*commonBlock2-&gt;charb(1)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ha!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>charb(2)<sp/>=<sp/>chara.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*commonBlock2-&gt;charb(2)<sp/>=<sp/>commonBlock2-&gt;chara;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>printStuff...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::libFarrayTest_printStuff();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Getting<sp/>value<sp/>of<sp/>e:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>commonBlock2-&gt;e<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>complex<sp/>numbers<sp/>from<sp/>Fortran:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock3-&gt;cpa.re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock3-&gt;cpa.im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>complex<sp/>numbers<sp/>from<sp/>Fortran:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock3-&gt;cpb.re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock3-&gt;cpb.im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;f<sp/>from<sp/>commonblock3<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBlock3-&gt;f<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="470"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Scale<sp/>test<sp/>for<sp/>various<sp/>aspects<sp/>of<sp/>the<sp/>printer<sp/>buffer<sp/>system</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Creates<sp/>1000<sp/>items<sp/>to<sp/>be<sp/>printed<sp/>per<sp/>point</highlight></codeline>
<codeline lineno="473"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a4ba9831da82bdca821dad1359a21e6ab" kindref="member">large_print</ref>(std::map&lt;std::string,double&gt;&amp;<sp/>result)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;1000;<sp/>i++)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss&lt;&lt;i;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[ss.str()]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Test<sp/>inline<sp/>marginalisation<sp/>of<sp/>a<sp/>Poisson<sp/>likelihood<sp/>over<sp/>a<sp/>log-normally<sp/>or<sp/>Gaussianly-distributed<sp/>nuisance<sp/>parameter.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a0f6aa9ddaed4c673ae442255a3aa032d" kindref="member">marg_poisson_test</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::marg_poisson_test;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_obs<sp/>=<sp/>5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Actual<sp/>observed<sp/>number<sp/>of<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n_predicted_exact<sp/>=<sp/>1.5;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>contribution<sp/>to<sp/>the<sp/>predicted<sp/>number<sp/>of<sp/>events<sp/>that<sp/>is<sp/>know<sp/>exactly<sp/>(e.g.<sp/>from<sp/>data-driven<sp/>background<sp/>estimate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n_predicted_uncertain<sp/>=<sp/>3.1;<sp/></highlight><highlight class="comment">//<sp/>A<sp/>contribution<sp/>to<sp/>the<sp/>predicted<sp/>number<sp/>of<sp/>events<sp/>that<sp/>is<sp/>not<sp/>know<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uncertainty<sp/>=<sp/>0.2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>fractional<sp/>uncertainty<sp/>on<sp/>n_predicted_uncertain<sp/>(e.g.<sp/>0.2<sp/>from<sp/>20%<sp/>uncertainty<sp/>on<sp/>efficencty<sp/>wrt<sp/>signal<sp/>events)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*BEgroup::lnlike_marg_poisson<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lnlike_marg_poisson_lognormal_error&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>log-normal<sp/>distribution<sp/>for<sp/>the<sp/>nuisance<sp/>parameter<sp/>(more<sp/>correct)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::lnlike_marg_poisson_lognormal_error(n_obs,n_predicted_exact,n_predicted_uncertain,uncertainty);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*BEgroup::lnlike_marg_poisson<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lnlike_marg_poisson_gaussian_error&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>Gaussian<sp/>distribution<sp/>for<sp/>the<sp/>nuisance<sp/>parameter<sp/>(marginally<sp/>faster)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::lnlike_marg_poisson_gaussian_error(n_obs,n_predicted_exact,n_predicted_uncertain,uncertainty);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>ExampleBit_A_error().raise(LOCAL_INFO,</highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>choice<sp/>from<sp/>lnlike_marg_poisson<sp/>BEgroup.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" kindref="member">logger</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>marg_poisson_test<sp/>using<sp/>req<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*BEgroup::lnlike_marg_poisson<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>My<sp/>result<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/><ref refid="namespaceGambit_1aed4726aee167bc7cf497e993d6318514" kindref="member">EOM</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Tester<sp/>for<sp/>C/C++<sp/>backend<sp/>array<sp/>interfaces</highlight></codeline>
<codeline lineno="509"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1aa17815c18d244c7193fe9b544e0218f2" kindref="member">Backend_array_test</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::Backend_array_test;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arr1D[10],<sp/>arr2D[10][10],<sp/>arr3D[10][10][10];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr1D[0]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr1D[9]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr2D[0][0]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr2D[9][0]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr2D[9][9]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr3D[0][0][0]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr3D[9][0][0]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr3D[9][9][9]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>test1<sp/>=<sp/>BEreq::example_be_array_1D(&amp;arr1D[0]);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TEST<sp/>1<sp/>in<sp/>array_test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>test1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>test2<sp/>=<sp/>BEreq::example_be_array_2D(&amp;arr2D[0]);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TEST<sp/>2<sp/>in<sp/>array_test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>test2<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>test3<sp/>=<sp/>BEreq::example_be_array_3D(&amp;arr3D[0]);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TEST<sp/>3<sp/>in<sp/>array_test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>test3<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>test3;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Flat<sp/>test<sp/>likelihood<sp/>for<sp/>checking<sp/>prior<sp/>distributions</highlight></codeline>
<codeline lineno="531"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a596b115ebf13fad0ca4eddad6122f42a" kindref="member">flat_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result){<sp/>result<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>A<sp/>function<sp/>that<sp/>just<sp/>returns<sp/>1</highlight></codeline>
<codeline lineno="534"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a82c92c02d17cf1d37829ce087f7828f8" kindref="member">const_one</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>result){<sp/>result<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Chained<sp/>addition<sp/>function<sp/>that<sp/>adds<sp/>1</highlight></codeline>
<codeline lineno="537"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a31481b80f6fd902b4cc5e9f9c58d7416" kindref="member">recursive_add_1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>result){<sp/>result<sp/>=<sp/>1<sp/>+<sp/>*Pipes::recursive_add_1::Dep::starting_value;<sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Chained<sp/>addition<sp/>function<sp/>that<sp/>adds<sp/>2</highlight></codeline>
<codeline lineno="540"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a9e7a7b82980f7b210220d0770502fe20" kindref="member">recursive_add_2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>result){<sp/>result<sp/>=<sp/>2<sp/>+<sp/>*Pipes::recursive_add_2::Dep::recursive_sum;<sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Chained<sp/>addition<sp/>function<sp/>that<sp/>adds<sp/>3</highlight></codeline>
<codeline lineno="543"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1a078f0087a37bfe7c7f5862c5a600af5e" kindref="member">recursive_add_3</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>result){<sp/>result<sp/>=<sp/>3<sp/>+<sp/>*Pipes::recursive_add_3::Dep::recursive_sum;<sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Chained<sp/>addition<sp/>function<sp/>that<sp/>adds<sp/>4</highlight></codeline>
<codeline lineno="546"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ExampleBit__A_8cpp_1ae7fcf3a077c8ec57eb181c89b39304d1" kindref="member">recursive_add_4</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>result){<sp/>result<sp/>=<sp/>4<sp/>+<sp/>*Pipes::recursive_add_4::Dep::recursive_sum;<sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="549"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="ExampleBit_A/src/ExampleBit_A.cpp"/>
  </compounddef>
</doxygen>
