<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1Utils" kind="namespace" language="C++">
    <compoundname>Gambit::Utils</compoundname>
    <innerclass refid="structGambit_1_1Utils_1_1ci__less" prot="public">Gambit::Utils::ci_less</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1FileLock" prot="public">Gambit::Utils::FileLock</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp1d__collection" prot="public">Gambit::Utils::interp1d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp1d__gsl__collection" prot="public">Gambit::Utils::interp1d_gsl_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp2d__collection" prot="public">Gambit::Utils::interp2d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp2d__gsl__collection" prot="public">Gambit::Utils::interp2d_gsl_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp4d__collection" prot="public">Gambit::Utils::interp4d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp5d__collection" prot="public">Gambit::Utils::interp5d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1ProcessLock" prot="public">Gambit::Utils::ProcessLock</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1specialised__threadsafe__rng" prot="public">Gambit::Utils::specialised_threadsafe_rng</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1threadsafe__rng" prot="public">Gambit::Utils::threadsafe_rng</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1translator" prot="public">Gambit::Utils::translator</innerclass>
    <innerclass refid="structGambit_1_1Utils_1_1type__equivalency" prot="public">Gambit::Utils::type_equivalency</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="file__lock_8cpp_1aafa32bd914b83dd204b4998553babb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string Gambit::Utils::hardmsg</definition>
        <argsstring>(&quot;Now calling abort (will produce a core file for analysis if this is enabled on your system; if so please include this with the bug report)&quot;)</argsstring>
        <name>hardmsg</name>
        <qualifiedname>Gambit::Utils::hardmsg</qualifiedname>
        <param>
          <type>&quot;Now calling abort (will produce a core file for analysis <ref refid="DarkSUSY__MSSM__6__4__0_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> this is enabled on your system; <ref refid="DarkSUSY__MSSM__6__4__0_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> so please include this with the bug report)&quot;</type>
        </param>
        <briefdescription>
<para>Members of <ref refid="classGambit_1_1Utils_1_1FileLock" kindref="compound">FileLock</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/file_lock.cpp" line="78" column="25" declfile="Utils/src/file_lock.cpp" declline="78" declcolumn="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="logging_8hpp_1a0090c36d35ead9dbd7c64a403181e408" prot="public" static="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock &gt;</type>
        <definition>typedef std::chrono::time_point&lt; std::chrono::system_clock &gt; Gambit::Utils::time_point</definition>
        <argsstring></argsstring>
        <name>time_point</name>
        <qualifiedname>Gambit::Utils::time_point</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logs/include/gambit/Logs/logging.hpp" line="46" column="37" bodyfile="Logs/include/gambit/Logs/logging.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="util__functions_8hpp_1a8fc8086e36b78153f25a3b9c80a70cfd" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>const str Gambit::Utils::buildtime_scratch</definition>
        <argsstring></argsstring>
        <name>buildtime_scratch</name>
        <qualifiedname>Gambit::Utils::buildtime_scratch</qualifiedname>
        <initializer>= GAMBIT_DIR &quot;/scratch/build_time/&quot;</initializer>
        <briefdescription>
<para>Return the path to the build-time scratch directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="70" column="15" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util__functions_8cpp_1aa605af61c83961ba12b53d33e6479557" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* Gambit::Utils::whitespaces[]</definition>
        <argsstring>[]</argsstring>
        <name>whitespaces</name>
        <qualifiedname>Gambit::Utils::whitespaces</qualifiedname>
        <initializer>= {&quot; &quot;, &quot;\t&quot;, &quot;\n&quot;, &quot;\f&quot;, &quot;\r&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="55" column="16" bodyfile="Utils/src/util_functions.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="equivalency__singleton_8hpp_1ac5eba5f568f18b2a4b8e7d9267513796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structGambit_1_1Utils_1_1type__equivalency" kindref="compound">type_equivalency</ref> &amp;</type>
        <definition>type_equivalency &amp; Gambit::Utils::typeEquivalencies</definition>
        <argsstring>()</argsstring>
        <name>typeEquivalencies</name>
        <qualifiedname>Gambit::Utils::typeEquivalencies</qualifiedname>
        <briefdescription>
<para>Backend info accessor function. </para>
        </briefdescription>
        <detaileddescription>
<para>Type equivalency accessor function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/equivalency_singleton.cpp" line="25" column="22" bodyfile="Elements/src/equivalency_singleton.cpp" bodystart="25" bodyend="29" declfile="Elements/include/gambit/Elements/equivalency_singleton.hpp" declline="29" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="type__equivalency_8hpp_1a14daf65e2f1738a79c1daa8987f46f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::fix_type</definition>
        <argsstring>(str)</argsstring>
        <name>fix_type</name>
        <qualifiedname>Gambit::Utils::fix_type</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Clean out whitespace and strip <ref refid="namespaceGambit" kindref="compound">Gambit</ref> and default BOSSed class namespaces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/type_equivalency.cpp" line="34" column="9" bodyfile="Elements/src/type_equivalency.cpp" bodystart="34" bodyend="44" declfile="Elements/include/gambit/Elements/type_equivalency.hpp" declline="33" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="logging_8hpp_1af69b894b3f52a783a3fa1f5fe30aef8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_point</type>
        <definition>time_point Gambit::Utils::get_clock_now</definition>
        <argsstring>()</argsstring>
        <name>get_clock_now</name>
        <qualifiedname>Gambit::Utils::get_clock_now</qualifiedname>
        <briefdescription>
<para>Get clock time. </para>
        </briefdescription>
        <detaileddescription>
<para>Get current system clock time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="335" column="16" bodyfile="Utils/src/util_functions.cpp" bodystart="335" bodyend="338" declfile="Logs/include/gambit/Logs/logging.hpp" declline="48" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="integration_8hpp_1ad31caac2ecac37cd6f6632a6ebca120a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::unwrap</definition>
        <argsstring>(double x, void *p)</argsstring>
        <name>unwrap</name>
        <qualifiedname>Gambit::Utils::unwrap</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unwrapper for passing std::function to GSL integrator Based on example from <ulink url="https://martin-ueding.de/articles/cpp-lambda-into-gsl/index.html">https://martin-ueding.de/articles/cpp-lambda-into-gsl/index.html</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/integration.cpp" line="33" column="12" bodyfile="Utils/src/integration.cpp" bodystart="33" bodyend="37" declfile="Utils/include/gambit/Utils/integration.hpp" declline="32" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="integration_8hpp_1a731c11b6ddbe2872d3d967b0958eeaed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::integrate_cquad</definition>
        <argsstring>(std::function&lt; double(double)&gt; ftor, double a, double b, double abseps, double releps)</argsstring>
        <name>integrate_cquad</name>
        <qualifiedname>Gambit::Utils::integrate_cquad</qualifiedname>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
          <declname>ftor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abseps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>releps</declname>
        </param>
        <briefdescription>
<para>Integrate a std::function using GSL cquad. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/integration.cpp" line="40" column="12" bodyfile="Utils/src/integration.cpp" bodystart="40" bodyend="60" declfile="Utils/include/gambit/Utils/integration.hpp" declline="35" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lnlike__modifiers_8hpp_1ad5971acfc36842594fa9042f1a40591d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::run_lnlike_modifier</definition>
        <argsstring>(double lnlike, const str &amp;lnlike_modifier_name, const Options &amp;lnlike_modifier_options)</argsstring>
        <name>run_lnlike_modifier</name>
        <qualifiedname>Gambit::Utils::run_lnlike_modifier</qualifiedname>
        <param>
          <type>double</type>
          <declname>lnlike</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>lnlike_modifier_name</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>lnlike_modifier_options</declname>
        </param>
        <briefdescription>
<para>Interface function that calls the correct modifier function based on the name in lnlike_modifier_name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/lnlike_modifiers.cpp" line="30" column="12" bodyfile="Utils/src/lnlike_modifiers.cpp" bodystart="30" bodyend="69" declfile="Utils/include/gambit/Utils/lnlike_modifiers.hpp" declline="29" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lnlike__modifiers_8hpp_1acd56d412935165b3fb1e0db8fadeee76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::lnlike_modifier_gaussian</definition>
        <argsstring>(double lnlike, const Options &amp;lnlike_modifier_options)</argsstring>
        <name>lnlike_modifier_gaussian</name>
        <qualifiedname>Gambit::Utils::lnlike_modifier_gaussian</qualifiedname>
        <param>
          <type>double</type>
          <declname>lnlike</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>lnlike_modifier_options</declname>
        </param>
        <briefdescription>
<para>lnlike modifier: gaussian </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/lnlike_modifiers.cpp" line="72" column="12" bodyfile="Utils/src/lnlike_modifiers.cpp" bodystart="72" bodyend="102" declfile="Utils/include/gambit/Utils/lnlike_modifiers.hpp" declline="32" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lnlike__modifiers_8hpp_1a5447f06e4345d1a7bfb50b6aab2fb19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::lnlike_modifier_gaussian_plateau</definition>
        <argsstring>(double lnlike, const Options &amp;lnlike_modifier_options)</argsstring>
        <name>lnlike_modifier_gaussian_plateau</name>
        <qualifiedname>Gambit::Utils::lnlike_modifier_gaussian_plateau</qualifiedname>
        <param>
          <type>double</type>
          <declname>lnlike</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>lnlike_modifier_options</declname>
        </param>
        <briefdescription>
<para>lnlike modifier: gaussian_plateau </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/lnlike_modifiers.cpp" line="105" column="12" bodyfile="Utils/src/lnlike_modifiers.cpp" bodystart="105" bodyend="137" declfile="Utils/include/gambit/Utils/lnlike_modifiers.hpp" declline="35" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a7ecde801fc354fe3610534cff73c8a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        <definition>const str &amp; Gambit::Utils::runtime_scratch</definition>
        <argsstring>()</argsstring>
        <name>runtime_scratch</name>
        <qualifiedname>Gambit::Utils::runtime_scratch</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the path to the run-specific scratch directory Don&apos;t call this from a destructor, as the internal static str may have already been destroyed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="59" column="15" bodyfile="Utils/src/util_functions.cpp" bodystart="59" bodyend="63" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="74" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a5d5dfd398d407f0e92eda2da6c74cd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::p2dot</definition>
        <argsstring>(str s)</argsstring>
        <name>p2dot</name>
        <qualifiedname>Gambit::Utils::p2dot</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Convert all instances of &quot;p&quot; in a string to &quot;.&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="92" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="92" bodyend="96" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="77" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a6ced4589258c148ad42a923ae94d938c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::construct_runtime_scratch</definition>
        <argsstring>(bool fail_on_mpi_uninitialised=true)</argsstring>
        <name>construct_runtime_scratch</name>
        <qualifiedname>Gambit::Utils::construct_runtime_scratch</qualifiedname>
        <param>
          <type>bool</type>
          <declname>fail_on_mpi_uninitialised</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct the path to the run-specific scratch directory This version is safe to call from a destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="67" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="67" bodyend="89" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="81" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a95d3a257b50c49a4dff5668096047578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::vector&lt; str &gt; Gambit::Utils::delimiterSplit</definition>
        <argsstring>(str s, str delim)</argsstring>
        <name>delimiterSplit</name>
        <qualifiedname>Gambit::Utils::delimiterSplit</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split a string into a vector of strings, using a delimiter, and removing any whitespace around the delimiter.</para>
<para>Split a string into a vector of strings using a delimiter, and remove any whitespace around the delimiters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="100" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="100" bodyend="111" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="85" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a8ea1c9f6c53b5cd699de2f43af5da1d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::strip_leading_namespace</definition>
        <argsstring>(str s, str ns)</argsstring>
        <name>strip_leading_namespace</name>
        <qualifiedname>Gambit::Utils::strip_leading_namespace</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ns</declname>
        </param>
        <briefdescription>
<para>Strips namespace from the start of a string, or after &quot;const&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="114" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="114" bodyend="119" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="88" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a99454425e1159573fedd4bf58cafbf56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::replace_leading_namespace</definition>
        <argsstring>(str s, str ns, str ns_new)</argsstring>
        <name>replace_leading_namespace</name>
        <qualifiedname>Gambit::Utils::replace_leading_namespace</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ns_new</declname>
        </param>
        <briefdescription>
<para>Replaces a namespace at the start of a string, or after &quot;const&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="122" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="122" bodyend="127" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="91" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a9938cd104b35638bcc519ce69bd1cf2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS void</type>
        <definition>void Gambit::Utils::strip_whitespace_except_after_const</definition>
        <argsstring>(str &amp;s)</argsstring>
        <name>strip_whitespace_except_after_const</name>
        <qualifiedname>Gambit::Utils::strip_whitespace_except_after_const</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Strips all whitespaces from a string, but re-inserts a single regular space after &quot;const&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Strip all whitespace except that following &quot;const&quot;, in which case the whitespace is replaced by a single space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="130" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="130" bodyend="137" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="95" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a44ee858c911e80f385fed9eb014e825f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS void</type>
        <definition>void Gambit::Utils::strip_parentheses</definition>
        <argsstring>(str &amp;)</argsstring>
        <name>strip_parentheses</name>
        <qualifiedname>Gambit::Utils::strip_parentheses</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Strips leading and/or trailing parentheses from a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="140" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="140" bodyend="144" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="98" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a64438b777797a1638f6de2a02d545fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>EXPORT_SYMBOLS bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;, const std::set&lt; sspair &gt; &amp;)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test if a set of str,str pairs contains any entry with first element matching a given string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="101" column="25" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="101" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a6db6b5fb867378b82e395256b19272ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>EXPORT_SYMBOLS bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;, const str &amp;, const std::set&lt; sspair &gt; &amp;)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Tests if a set of str,str pairs contains an entry matching two given strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="104" column="25" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="104" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a4b07a1668e28da0bd942eb8987d63316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const sspair &amp;, const std::set&lt; sspair &gt; &amp;)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &amp;</type>
          <defname>quantity</defname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &amp;</type>
          <defname>set</defname>
        </param>
        <briefdescription>
<para>Tests if a set of str,str pairs contains an entry matching a given pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="160" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="160" bodyend="163" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="107" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ae7e4e20d80d69acddb5999a53ed85e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::str_fixed_len</definition>
        <argsstring>(str, int)</argsstring>
        <name>str_fixed_len</name>
        <qualifiedname>Gambit::Utils::str_fixed_len</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <param>
          <type>int</type>
          <defname>len</defname>
        </param>
        <briefdescription>
<para>Created a str of a specified length. </para>
        </briefdescription>
        <detaileddescription>
<para>Created a std::string of a specified length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="166" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="166" bodyend="178" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="110" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a32de3b774e1ac67c95387f53eaa4d7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS void</type>
        <definition>void Gambit::Utils::strcpy2f</definition>
        <argsstring>(char *, int, str)</argsstring>
        <name>strcpy2f</name>
        <qualifiedname>Gambit::Utils::strcpy2f</qualifiedname>
        <param>
          <type>char *</type>
          <defname>arr</defname>
        </param>
        <param>
          <type>int</type>
          <defname>len</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Copy a str to a character array, stripping the null termination character. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy a std::string to a character array, stripping the null termination character. Good for sending to Fortran. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="193" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="193" bodyend="198" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="113" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ab50f1b4aef2cd4ab820abd9bcf416bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::endsWith</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;suffix)</argsstring>
        <name>endsWith</name>
        <qualifiedname>Gambit::Utils::endsWith</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Checks whether <lsquo/>str<rsquo/> ends with <lsquo/>suffix<rsquo/>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="405" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="405" bodyend="414" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="116" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a3ce78eb95b663a09a03cddc63946f135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::startsWith</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;prefix, bool case_sensitive=true)</argsstring>
        <name>startsWith</name>
        <qualifiedname>Gambit::Utils::startsWith</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Checks whether <lsquo/>str<rsquo/> begins with <lsquo/>prefix<rsquo/>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="417" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="417" bodyend="432" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="119" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a332b3e7f51f8a89f8188552daa349187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::iequals</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b, bool case_sensitive=false)</argsstring>
        <name>iequals</name>
        <qualifiedname>Gambit::Utils::iequals</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Perform a (possibly) case-insensitive string comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform a simple case-insensitive string comparison From: <ulink url="https://stackoverflow.com/a/4119881/1447953">https://stackoverflow.com/a/4119881/1447953</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="202" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="202" bodyend="213" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="122" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ac7fb9c625cf6ec2fefc4365a3243921e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; Gambit::Utils::split</definition>
        <argsstring>(const std::string &amp;input, const std::string &amp;delimiter)</argsstring>
        <name>split</name>
        <qualifiedname>Gambit::Utils::split</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>Split string into vector of strings, using a delimiter string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="216" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="216" bodyend="221" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="125" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a26794789f5b08061d4a17c575999802a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::string</type>
        <definition>std::string Gambit::Utils::strtolower</definition>
        <argsstring>(const std::string &amp;a)</argsstring>
        <name>strtolower</name>
        <qualifiedname>Gambit::Utils::strtolower</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Convert a whole string to lowercase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="224" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="224" bodyend="231" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="128" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa220fd5aed1070ecf2636aacdfd87b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * Gambit::Utils::beginA</definition>
        <argsstring>(T(&amp;arr)[N])</argsstring>
        <name>beginA</name>
        <qualifiedname>Gambit::Utils::beginA</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Get pointers to beginning and end of array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="159" column="7" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a09e20dc39fa49bd759c9642de56deebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * Gambit::Utils::endA</definition>
        <argsstring>(T(&amp;arr)[N])</argsstring>
        <name>endA</name>
        <qualifiedname>Gambit::Utils::endA</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="161" column="7" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aec08e51e0cbe7ff1bffca6d9f6915990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Set1</type>
          </param>
          <param>
            <type>class Set2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Utils::is_disjoint</definition>
        <argsstring>(const Set1 &amp;set1, const Set2 &amp;set2)</argsstring>
        <name>is_disjoint</name>
        <qualifiedname>Gambit::Utils::is_disjoint</qualifiedname>
        <param>
          <type>const Set1 &amp;</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const Set2 &amp;</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
<para>Test if two sets are disjoint (works on any sorted std container I think) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="166" column="10" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="166" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1affb535fe86b05245b1e137af76905a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        <definition>const std::string &amp; Gambit::Utils::ensure_path_exists</definition>
        <argsstring>(const str &amp;)</argsstring>
        <name>ensure_path_exists</name>
        <qualifiedname>Gambit::Utils::ensure_path_exists</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>path</defname>
        </param>
        <briefdescription>
<para>Ensure that a path exists (and then return the path, for chaining purposes) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="234" column="23" bodyfile="Utils/src/util_functions.cpp" bodystart="234" bodyend="245" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="190" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a06db2efbb6a1f3dcd729015fe8ca9ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::file_exists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>file_exists</name>
        <qualifiedname>Gambit::Utils::file_exists</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Check if a file exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="248" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="248" bodyend="254" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="193" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a6feb516a1b35c3dcbe98e9097f4b56b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::vector&lt; std::string &gt; Gambit::Utils::ls_dir</definition>
        <argsstring>(const str &amp;dir)</argsstring>
        <name>ls_dir</name>
        <qualifiedname>Gambit::Utils::ls_dir</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return a vector of strings listing the contents of a directory (POSIX) </para>
        </briefdescription>
        <detaileddescription>
<para>Return a vector of strings listing the contents of a directory (POSIX) Based on <ulink url="http://www.gnu.org/software/libtool/manual/libc/Simple-Directory-Lister.html">http://www.gnu.org/software/libtool/manual/libc/Simple-Directory-Lister.html</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="258" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="258" bodyend="280" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="196" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a31467c5d69da824094c1c501fb577aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>std::string Gambit::Utils::dir_name</definition>
        <argsstring>(const str &amp;path)</argsstring>
        <name>dir_name</name>
        <qualifiedname>Gambit::Utils::dir_name</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get directory name from full path+filename (POSIX) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="283" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="283" bodyend="290" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="199" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ab41966eb6148741a7553951bd360c875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>std::string Gambit::Utils::base_name</definition>
        <argsstring>(const str &amp;path)</argsstring>
        <name>base_name</name>
        <qualifiedname>Gambit::Utils::base_name</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get file name from full path+filename (POSIX) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="293" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="293" bodyend="300" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="202" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a32de1511f8fc1f997c6808ee0a75143b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS int</type>
        <definition>int Gambit::Utils::remove_all_files_in</definition>
        <argsstring>(const str &amp;dirname, bool error_if_absent=true)</argsstring>
        <name>remove_all_files_in</name>
        <qualifiedname>Gambit::Utils::remove_all_files_in</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>dirname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>error_if_absent</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Delete all files in a directory (does not act recursively) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="303" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="303" bodyend="332" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="205" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a007a388ac6b5fe2de7b8e42a3f5e11be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>std::string Gambit::Utils::return_time_and_date</definition>
        <argsstring>(const time_point &amp;in)</argsstring>
        <name>return_time_and_date</name>
        <qualifiedname>Gambit::Utils::return_time_and_date</qualifiedname>
        <param>
          <type>const time_point &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Get date and time. </para>
        </briefdescription>
        <detaileddescription>
<para>Return (locally defined) date and time corresponding to time_point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="341" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="341" bodyend="348" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="214" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a4eb57caa47920b97661c31a2a6d36db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::are_similar</definition>
        <argsstring>(const str &amp;s1, const str &amp;s2)</argsstring>
        <name>are_similar</name>
        <qualifiedname>Gambit::Utils::are_similar</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two strings are a &quot;close&quot; match Used for &quot;did you mean?&quot; type checking during command line argument processing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="352" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="352" bodyend="358" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="218" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa8eeb84d029f52c34da8cf359643e2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::check1</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2)</argsstring>
        <name>check1</name>
        <qualifiedname>Gambit::Utils::check1</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>true if s1 can be obtained by deleting one character from s2 </para>
        </briefdescription>
        <detaileddescription>
<para>Sub-check for are_similar. true if s1 can be obtained by deleting one character from s2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="361" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="361" bodyend="375" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="222" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a5ab20c20fb620d82e9005b2a7a518c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::check2</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2)</argsstring>
        <name>check2</name>
        <qualifiedname>Gambit::Utils::check2</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>true if s1 can be obtained from s2 by changing no more than X characters (X=2 for now) </para>
        </briefdescription>
        <detaileddescription>
<para>Sub-check for are_similar. true if s1 can be obtained from s2 by changing no more than X characters (X=2 for now) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="378" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="378" bodyend="395" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="226" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ad4bad72f7ba7f1304b1aff783d3debea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS double</type>
        <definition>double Gambit::Utils::sqr</definition>
        <argsstring>(double a)</argsstring>
        <name>sqr</name>
        <qualifiedname>Gambit::Utils::sqr</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>returns square of double - saves tedious repetition </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="398" column="12" bodyfile="Utils/src/util_functions.cpp" bodystart="398" bodyend="401" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="229" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa1b37757040609429ce8eaabf9737567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::isInteger</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>isInteger</name>
        <qualifiedname>Gambit::Utils::isInteger</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a string represents an integer From: <ulink url="http://stackoverflow.com/a/2845275/1447953">http://stackoverflow.com/a/2845275/1447953</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="182" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="182" bodyend="190" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="239" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1abea4b02c23e0bc1283cad93597eae4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::Utils::sgn</definition>
        <argsstring>(T val)</argsstring>
        <name>sgn</name>
        <qualifiedname>Gambit::Utils::sgn</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get the sign of a (hopefully numeric type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="242" column="21" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a2e33ae38f2ef6b0c92754cdd2a7ca834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Utils::dummy_function</definition>
        <argsstring>()</argsstring>
        <name>dummy_function</name>
        <qualifiedname>Gambit::Utils::dummy_function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="245" column="21" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ad31ddd95449e34dfa7fc775265aa2f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Utils::dummy_function</definition>
        <argsstring>(T one)</argsstring>
        <name>dummy_function</name>
        <qualifiedname>Gambit::Utils::dummy_function</qualifiedname>
        <param>
          <type>T</type>
          <declname>one</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="246" column="21" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa97d5187478a565300ce621b979e5f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Utils::dummy_function</definition>
        <argsstring>(T1 first, T... args)</argsstring>
        <name>dummy_function</name>
        <qualifiedname>Gambit::Utils::dummy_function</qualifiedname>
        <param>
          <type>T1</type>
          <declname>first</declname>
        </param>
        <param>
          <type>T...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="251" column="23" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="251" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="interp__collection_8cpp_1a1bb585fd41764ea4f4aa66bab949dd7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Utils::InterpIter</definition>
        <argsstring>(int Ntemp, double xi_1, double xi_2, std::vector&lt; double &gt; &amp;fi, double test)</argsstring>
        <name>InterpIter</name>
        <qualifiedname>Gambit::Utils::InterpIter</qualifiedname>
        <param>
          <type>int</type>
          <declname>Ntemp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xi_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xi_2</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>fi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/interp_collection.cpp" line="1171" column="10" bodyfile="Utils/src/interp_collection.cpp" bodystart="1171" bodyend="1191" declfile="Utils/src/interp_collection.cpp" declline="690" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="interp__collection_8cpp_1aedda42f2abec8d12400f5808f6d8188f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::linearinterp1D</definition>
        <argsstring>(double x1, double x2, double y1, double y2, double xtest)</argsstring>
        <name>linearinterp1D</name>
        <qualifiedname>Gambit::Utils::linearinterp1D</qualifiedname>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xtest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/interp_collection.cpp" line="1163" column="12" bodyfile="Utils/src/interp_collection.cpp" bodystart="1163" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8cpp_1a57798e61c9ebb61c62cb557bb45946ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;el, const std::set&lt; std::pair&lt; str, str &gt; &gt; &amp;set)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const std::set&lt; std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Test if a set of str,str pairs contains any entry with first element matching a given string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="147" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8cpp_1af1c80a9d9e42468d243c920200f6220f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;el1, const str &amp;el2, const std::set&lt; std::pair&lt; str, str &gt; &gt; &amp;set)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>el1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>el2</declname>
        </param>
        <param>
          <type>const std::set&lt; std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Tests if a set of str,str pairs contains an entry matching two given strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="154" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Elements/include/gambit/Elements/equivalency_singleton.hpp" line="25" column="3"/>
  </compounddef>
</doxygen>
