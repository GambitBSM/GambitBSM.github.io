<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1Utils" kind="namespace" language="C++">
    <compoundname>Gambit::Utils</compoundname>
    <innerclass refid="structGambit_1_1Utils_1_1ci__less" prot="public">Gambit::Utils::ci_less</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1FileLock" prot="public">Gambit::Utils::FileLock</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp1d__collection" prot="public">Gambit::Utils::interp1d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp1d__gsl__collection" prot="public">Gambit::Utils::interp1d_gsl_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp2d__collection" prot="public">Gambit::Utils::interp2d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp2d__gsl__collection" prot="public">Gambit::Utils::interp2d_gsl_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp4d__collection" prot="public">Gambit::Utils::interp4d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1interp5d__collection" prot="public">Gambit::Utils::interp5d_collection</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1ProcessLock" prot="public">Gambit::Utils::ProcessLock</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1python__interpreter__guard" prot="public">Gambit::Utils::python_interpreter_guard</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1specialised__threadsafe__rng" prot="public">Gambit::Utils::specialised_threadsafe_rng</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1threadsafe__rng" prot="public">Gambit::Utils::threadsafe_rng</innerclass>
    <innerclass refid="classGambit_1_1Utils_1_1translator" prot="public">Gambit::Utils::translator</innerclass>
    <innerclass refid="structGambit_1_1Utils_1_1type__equivalency" prot="public">Gambit::Utils::type_equivalency</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="file__lock_8cpp_1aafa32bd914b83dd204b4998553babb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string Gambit::Utils::hardmsg</definition>
        <argsstring>(&quot;Now calling abort (will produce a core file for analysis if this is enabled on your system; if so please include this with the bug report)&quot;)</argsstring>
        <name>hardmsg</name>
        <qualifiedname>Gambit::Utils::hardmsg</qualifiedname>
        <param>
          <type>&quot;Now calling abort (will produce a core file for analysis <ref refid="DarkSUSY__MSSM__6__4__0_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> this is enabled on your system; <ref refid="DarkSUSY__MSSM__6__4__0_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> so please include this with the bug report)&quot;</type>
        </param>
        <briefdescription>
<para>Members of <ref refid="classGambit_1_1Utils_1_1FileLock" kindref="compound">FileLock</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/file_lock.cpp" line="78" column="25" declfile="Utils/src/file_lock.cpp" declline="78" declcolumn="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="logging_8hpp_1a0090c36d35ead9dbd7c64a403181e408" prot="public" static="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock &gt;</type>
        <definition>typedef std::chrono::time_point&lt; std::chrono::system_clock &gt; Gambit::Utils::time_point</definition>
        <argsstring></argsstring>
        <name>time_point</name>
        <qualifiedname>Gambit::Utils::time_point</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logs/include/gambit/Logs/logging.hpp" line="46" column="37" bodyfile="Logs/include/gambit/Logs/logging.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="util__functions_8cpp_1aa605af61c83961ba12b53d33e6479557" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* Gambit::Utils::whitespaces[]</definition>
        <argsstring>[]</argsstring>
        <name>whitespaces</name>
        <qualifiedname>Gambit::Utils::whitespaces</qualifiedname>
        <initializer>= {&quot; &quot;, &quot;\t&quot;, &quot;\n&quot;, &quot;\f&quot;, &quot;\r&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="56" column="16" bodyfile="Utils/src/util_functions.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="equivalency__singleton_8hpp_1ac5eba5f568f18b2a4b8e7d9267513796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structGambit_1_1Utils_1_1type__equivalency" kindref="compound">type_equivalency</ref> &amp;</type>
        <definition>type_equivalency &amp; Gambit::Utils::typeEquivalencies</definition>
        <argsstring>()</argsstring>
        <name>typeEquivalencies</name>
        <qualifiedname>Gambit::Utils::typeEquivalencies</qualifiedname>
        <briefdescription>
<para>Backend info accessor function. </para>
        </briefdescription>
        <detaileddescription>
<para>Type equivalency accessor function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/equivalency_singleton.cpp" line="25" column="22" bodyfile="Elements/src/equivalency_singleton.cpp" bodystart="25" bodyend="29" declfile="Elements/include/gambit/Elements/equivalency_singleton.hpp" declline="29" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="type__equivalency_8hpp_1a14daf65e2f1738a79c1daa8987f46f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::fix_type</definition>
        <argsstring>(str)</argsstring>
        <name>fix_type</name>
        <qualifiedname>Gambit::Utils::fix_type</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Clean out whitespace and strip <ref refid="namespaceGambit" kindref="compound">Gambit</ref> and default BOSSed class namespaces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/type_equivalency.cpp" line="34" column="9" bodyfile="Elements/src/type_equivalency.cpp" bodystart="34" bodyend="44" declfile="Elements/include/gambit/Elements/type_equivalency.hpp" declline="33" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="logging_8hpp_1af69b894b3f52a783a3fa1f5fe30aef8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_point</type>
        <definition>time_point Gambit::Utils::get_clock_now</definition>
        <argsstring>()</argsstring>
        <name>get_clock_now</name>
        <qualifiedname>Gambit::Utils::get_clock_now</qualifiedname>
        <briefdescription>
<para>Get clock time. </para>
        </briefdescription>
        <detaileddescription>
<para>Get current system clock time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="383" column="16" bodyfile="Utils/src/util_functions.cpp" bodystart="383" bodyend="386" declfile="Logs/include/gambit/Logs/logging.hpp" declline="48" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="integration_8hpp_1ad31caac2ecac37cd6f6632a6ebca120a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::unwrap</definition>
        <argsstring>(double x, void *p)</argsstring>
        <name>unwrap</name>
        <qualifiedname>Gambit::Utils::unwrap</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unwrapper for passing std::function to GSL integrator Based on example from <ulink url="https://martin-ueding.de/articles/cpp-lambda-into-gsl/index.html">https://martin-ueding.de/articles/cpp-lambda-into-gsl/index.html</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/integration.cpp" line="33" column="12" bodyfile="Utils/src/integration.cpp" bodystart="33" bodyend="37" declfile="Utils/include/gambit/Utils/integration.hpp" declline="32" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="integration_8hpp_1a731c11b6ddbe2872d3d967b0958eeaed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::integrate_cquad</definition>
        <argsstring>(std::function&lt; double(double)&gt; ftor, double a, double b, double abseps, double releps)</argsstring>
        <name>integrate_cquad</name>
        <qualifiedname>Gambit::Utils::integrate_cquad</qualifiedname>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
          <declname>ftor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abseps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>releps</declname>
        </param>
        <briefdescription>
<para>Integrate a std::function using GSL cquad. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/integration.cpp" line="40" column="12" bodyfile="Utils/src/integration.cpp" bodystart="40" bodyend="60" declfile="Utils/include/gambit/Utils/integration.hpp" declline="35" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lnlike__modifiers_8hpp_1ad5971acfc36842594fa9042f1a40591d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::run_lnlike_modifier</definition>
        <argsstring>(double lnlike, const str &amp;lnlike_modifier_name, const Options &amp;lnlike_modifier_options)</argsstring>
        <name>run_lnlike_modifier</name>
        <qualifiedname>Gambit::Utils::run_lnlike_modifier</qualifiedname>
        <param>
          <type>double</type>
          <declname>lnlike</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>lnlike_modifier_name</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>lnlike_modifier_options</declname>
        </param>
        <briefdescription>
<para>Interface function that calls the correct modifier function based on the name in lnlike_modifier_name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/lnlike_modifiers.cpp" line="30" column="12" bodyfile="Utils/src/lnlike_modifiers.cpp" bodystart="30" bodyend="69" declfile="Utils/include/gambit/Utils/lnlike_modifiers.hpp" declline="29" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lnlike__modifiers_8hpp_1acd56d412935165b3fb1e0db8fadeee76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::lnlike_modifier_gaussian</definition>
        <argsstring>(double lnlike, const Options &amp;lnlike_modifier_options)</argsstring>
        <name>lnlike_modifier_gaussian</name>
        <qualifiedname>Gambit::Utils::lnlike_modifier_gaussian</qualifiedname>
        <param>
          <type>double</type>
          <declname>lnlike</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>lnlike_modifier_options</declname>
        </param>
        <briefdescription>
<para>lnlike modifier: gaussian </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/lnlike_modifiers.cpp" line="72" column="12" bodyfile="Utils/src/lnlike_modifiers.cpp" bodystart="72" bodyend="102" declfile="Utils/include/gambit/Utils/lnlike_modifiers.hpp" declline="32" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="lnlike__modifiers_8hpp_1a5447f06e4345d1a7bfb50b6aab2fb19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::lnlike_modifier_gaussian_plateau</definition>
        <argsstring>(double lnlike, const Options &amp;lnlike_modifier_options)</argsstring>
        <name>lnlike_modifier_gaussian_plateau</name>
        <qualifiedname>Gambit::Utils::lnlike_modifier_gaussian_plateau</qualifiedname>
        <param>
          <type>double</type>
          <declname>lnlike</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>lnlike_modifier_options</declname>
        </param>
        <briefdescription>
<para>lnlike modifier: gaussian_plateau </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/lnlike_modifiers.cpp" line="105" column="12" bodyfile="Utils/src/lnlike_modifiers.cpp" bodystart="105" bodyend="137" declfile="Utils/include/gambit/Utils/lnlike_modifiers.hpp" declline="35" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ab02e2e94681c709e8721aafebec74434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Utils::getEnvVar</definition>
        <argsstring>(std::string const &amp;key)</argsstring>
        <name>getEnvVar</name>
        <qualifiedname>Gambit::Utils::getEnvVar</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get an environment variable, or &quot;&quot; if the variable is not set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="59" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="59" bodyend="63" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="71" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a8b628aa14dad032d1159036ce9751a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS const std::string &amp;</type>
        <definition>const std::string &amp; Gambit::Utils::GAMBIT_root_dir</definition>
        <argsstring>()</argsstring>
        <name>GAMBIT_root_dir</name>
        <qualifiedname>Gambit::Utils::GAMBIT_root_dir</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the root directory of GAMBIT. Useful for locating configuration files and other such things in a robust manner at runtime <linebreak/>
</para>
<para>Return the root directory of GAMBIT. Useful for locating configuration files and other such things in a robust manner <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="92" column="23" bodyfile="Utils/src/util_functions.cpp" bodystart="92" bodyend="96" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="76" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a35fd8cff51a050f15a9e681edc7ef614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS const std::string &amp;</type>
        <definition>const str &amp; Gambit::Utils::buildtime_scratch</definition>
        <argsstring>()</argsstring>
        <name>buildtime_scratch</name>
        <qualifiedname>Gambit::Utils::buildtime_scratch</qualifiedname>
        <briefdescription>
<para>Return the path to the build-time scratch directory. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the path to the build-time scratch directory bjf&gt; There is stuff using this variable that is needed by ScannerBit at run time, not just build time, therefore it needs to be located using the function above </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="99" column="15" bodyfile="Utils/src/util_functions.cpp" bodystart="99" bodyend="103" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="82" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a7ecde801fc354fe3610534cff73c8a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        <definition>const str &amp; Gambit::Utils::runtime_scratch</definition>
        <argsstring>()</argsstring>
        <name>runtime_scratch</name>
        <qualifiedname>Gambit::Utils::runtime_scratch</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the path to the run-specific scratch directory Don&apos;t call this from a destructor, as the internal static str may have already been destroyed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="107" column="15" bodyfile="Utils/src/util_functions.cpp" bodystart="107" bodyend="111" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="86" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a5d5dfd398d407f0e92eda2da6c74cd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::p2dot</definition>
        <argsstring>(str s)</argsstring>
        <name>p2dot</name>
        <qualifiedname>Gambit::Utils::p2dot</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Convert all instances of &quot;p&quot; in a string to &quot;.&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="140" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="140" bodyend="144" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="89" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a6ced4589258c148ad42a923ae94d938c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::construct_runtime_scratch</definition>
        <argsstring>(bool fail_on_mpi_uninitialised=true)</argsstring>
        <name>construct_runtime_scratch</name>
        <qualifiedname>Gambit::Utils::construct_runtime_scratch</qualifiedname>
        <param>
          <type>bool</type>
          <declname>fail_on_mpi_uninitialised</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct the path to the run-specific scratch directory This version is safe to call from a destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="115" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="115" bodyend="137" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="93" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a95d3a257b50c49a4dff5668096047578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::vector&lt; str &gt; Gambit::Utils::delimiterSplit</definition>
        <argsstring>(str s, str delim)</argsstring>
        <name>delimiterSplit</name>
        <qualifiedname>Gambit::Utils::delimiterSplit</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split a string into a vector of strings, using a delimiter, and removing any whitespace around the delimiter.</para>
<para>Split a string into a vector of strings using a delimiter, and remove any whitespace around the delimiters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="148" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="148" bodyend="159" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="97" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a8ea1c9f6c53b5cd699de2f43af5da1d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::strip_leading_namespace</definition>
        <argsstring>(str s, str ns)</argsstring>
        <name>strip_leading_namespace</name>
        <qualifiedname>Gambit::Utils::strip_leading_namespace</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ns</declname>
        </param>
        <briefdescription>
<para>Strips namespace from the start of a string, or after &quot;const&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="162" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="162" bodyend="167" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="100" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a99454425e1159573fedd4bf58cafbf56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::replace_leading_namespace</definition>
        <argsstring>(str s, str ns, str ns_new)</argsstring>
        <name>replace_leading_namespace</name>
        <qualifiedname>Gambit::Utils::replace_leading_namespace</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ns_new</declname>
        </param>
        <briefdescription>
<para>Replaces a namespace at the start of a string, or after &quot;const&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="170" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="170" bodyend="175" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="103" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a9938cd104b35638bcc519ce69bd1cf2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS void</type>
        <definition>void Gambit::Utils::strip_whitespace_except_after_const</definition>
        <argsstring>(str &amp;s)</argsstring>
        <name>strip_whitespace_except_after_const</name>
        <qualifiedname>Gambit::Utils::strip_whitespace_except_after_const</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Strips all whitespaces from a string, but re-inserts a single regular space after &quot;const&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Strip all whitespace except that following &quot;const&quot;, in which case the whitespace is replaced by a single space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="178" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="178" bodyend="185" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="107" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a44ee858c911e80f385fed9eb014e825f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS void</type>
        <definition>void Gambit::Utils::strip_parentheses</definition>
        <argsstring>(str &amp;)</argsstring>
        <name>strip_parentheses</name>
        <qualifiedname>Gambit::Utils::strip_parentheses</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Strips leading and/or trailing parentheses from a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="188" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="188" bodyend="192" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="110" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a64438b777797a1638f6de2a02d545fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>EXPORT_SYMBOLS bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;, const std::set&lt; sspair &gt; &amp;)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test if a set of str,str pairs contains any entry with first element matching a given string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="113" column="25" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="113" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a6db6b5fb867378b82e395256b19272ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>EXPORT_SYMBOLS bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;, const str &amp;, const std::set&lt; sspair &gt; &amp;)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Tests if a set of str,str pairs contains an entry matching two given strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="116" column="25" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="116" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a4b07a1668e28da0bd942eb8987d63316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const sspair &amp;, const std::set&lt; sspair &gt; &amp;)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &amp;</type>
          <defname>quantity</defname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &amp;</type>
          <defname>set</defname>
        </param>
        <briefdescription>
<para>Tests if a set of str,str pairs contains an entry matching a given pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="208" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="208" bodyend="211" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="119" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ae7e4e20d80d69acddb5999a53ed85e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::Utils::str_fixed_len</definition>
        <argsstring>(str, int)</argsstring>
        <name>str_fixed_len</name>
        <qualifiedname>Gambit::Utils::str_fixed_len</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <param>
          <type>int</type>
          <defname>len</defname>
        </param>
        <briefdescription>
<para>Created a str of a specified length. </para>
        </briefdescription>
        <detaileddescription>
<para>Created a std::string of a specified length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="214" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="214" bodyend="226" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="122" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a32de3b774e1ac67c95387f53eaa4d7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS void</type>
        <definition>void Gambit::Utils::strcpy2f</definition>
        <argsstring>(char *, int, str)</argsstring>
        <name>strcpy2f</name>
        <qualifiedname>Gambit::Utils::strcpy2f</qualifiedname>
        <param>
          <type>char *</type>
          <defname>arr</defname>
        </param>
        <param>
          <type>int</type>
          <defname>len</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Copy a str to a character array, stripping the null termination character. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy a std::string to a character array, stripping the null termination character. Good for sending to Fortran. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="241" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="241" bodyend="246" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="125" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ab50f1b4aef2cd4ab820abd9bcf416bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::endsWith</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;suffix)</argsstring>
        <name>endsWith</name>
        <qualifiedname>Gambit::Utils::endsWith</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Checks whether <lsquo/>str<rsquo/> ends with <lsquo/>suffix<rsquo/>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="453" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="453" bodyend="462" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="128" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a3ce78eb95b663a09a03cddc63946f135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::startsWith</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;prefix, bool case_sensitive=true)</argsstring>
        <name>startsWith</name>
        <qualifiedname>Gambit::Utils::startsWith</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Checks whether <lsquo/>str<rsquo/> begins with <lsquo/>prefix<rsquo/>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="465" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="465" bodyend="480" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="131" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a332b3e7f51f8a89f8188552daa349187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::iequals</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b, bool case_sensitive=false)</argsstring>
        <name>iequals</name>
        <qualifiedname>Gambit::Utils::iequals</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>case_sensitive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Perform a (possibly) case-insensitive string comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>Perform a simple case-insensitive string comparison From: <ulink url="https://stackoverflow.com/a/4119881/1447953">https://stackoverflow.com/a/4119881/1447953</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="250" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="250" bodyend="261" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="134" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ac7fb9c625cf6ec2fefc4365a3243921e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; Gambit::Utils::split</definition>
        <argsstring>(const std::string &amp;input, const std::string &amp;delimiter)</argsstring>
        <name>split</name>
        <qualifiedname>Gambit::Utils::split</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>Split string into vector of strings, using a delimiter string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="264" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="264" bodyend="269" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="137" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a26794789f5b08061d4a17c575999802a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::string</type>
        <definition>std::string Gambit::Utils::strtolower</definition>
        <argsstring>(const std::string &amp;a)</argsstring>
        <name>strtolower</name>
        <qualifiedname>Gambit::Utils::strtolower</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Convert a whole string to lowercase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="272" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="272" bodyend="279" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="140" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a4b5593288f0fd37b9a5eaf17cdb34253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::string</type>
        <definition>std::string Gambit::Utils::quote_if_contains_commas</definition>
        <argsstring>(str)</argsstring>
        <name>quote_if_contains_commas</name>
        <qualifiedname>Gambit::Utils::quote_if_contains_commas</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>in</defname>
        </param>
        <briefdescription>
<para>Enclose a string in quotation marks if it contains commas. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="483" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="483" bodyend="493" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="143" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa220fd5aed1070ecf2636aacdfd87b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * Gambit::Utils::beginA</definition>
        <argsstring>(T(&amp;arr)[N])</argsstring>
        <name>beginA</name>
        <qualifiedname>Gambit::Utils::beginA</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Get pointers to beginning and end of array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="163" column="7" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a09e20dc39fa49bd759c9642de56deebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * Gambit::Utils::endA</definition>
        <argsstring>(T(&amp;arr)[N])</argsstring>
        <name>endA</name>
        <qualifiedname>Gambit::Utils::endA</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="165" column="7" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aec08e51e0cbe7ff1bffca6d9f6915990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Set1</type>
          </param>
          <param>
            <type>class Set2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Utils::is_disjoint</definition>
        <argsstring>(const Set1 &amp;set1, const Set2 &amp;set2)</argsstring>
        <name>is_disjoint</name>
        <qualifiedname>Gambit::Utils::is_disjoint</qualifiedname>
        <param>
          <type>const Set1 &amp;</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const Set2 &amp;</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
<para>Test if two sets are disjoint (works on any sorted std container I think) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="170" column="10" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="170" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1affb535fe86b05245b1e137af76905a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        <definition>const std::string &amp; Gambit::Utils::ensure_path_exists</definition>
        <argsstring>(const str &amp;)</argsstring>
        <name>ensure_path_exists</name>
        <qualifiedname>Gambit::Utils::ensure_path_exists</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>path</defname>
        </param>
        <briefdescription>
<para>Ensure that a path exists (and then return the path, for chaining purposes) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="282" column="23" bodyfile="Utils/src/util_functions.cpp" bodystart="282" bodyend="293" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="194" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a06db2efbb6a1f3dcd729015fe8ca9ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::file_exists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>file_exists</name>
        <qualifiedname>Gambit::Utils::file_exists</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Check if a file exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="296" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="296" bodyend="302" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="197" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a6feb516a1b35c3dcbe98e9097f4b56b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::vector&lt; std::string &gt; Gambit::Utils::ls_dir</definition>
        <argsstring>(const str &amp;dir)</argsstring>
        <name>ls_dir</name>
        <qualifiedname>Gambit::Utils::ls_dir</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return a vector of strings listing the contents of a directory (POSIX) </para>
        </briefdescription>
        <detaileddescription>
<para>Return a vector of strings listing the contents of a directory (POSIX) Based on <ulink url="http://www.gnu.org/software/libtool/manual/libc/Simple-Directory-Lister.html">http://www.gnu.org/software/libtool/manual/libc/Simple-Directory-Lister.html</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="306" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="306" bodyend="328" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="200" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a31467c5d69da824094c1c501fb577aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>std::string Gambit::Utils::dir_name</definition>
        <argsstring>(const str &amp;path)</argsstring>
        <name>dir_name</name>
        <qualifiedname>Gambit::Utils::dir_name</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get directory name from full path+filename (POSIX) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="331" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="331" bodyend="338" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="203" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ab41966eb6148741a7553951bd360c875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>std::string Gambit::Utils::base_name</definition>
        <argsstring>(const str &amp;path)</argsstring>
        <name>base_name</name>
        <qualifiedname>Gambit::Utils::base_name</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get file name from full path+filename (POSIX) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="341" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="341" bodyend="348" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="206" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a32de1511f8fc1f997c6808ee0a75143b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS int</type>
        <definition>int Gambit::Utils::remove_all_files_in</definition>
        <argsstring>(const str &amp;dirname, bool error_if_absent=true)</argsstring>
        <name>remove_all_files_in</name>
        <qualifiedname>Gambit::Utils::remove_all_files_in</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>dirname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>error_if_absent</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Delete all files in a directory (does not act recursively) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="351" column="9" bodyfile="Utils/src/util_functions.cpp" bodystart="351" bodyend="380" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="209" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a007a388ac6b5fe2de7b8e42a3f5e11be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>std::string Gambit::Utils::return_time_and_date</definition>
        <argsstring>(const time_point &amp;in)</argsstring>
        <name>return_time_and_date</name>
        <qualifiedname>Gambit::Utils::return_time_and_date</qualifiedname>
        <param>
          <type>const time_point &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Get date and time. </para>
        </briefdescription>
        <detaileddescription>
<para>Return (locally defined) date and time corresponding to time_point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="389" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="389" bodyend="396" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="218" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a4eb57caa47920b97661c31a2a6d36db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::are_similar</definition>
        <argsstring>(const str &amp;s1, const str &amp;s2)</argsstring>
        <name>are_similar</name>
        <qualifiedname>Gambit::Utils::are_similar</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two strings are a &quot;close&quot; match Used for &quot;did you mean?&quot; type checking during command line argument processing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="400" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="400" bodyend="406" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="222" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa8eeb84d029f52c34da8cf359643e2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::check1</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2)</argsstring>
        <name>check1</name>
        <qualifiedname>Gambit::Utils::check1</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>true if s1 can be obtained by deleting one character from s2 </para>
        </briefdescription>
        <detaileddescription>
<para>Sub-check for are_similar. true if s1 can be obtained by deleting one character from s2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="409" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="409" bodyend="423" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="226" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a5ab20c20fb620d82e9005b2a7a518c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::check2</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2)</argsstring>
        <name>check2</name>
        <qualifiedname>Gambit::Utils::check2</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>true if s1 can be obtained from s2 by changing no more than X characters (X=2 for now) </para>
        </briefdescription>
        <detaileddescription>
<para>Sub-check for are_similar. true if s1 can be obtained from s2 by changing no more than X characters (X=2 for now) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="426" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="426" bodyend="443" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="230" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ad4bad72f7ba7f1304b1aff783d3debea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS double</type>
        <definition>double Gambit::Utils::sqr</definition>
        <argsstring>(double a)</argsstring>
        <name>sqr</name>
        <qualifiedname>Gambit::Utils::sqr</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>returns square of double - saves tedious repetition </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="446" column="12" bodyfile="Utils/src/util_functions.cpp" bodystart="446" bodyend="449" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="233" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa1b37757040609429ce8eaabf9737567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS bool</type>
        <definition>bool Gambit::Utils::isInteger</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>isInteger</name>
        <qualifiedname>Gambit::Utils::isInteger</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a string represents an integer From: <ulink url="http://stackoverflow.com/a/2845275/1447953">http://stackoverflow.com/a/2845275/1447953</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="230" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="230" bodyend="238" declfile="Utils/include/gambit/Utils/util_functions.hpp" declline="243" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a2e33ae38f2ef6b0c92754cdd2a7ca834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Utils::dummy_function</definition>
        <argsstring>()</argsstring>
        <name>dummy_function</name>
        <qualifiedname>Gambit::Utils::dummy_function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="246" column="21" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1ad31ddd95449e34dfa7fc775265aa2f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Utils::dummy_function</definition>
        <argsstring>(T one)</argsstring>
        <name>dummy_function</name>
        <qualifiedname>Gambit::Utils::dummy_function</qualifiedname>
        <param>
          <type>T</type>
          <declname>one</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="247" column="21" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1aa97d5187478a565300ce621b979e5f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Utils::dummy_function</definition>
        <argsstring>(T1 first, T... args)</argsstring>
        <name>dummy_function</name>
        <qualifiedname>Gambit::Utils::dummy_function</qualifiedname>
        <param>
          <type>T1</type>
          <declname>first</declname>
        </param>
        <param>
          <type>T...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="252" column="23" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8hpp_1a2a4727984a24b69b1a5109284f6f475d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Utils::masked_erase</definition>
        <argsstring>(Container&lt; std::pair&lt; T, bool &gt;, std::allocator&lt; std::pair&lt; T, bool &gt; &gt; &gt; &amp;c)</argsstring>
        <name>masked_erase</name>
        <qualifiedname>Gambit::Utils::masked_erase</qualifiedname>
        <param>
          <type>Container&lt; std::pair&lt; T, bool &gt;, std::allocator&lt; std::pair&lt; T, bool &gt; &gt; &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expunge entries in a container of std::pairs for which the second (boolean) value of the pair is false. Useful for allowing evaluation of a removal criterion over the whole container in parallel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="261" column="10" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="interp__collection_8cpp_1a1bb585fd41764ea4f4aa66bab949dd7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Utils::InterpIter</definition>
        <argsstring>(int Ntemp, double xi_1, double xi_2, std::vector&lt; double &gt; &amp;fi, double test)</argsstring>
        <name>InterpIter</name>
        <qualifiedname>Gambit::Utils::InterpIter</qualifiedname>
        <param>
          <type>int</type>
          <declname>Ntemp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xi_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xi_2</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>fi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/interp_collection.cpp" line="1177" column="10" bodyfile="Utils/src/interp_collection.cpp" bodystart="1177" bodyend="1197" declfile="Utils/src/interp_collection.cpp" declline="696" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="interp__collection_8cpp_1aedda42f2abec8d12400f5808f6d8188f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Utils::linearinterp1D</definition>
        <argsstring>(double x1, double x2, double y1, double y2, double xtest)</argsstring>
        <name>linearinterp1D</name>
        <qualifiedname>Gambit::Utils::linearinterp1D</qualifiedname>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xtest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/interp_collection.cpp" line="1169" column="12" bodyfile="Utils/src/interp_collection.cpp" bodystart="1169" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8cpp_1a60bcfc853314eb33049f680913bab51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Utils::get_GAMBIT_root_dir</definition>
        <argsstring>()</argsstring>
        <name>get_GAMBIT_root_dir</name>
        <qualifiedname>Gambit::Utils::get_GAMBIT_root_dir</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>The initial assumption is that this is provided by CMake via the GAMBIT_RUN_DIR variable However, in situations where GAMBIT is built in some temporary directory and then moved (as occurs in the pip installation of pyScannerBit), then we need to locate the root directory via an environment variable at runtime instead. If this environment variable is set then it will override the value set at build time.</para>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="65" column="17" bodyfile="Utils/src/util_functions.cpp" bodystart="65" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8cpp_1a57798e61c9ebb61c62cb557bb45946ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;el, const std::set&lt; std::pair&lt; str, str &gt; &gt; &amp;set)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const std::set&lt; std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Test if a set of str,str pairs contains any entry with first element matching a given string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="195" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="195" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="util__functions_8cpp_1af1c80a9d9e42468d243c920200f6220f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Utils::sspairset_contains</definition>
        <argsstring>(const str &amp;el1, const str &amp;el2, const std::set&lt; std::pair&lt; str, str &gt; &gt; &amp;set)</argsstring>
        <name>sspairset_contains</name>
        <qualifiedname>Gambit::Utils::sspairset_contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>el1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>el2</declname>
        </param>
        <param>
          <type>const std::set&lt; std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Tests if a set of str,str pairs contains an entry matching two given strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/util_functions.cpp" line="202" column="10" bodyfile="Utils/src/util_functions.cpp" bodystart="202" bodyend="205"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Elements/include/gambit/Elements/equivalency_singleton.hpp" line="25" column="3"/>
  </compounddef>
</doxygen>
