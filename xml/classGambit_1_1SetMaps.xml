<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1SetMaps" kind="class" language="C++" prot="public">
    <compoundname>Gambit::SetMaps</compoundname>
    <includes refid="spec__fptrfinder_8hpp" local="no">spec_fptrfinder.hpp</includes>
    <templateparamlist>
      <param>
        <type>class HostSpec</type>
      </param>
      <param>
        <type>class MTag</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" prot="public" static="no">
        <type>HostSpec::D</type>
        <definition>typedef HostSpec::D Gambit::SetMaps&lt; HostSpec, MTag &gt;::D</definition>
        <argsstring></argsstring>
        <name>D</name>
        <qualifiedname>Gambit::SetMaps::D</qualifiedname>
        <briefdescription>
<para>Type of derived spectrum wrapper is known to HostSpec as D. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="92" column="39" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGambit_1_1SetMaps_1abf0dc5040536e7fa0042887e8169ffc5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FptrFinder&lt; HostSpec, MTag &gt;</definition>
        <argsstring></argsstring>
        <name>FptrFinder&lt; HostSpec, MTag &gt;</name>
        <qualifiedname>Gambit::SetMaps::FptrFinder&lt; HostSpec, MTag &gt;</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1FptrFinder" kindref="compound">FptrFinder</ref>&lt; HostSpec, MTag &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="114" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a97a47beea0812410f16dd6aab8175f1f" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string Gambit::SetMaps&lt; HostSpec, MTag &gt;::label_</definition>
        <argsstring></argsstring>
        <name>label_</name>
        <qualifiedname>Gambit::SetMaps::label_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="119" column="28" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a822105b7af5365859f256278ec9dfe42" prot="private" static="no" mutable="no">
        <type>HostSpec *const</type>
        <definition>HostSpec* const Gambit::SetMaps&lt; HostSpec, MTag &gt;::fakethis_</definition>
        <argsstring></argsstring>
        <name>fakethis_</name>
        <qualifiedname>Gambit::SetMaps::fakethis_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="120" column="25" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a5f992966e3c2db8dc7d57960e06f3cde" prot="private" static="no" mutable="no">
        <type>const HostSpec *const</type>
        <definition>const HostSpec* const Gambit::SetMaps&lt; HostSpec, MTag &gt;::const_fakethis_</definition>
        <argsstring></argsstring>
        <name>const_fakethis_</name>
        <qualifiedname>Gambit::SetMaps::const_fakethis_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="121" column="31" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1aeb7930054785f34f8783426048c8d14f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::SetMaps&lt; HostSpec, MTag &gt;::no_overrides_</definition>
        <argsstring></argsstring>
        <name>no_overrides_</name>
        <qualifiedname>Gambit::SetMaps::no_overrides_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="122" column="15" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1ad7af44bca1537b0a4cb6876da3a4e99f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::SetMaps&lt; HostSpec, MTag &gt;::override_only_</definition>
        <argsstring></argsstring>
        <name>override_only_</name>
        <qualifiedname>Gambit::SetMaps::override_only_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="123" column="15" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a7bdbf11493d1d1c6aedf116aa8247c73" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0 *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap0* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0_</definition>
        <argsstring></argsstring>
        <name>map0_</name>
        <qualifiedname>Gambit::SetMaps::map0_</qualifiedname>
        <briefdescription>
<para>Maps from derived class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="126" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a216670e7b374e132691b25115f3e2c90" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1 *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap1* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1_</definition>
        <argsstring></argsstring>
        <name>map1_</name>
        <qualifiedname>Gambit::SetMaps::map1_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="127" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a5ddfc6804fd5b290b0f7937c94a284f9" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2 *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap2* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2_</definition>
        <argsstring></argsstring>
        <name>map2_</name>
        <qualifiedname>Gambit::SetMaps::map2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="128" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a171e1406f0282eaa520d5c910284f9a4" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0W *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap0W* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0W_</definition>
        <argsstring></argsstring>
        <name>map0W_</name>
        <qualifiedname>Gambit::SetMaps::map0W_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="129" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a842fa9e4ee3b33d2f99ac626a22443e4" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1W *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap1W* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1W_</definition>
        <argsstring></argsstring>
        <name>map1W_</name>
        <qualifiedname>Gambit::SetMaps::map1W_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="130" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a746a9bc0056bb605d4e738e67e8b62e8" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2W *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap2W* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2W_</definition>
        <argsstring></argsstring>
        <name>map2W_</name>
        <qualifiedname>Gambit::SetMaps::map2W_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="131" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a36ec351dfc49bf10c28d0910a32bb6e0" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0_extraM *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap0_extraM* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0M_</definition>
        <argsstring></argsstring>
        <name>map0M_</name>
        <qualifiedname>Gambit::SetMaps::map0M_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="132" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1aea35af821a3cb628a0de135cf6603a15" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1_extraM *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap1_extraM* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1M_</definition>
        <argsstring></argsstring>
        <name>map1M_</name>
        <qualifiedname>Gambit::SetMaps::map1M_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="133" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a3ad5fc6da15f01967ae04b8e757aac1c" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2_extraM *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap2_extraM* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2M_</definition>
        <argsstring></argsstring>
        <name>map2M_</name>
        <qualifiedname>Gambit::SetMaps::map2M_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="134" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a370ee7609d34b481f1e2874babc9f76c" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0_extraI *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap0_extraI* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0I_</definition>
        <argsstring></argsstring>
        <name>map0I_</name>
        <qualifiedname>Gambit::SetMaps::map0I_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="135" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a043fe4396cde7c2bf33f1463011c016e" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1_extraI *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap1_extraI* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1I_</definition>
        <argsstring></argsstring>
        <name>map1I_</name>
        <qualifiedname>Gambit::SetMaps::map1I_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="136" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a6a646c102eb4ec25486a75722450da17" prot="private" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2_extraI *</type>
        <definition>const MapTypes&lt;D,MTag&gt;::fmap2_extraI* Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2I_</definition>
        <argsstring></argsstring>
        <name>map2I_</name>
        <qualifiedname>Gambit::SetMaps::map2I_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="137" column="49" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a01c4eb7e1c6825d30a66b99b0fd75f8e" prot="private" static="no" mutable="no">
        <type>const std::map&lt; std::string, double &gt; *</type>
        <definition>const std::map&lt;std::string,double&gt;* Gambit::SetMaps&lt; HostSpec, MTag &gt;::omap0_</definition>
        <argsstring></argsstring>
        <name>omap0_</name>
        <qualifiedname>Gambit::SetMaps::omap0_</qualifiedname>
        <briefdescription>
<para>Maps from base class (override maps, only used in getter case) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="140" column="53" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1afcff88f3c7fcf6db0847a8a00cec5753" prot="private" static="no" mutable="no">
        <type>const std::map&lt; std::string, std::map&lt; int, double &gt; &gt; *</type>
        <definition>const std::map&lt;std::string,std::map&lt;int,double&gt; &gt;* Gambit::SetMaps&lt; HostSpec, MTag &gt;::omap1_</definition>
        <argsstring></argsstring>
        <name>omap1_</name>
        <qualifiedname>Gambit::SetMaps::omap1_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="141" column="39" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1SetMaps_1a9a99a442235713dee287f57b36be4419" prot="private" static="no" mutable="no">
        <type>const std::map&lt; std::string, std::map&lt; int, std::map&lt; int, double &gt; &gt; &gt; *</type>
        <definition>const std::map&lt;std::string,std::map&lt;int,std::map&lt;int,double&gt; &gt; &gt;* Gambit::SetMaps&lt; HostSpec, MTag &gt;::omap2_</definition>
        <argsstring></argsstring>
        <name>omap2_</name>
        <qualifiedname>Gambit::SetMaps::omap2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="142" column="25" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a989b2fabfac7e66ec3947d3919d74e5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::SetMaps&lt; HostSpec, MTag &gt;::SetMaps</definition>
        <argsstring>(const std::string &amp;label, HostSpec *const fakethis)</argsstring>
        <name>SetMaps</name>
        <qualifiedname>Gambit::SetMaps::SetMaps</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>HostSpec *const</type>
          <declname>fakethis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="44" column="10" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="44" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a3ed303ef55d487bb199ee206cce5387f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::SetMaps&lt; HostSpec, MTag &gt;::SetMaps</definition>
        <argsstring>(const std::string &amp;label, const HostSpec *const fakethis)</argsstring>
        <name>SetMaps</name>
        <qualifiedname>Gambit::SetMaps::SetMaps</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const HostSpec *const</type>
          <declname>fakethis</declname>
        </param>
        <briefdescription>
<para>Version to deal with const host object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="68" column="10" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="68" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a9062fe5ffc6e517830211616c83758ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap0 &amp;map0)</argsstring>
        <name>map0</name>
        <qualifiedname>Gambit::SetMaps::map0</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0 &amp;</type>
          <declname>map0</declname>
        </param>
        <briefdescription>
<para>derived class maps </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="95" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a9336da911cd7186271fac56616049d58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap1 &amp;map1)</argsstring>
        <name>map1</name>
        <qualifiedname>Gambit::SetMaps::map1</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1 &amp;</type>
          <declname>map1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="96" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a2da1699445c5025894ac339924cefe65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap2 &amp;map2)</argsstring>
        <name>map2</name>
        <qualifiedname>Gambit::SetMaps::map2</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2 &amp;</type>
          <declname>map2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="97" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1ae27d93e62adce8b9990bcc8ac6dfac94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0W</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap0W &amp;map0W)</argsstring>
        <name>map0W</name>
        <qualifiedname>Gambit::SetMaps::map0W</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0W &amp;</type>
          <declname>map0W</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="98" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a10cb7234217e1102bf7de5c46c3f8d1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1W</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap1W &amp;map1W)</argsstring>
        <name>map1W</name>
        <qualifiedname>Gambit::SetMaps::map1W</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1W &amp;</type>
          <declname>map1W</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="99" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1ab5df1552589b8a5e69bd3942377467a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2W</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap2W &amp;map2W)</argsstring>
        <name>map2W</name>
        <qualifiedname>Gambit::SetMaps::map2W</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2W &amp;</type>
          <declname>map2W</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="100" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a13dc70486e0916fdcda5327df9ac85df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0M</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap0_extraM &amp;map0M)</argsstring>
        <name>map0M</name>
        <qualifiedname>Gambit::SetMaps::map0M</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0_extraM &amp;</type>
          <declname>map0M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="101" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1abe8dfb6f7234582a8c4e799d27e8b676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1M</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap1_extraM &amp;map1M)</argsstring>
        <name>map1M</name>
        <qualifiedname>Gambit::SetMaps::map1M</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1_extraM &amp;</type>
          <declname>map1M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="102" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a9c8e51f029af4dfa9c4d69fd532b32bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2M</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap2_extraM &amp;map2M)</argsstring>
        <name>map2M</name>
        <qualifiedname>Gambit::SetMaps::map2M</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2_extraM &amp;</type>
          <declname>map2M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="103" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a2cc339776d8eb636c535ad3e8479162f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map0I</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap0_extraI &amp;map0I)</argsstring>
        <name>map0I</name>
        <qualifiedname>Gambit::SetMaps::map0I</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap0_extraI &amp;</type>
          <declname>map0I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="104" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1aeba21b8d9abe4dca49d9063dc41796a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map1I</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap1_extraI &amp;map1I)</argsstring>
        <name>map1I</name>
        <qualifiedname>Gambit::SetMaps::map1I</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap1_extraI &amp;</type>
          <declname>map1I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="105" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a0b79e71672f284ad6d776fb34fd61933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::map2I</definition>
        <argsstring>(const typename MapTypes&lt; D, MTag &gt;::fmap2_extraI &amp;map2I)</argsstring>
        <name>map2I</name>
        <qualifiedname>Gambit::SetMaps::map2I</qualifiedname>
        <param>
          <type>const typename <ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; <ref refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" kindref="member">D</ref>, MTag &gt;::fmap2_extraI &amp;</type>
          <declname>map2I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="106" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1af3d4542a52ae27d0b47008c3c09d57de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::omap0</definition>
        <argsstring>(const std::map&lt; std::string, double &gt; &amp;om0)</argsstring>
        <name>omap0</name>
        <qualifiedname>Gambit::SetMaps::omap0</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, double &gt; &amp;</type>
          <declname>om0</declname>
        </param>
        <briefdescription>
<para>base class override maps </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="108" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1af486e7667ee5fb165d4c77e5031a599d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::omap1</definition>
        <argsstring>(const std::map&lt; std::string, std::map&lt; int, double &gt; &gt; &amp;om1)</argsstring>
        <name>omap1</name>
        <qualifiedname>Gambit::SetMaps::omap1</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, std::map&lt; int, double &gt; &gt; &amp;</type>
          <declname>om1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="109" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a2fd80155a5179c9ce7a21aa2841b0f34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::omap2</definition>
        <argsstring>(const std::map&lt; std::string, std::map&lt; int, std::map&lt; int, double &gt; &gt; &gt; &amp;om2)</argsstring>
        <name>omap2</name>
        <qualifiedname>Gambit::SetMaps::omap2</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, std::map&lt; int, std::map&lt; int, double &gt; &gt; &gt; &amp;</type>
          <declname>om2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="110" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1a6addb59e5765c1f52ee0363424e27350" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::no_overrides</definition>
        <argsstring>(const bool flag)</argsstring>
        <name>no_overrides</name>
        <qualifiedname>Gambit::SetMaps::no_overrides</qualifiedname>
        <param>
          <type>const bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Flag to disable searching of override maps (for retrieving original, unoverriden values) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="112" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1SetMaps_1ab222074148f5d7fed29267e79dce191d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> &amp;</type>
        <definition>SetMaps &amp; Gambit::SetMaps&lt; HostSpec, MTag &gt;::override_only</definition>
        <argsstring>(const bool flag)</argsstring>
        <name>override_only</name>
        <qualifiedname>Gambit::SetMaps::override_only</qualifiedname>
        <param>
          <type>const bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Flag to permit searching only override maps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="114" column="18" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classGambit_1_1FptrFinder" kindref="compound">FptrFinder</ref> friend class for implementing named parameter idiom. </para>
    </briefdescription>
    <detaileddescription>
<para>Forward declarations related to <ref refid="classGambit_1_1FptrFinder" kindref="compound">FptrFinder</ref> class. </para>
    </detaileddescription>
    <location file="Elements/include/gambit/Elements/spec_fptrfinder.hpp" line="41" column="4" bodyfile="Elements/include/gambit/Elements/spec_fptrfinder.hpp" bodystart="42" bodyend="143"/>
    <listofallmembers>
      <member refid="classGambit_1_1SetMaps_1a5f992966e3c2db8dc7d57960e06f3cde" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>const_fakethis_</name></member>
      <member refid="classGambit_1_1SetMaps_1a6c8cb6bb15f59ccb69c636d075da78ff" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>D</name></member>
      <member refid="classGambit_1_1SetMaps_1a822105b7af5365859f256278ec9dfe42" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>fakethis_</name></member>
      <member refid="classGambit_1_1SetMaps_1abf0dc5040536e7fa0042887e8169ffc5" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>FptrFinder&lt; HostSpec, MTag &gt;</name></member>
      <member refid="classGambit_1_1SetMaps_1a97a47beea0812410f16dd6aab8175f1f" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>label_</name></member>
      <member refid="classGambit_1_1SetMaps_1a9062fe5ffc6e517830211616c83758ae" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0</name></member>
      <member refid="classGambit_1_1SetMaps_1a7bdbf11493d1d1c6aedf116aa8247c73" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0_</name></member>
      <member refid="classGambit_1_1SetMaps_1a2cc339776d8eb636c535ad3e8479162f" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0I</name></member>
      <member refid="classGambit_1_1SetMaps_1a370ee7609d34b481f1e2874babc9f76c" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0I_</name></member>
      <member refid="classGambit_1_1SetMaps_1a13dc70486e0916fdcda5327df9ac85df" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0M</name></member>
      <member refid="classGambit_1_1SetMaps_1a36ec351dfc49bf10c28d0910a32bb6e0" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0M_</name></member>
      <member refid="classGambit_1_1SetMaps_1ae27d93e62adce8b9990bcc8ac6dfac94" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0W</name></member>
      <member refid="classGambit_1_1SetMaps_1a171e1406f0282eaa520d5c910284f9a4" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map0W_</name></member>
      <member refid="classGambit_1_1SetMaps_1a9336da911cd7186271fac56616049d58" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1</name></member>
      <member refid="classGambit_1_1SetMaps_1a216670e7b374e132691b25115f3e2c90" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1_</name></member>
      <member refid="classGambit_1_1SetMaps_1aeba21b8d9abe4dca49d9063dc41796a0" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1I</name></member>
      <member refid="classGambit_1_1SetMaps_1a043fe4396cde7c2bf33f1463011c016e" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1I_</name></member>
      <member refid="classGambit_1_1SetMaps_1abe8dfb6f7234582a8c4e799d27e8b676" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1M</name></member>
      <member refid="classGambit_1_1SetMaps_1aea35af821a3cb628a0de135cf6603a15" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1M_</name></member>
      <member refid="classGambit_1_1SetMaps_1a10cb7234217e1102bf7de5c46c3f8d1d" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1W</name></member>
      <member refid="classGambit_1_1SetMaps_1a842fa9e4ee3b33d2f99ac626a22443e4" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map1W_</name></member>
      <member refid="classGambit_1_1SetMaps_1a2da1699445c5025894ac339924cefe65" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2</name></member>
      <member refid="classGambit_1_1SetMaps_1a5ddfc6804fd5b290b0f7937c94a284f9" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2_</name></member>
      <member refid="classGambit_1_1SetMaps_1a0b79e71672f284ad6d776fb34fd61933" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2I</name></member>
      <member refid="classGambit_1_1SetMaps_1a6a646c102eb4ec25486a75722450da17" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2I_</name></member>
      <member refid="classGambit_1_1SetMaps_1a9c8e51f029af4dfa9c4d69fd532b32bf" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2M</name></member>
      <member refid="classGambit_1_1SetMaps_1a3ad5fc6da15f01967ae04b8e757aac1c" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2M_</name></member>
      <member refid="classGambit_1_1SetMaps_1ab5df1552589b8a5e69bd3942377467a9" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2W</name></member>
      <member refid="classGambit_1_1SetMaps_1a746a9bc0056bb605d4e738e67e8b62e8" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>map2W_</name></member>
      <member refid="classGambit_1_1SetMaps_1a6addb59e5765c1f52ee0363424e27350" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>no_overrides</name></member>
      <member refid="classGambit_1_1SetMaps_1aeb7930054785f34f8783426048c8d14f" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>no_overrides_</name></member>
      <member refid="classGambit_1_1SetMaps_1af3d4542a52ae27d0b47008c3c09d57de" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>omap0</name></member>
      <member refid="classGambit_1_1SetMaps_1a01c4eb7e1c6825d30a66b99b0fd75f8e" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>omap0_</name></member>
      <member refid="classGambit_1_1SetMaps_1af486e7667ee5fb165d4c77e5031a599d" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>omap1</name></member>
      <member refid="classGambit_1_1SetMaps_1afcff88f3c7fcf6db0847a8a00cec5753" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>omap1_</name></member>
      <member refid="classGambit_1_1SetMaps_1a2fd80155a5179c9ce7a21aa2841b0f34" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>omap2</name></member>
      <member refid="classGambit_1_1SetMaps_1a9a99a442235713dee287f57b36be4419" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>omap2_</name></member>
      <member refid="classGambit_1_1SetMaps_1ab222074148f5d7fed29267e79dce191d" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>override_only</name></member>
      <member refid="classGambit_1_1SetMaps_1ad7af44bca1537b0a4cb6876da3a4e99f" prot="private" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>override_only_</name></member>
      <member refid="classGambit_1_1SetMaps_1a989b2fabfac7e66ec3947d3919d74e5e" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>SetMaps</name></member>
      <member refid="classGambit_1_1SetMaps_1a3ed303ef55d487bb199ee206cce5387f" prot="public" virt="non-virtual"><scope>Gambit::SetMaps</scope><name>SetMaps</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
