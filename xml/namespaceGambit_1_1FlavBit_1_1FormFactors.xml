<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1FlavBit_1_1FormFactors" kind="namespace" language="C++">
    <compoundname>Gambit::FlavBit::FormFactors</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a3f08e963fd2633b856cbeae96ccf8ec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::K1R</definition>
        <argsstring>(int alpha, int beta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; mnu)</argsstring>
        <name>K1R</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::K1R</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="798" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="798" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a89b2ddfccf677fd56b20f2f6dc123b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::K2L</definition>
        <argsstring>(int alpha, int beta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>K2L</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::K2L</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="805" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="805" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1ae0763566666a4428ba09426b8b9751fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::K2R</definition>
        <argsstring>(int alpha, int beta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>K2R</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::K2R</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="812" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="812" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a5041df5a115cb19d88d69a2586054909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::AVLL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>AVLL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::AVLL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="819" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="819" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1ae355ca5935b245da9e38775ef205a0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::AVLR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>AVLR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::AVLR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="824" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="824" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1af1d38b3ba2448e800e777290d557de34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::AVRL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>AVRL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::AVRL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="829" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="829" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1afa90f089a7d8bb7e4bb485632f3b5b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::AVRR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>AVRR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::AVRR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="834" column="19" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="834" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1ac1875af82b92f2c51eac1763d9d0be8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::ASLL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>ASLL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::ASLL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="839" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="839" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a24f9d1060abfaf8dc2f0f447d198e1cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::ASLR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>ASLR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::ASLR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="844" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="844" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1aadbf5456bb6efbe6c6384b29876c2c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::ASRL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>ASRL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::ASRL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="849" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="849" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1ae786cc91eeb99405c1190a273ca7634c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::ASRR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>ASRR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::ASRR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="854" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="854" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a4f1156632cb430055b1639f4dd1ff9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BVLL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>BVLL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BVLL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="859" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="859" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a56b9ac5bc4c03c3dcbe1940d6af34929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BVLR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>BVLR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BVLR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="864" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="864" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1acf653320ff4817276a592ed9b76bd833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BVRL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>BVRL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BVRL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="869" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="869" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a7fc1c9a55c681d430a4da29e7f6bd348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BVRR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>BVRR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BVRR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="874" column="19" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="874" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a9e167886b3c2ccb56d92064ac8fd3ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BSLL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>BSLL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BSLL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="879" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="879" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a81d9819e3a953ea8d1ecfbee9de44903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BSLR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>BSLR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BSLR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="884" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="884" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1af15abb06f47bdb9ef5dcfc3f82b0ee20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BSRL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>BSRL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BSRL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="889" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="889" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1af59c68455c99badf54b4b90158983c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::BSRR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>BSRR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::BSRR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="894" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="894" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a774a8b21c40cada7b0ff3a28cf844375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CVLL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>CVLL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CVLL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="899" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="899" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a5cf10f45343341d25a25f4839daf6c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CVLR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>CVLR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CVLR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="904" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="904" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a90baf8fd689bd7e9002609248752d3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CVRL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>CVRL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CVRL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="909" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a8349881a181aaf4f764f7760429a250c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CVRR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu)</argsstring>
        <name>CVRR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CVRR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="914" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="914" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a964131e91c5604dd1025b60f5f7e92f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CSLL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>CSLL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CSLL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="919" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="919" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a61c0cbc73af57c68e97d5d9b185d945d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CSLR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>CSLR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CSLR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="924" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="924" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1a2ae827715b0a7445e60e65d5ea8f8a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CSRL</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>CSRL</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CSRL</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="929" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="929" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="flav__loop__functions_8hpp_1aec08eaca2c1098e96330803687004304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::FlavBit::FormFactors::CSRR</definition>
        <argsstring>(int alpha, int beta, int gamma, int delta, SMInputs sminputs, Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt; U, std::vector&lt; double &gt; ml, std::vector&lt; double &gt; mnu, double mh)</argsstring>
        <name>CSRR</name>
        <qualifiedname>Gambit::FlavBit::FormFactors::CSRR</qualifiedname>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>Eigen::Matrix&lt; std::complex&lt; double &gt;, 3, 6 &gt;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>ml</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>mnu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="934" column="20" bodyfile="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" bodystart="934" bodyend="937"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="FlavBit/include/gambit/FlavBit/flav_loop_functions.hpp" line="795" column="5"/>
  </compounddef>
</doxygen>
