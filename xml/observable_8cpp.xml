<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="observable_8cpp" kind="file" language="C++">
    <compoundname>observable.cpp</compoundname>
    <includes refid="observable_8hpp" local="yes">gambit/Core/observable.hpp</includes>
    <includes refid="resolution__utilities_8hpp" local="yes">gambit/Core/resolution_utilities.hpp</includes>
    <includes refid="functors_8hpp" local="yes">gambit/Elements/functors.hpp</includes>
    <includes refid="type__equivalency_8hpp" local="yes">gambit/Elements/type_equivalency.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>gambit/Core/observable.hpp</label>
        <link refid="observable_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>gambit/Core/resolution_utilities.hpp</label>
        <link refid="resolution__utilities_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gambit/Core/rule.hpp</label>
        <link refid="rule_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>observable.cpp</label>
        <link refid="observable_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>gambit/Elements/functors.hpp</label>
        <link refid="functors_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>gambit/Elements/type_equivalency.hpp</label>
        <link refid="type__equivalency_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gambit/Logs/log_tags.hpp</label>
        <link refid="log__tags_8hpp"/>
      </node>
      <node id="66">
        <label>gambit/Logs/logger.hpp</label>
        <link refid="logger_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>gambit/Logs/logmaster.hpp</label>
        <link refid="logmaster_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>gambit/Utils/boost_fallbacks.hpp</label>
        <link refid="boost__fallbacks_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>gambit/Utils/cats.hpp</label>
        <link refid="Utils_2include_2gambit_2Utils_2cats_8hpp"/>
      </node>
      <node id="32">
        <label>gambit/Utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>gambit/Utils/export_symbols.hpp</label>
        <link refid="export__symbols_8hpp"/>
      </node>
      <node id="22">
        <label>gambit/Utils/local_info.hpp</label>
        <link refid="local__info_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gambit/Utils/model_parameters.hpp</label>
        <link refid="model__parameters_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
        <link refid="standalone__error__handlers_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gambit/Utils/stream_overloads.hpp</label>
        <link refid="stream__overloads_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>gambit/Utils/stringify.hpp</label>
        <link refid="stringify_8hpp"/>
      </node>
      <node id="60">
        <label>gambit/Utils/util_functions.hpp</label>
        <link refid="util__functions_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>gambit/Utils/util_macros.hpp</label>
        <link refid="util__macros_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gambit/Utils/util_types.hpp</label>
        <link refid="util__types_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>gambit/Utils/variadic_functions.hpp</label>
        <link refid="variadic__functions_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>gambit/Utils/yaml_node_utility.hpp</label>
        <link refid="yaml__node__utility_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>gambit/Utils/yaml_options.hpp</label>
        <link refid="yaml__options_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>gambit/Utils/yaml_variadic_functions.hpp</label>
        <link refid="yaml__variadic__functions_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>algorithm</label>
      </node>
      <node id="48">
        <label>array</label>
      </node>
      <node id="63">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="62">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="23">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="18">
        <label>boost/detail/workaround.hpp</label>
      </node>
      <node id="29">
        <label>boost/preprocessor/arithmetic/sub.hpp</label>
      </node>
      <node id="19">
        <label>boost/preprocessor/cat.hpp</label>
      </node>
      <node id="28">
        <label>boost/preprocessor/comparison/equal.hpp</label>
      </node>
      <node id="17">
        <label>boost/preprocessor/config/config.hpp</label>
      </node>
      <node id="27">
        <label>boost/preprocessor/control/if.hpp</label>
      </node>
      <node id="30">
        <label>boost/preprocessor/punctuation/comma.hpp</label>
      </node>
      <node id="31">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="25">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="26">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="16">
        <label>boost/version.hpp</label>
      </node>
      <node id="42">
        <label>cassert</label>
      </node>
      <node id="58">
        <label>chrono</label>
      </node>
      <node id="54">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>complex</label>
      </node>
      <node id="9">
        <label>cstring</label>
      </node>
      <node id="47">
        <label>deque</label>
      </node>
      <node id="34">
        <label>exception</label>
      </node>
      <node id="46">
        <label>forward_list</label>
      </node>
      <node id="40">
        <label>fstream</label>
      </node>
      <node id="61">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="39">
        <label>iostream</label>
      </node>
      <node id="53">
        <label>limits</label>
      </node>
      <node id="45">
        <label>list</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="64">
        <label>mkpath/mkpath.h</label>
      </node>
      <node id="8">
        <label>omp.h</label>
      </node>
      <node id="68">
        <label>ostream</label>
      </node>
      <node id="33">
        <label>set</label>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="41">
        <label>type_traits</label>
      </node>
      <node id="14">
        <label>unistd.h</label>
      </node>
      <node id="43">
        <label>unordered_map</label>
      </node>
      <node id="44">
        <label>unordered_set</label>
      </node>
      <node id="36">
        <label>utility</label>
      </node>
      <node id="35">
        <label>vector</label>
      </node>
      <node id="51">
        <label>yaml-cpp/yaml.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1DRes">Gambit::DRes</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Function implementations for observable class.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Pat Scott (<ulink url="mailto:patrickcolinscott@gmail.com">patrickcolinscott@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2022 Dec</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>Function<sp/>implementations<sp/>for<sp/>observable<sp/>class.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///<sp/><sp/>Authors<sp/>(add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify):</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///<sp/><sp/>\author<sp/>Pat<sp/>Scott</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(patrickcolinscott@gmail.com)</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/>\date<sp/>2022<sp/>Dec</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="observable_8hpp" kindref="compound">gambit/Core/observable.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resolution__utilities_8hpp" kindref="compound">gambit/Core/resolution_utilities.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="functors_8hpp" kindref="compound">gambit/Elements/functors.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__equivalency_8hpp" kindref="compound">gambit/Elements/type_equivalency.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DRes</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>True<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>passed<sp/>functor<sp/>matches<sp/>all<sp/>matchable<sp/>non-empty<sp/>fields<sp/>of<sp/>the<sp/>observable<sp/>(i.e.<sp/>everything<sp/>except<sp/>purpose,<sp/>dependencies,<sp/>backend_reqs,<sp/>functionChain<sp/>and<sp/>subcaps).</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1DRes_1_1Observable_1acbb50813900928ea8db8adca2b48267d" kindref="member">Observable::matches</ref>(functor*<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::type_equivalency&amp;<sp/>te)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="30"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m<sp/>=<sp/><ref refid="namespaceGambit_1_1DRes_1a6ca4116f647e0c01b07ef3bffea7f773" kindref="member">stringComp</ref><sp/>(<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1aa69434bf3b2705472d03e78e5c793ec1" kindref="member">capability</ref>,<sp/>f-&gt;capability()<sp/><sp/><sp/><sp/><sp/>)<sp/>and</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1_1DRes_1a667cf5e40a389d728c0f2da553e085de" kindref="member">typeComp</ref><sp/><sp/><sp/>(<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1afa3765b76984e255090c99a2d6c6a726" kindref="member">type</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;<ref refid="structGambit_1_1DRes_1_1Observable_1afa3765b76984e255090c99a2d6c6a726" kindref="member">type</ref>()<sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>te<sp/>)<sp/>and</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1_1DRes_1a6ca4116f647e0c01b07ef3bffea7f773" kindref="member">stringComp</ref><sp/>(<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1afb3895cc6d1ded6bfc2c7b280de0c694" kindref="member">function</ref>,<sp/><sp/><sp/>f-&gt;name()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>and</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1_1DRes_1a6ca4116f647e0c01b07ef3bffea7f773" kindref="member">stringComp</ref><sp/>(<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1a47d9c7261cd40c8546b4a607ecb24ca0" kindref="member">module</ref>,<sp/><sp/><sp/><sp/><sp/>f-&gt;origin()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(m<sp/>and<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1ae3918ceb671356bcd984a7db3e79e9d8" kindref="member">log_matches</ref>)<sp/>f-&gt;addMatchedObservable(this);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>m;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Whether<sp/>the<sp/>set<sp/>of<sp/>dependency<sp/>rules<sp/>subjugate<sp/>to<sp/>this<sp/>observable<sp/>allow<sp/>a<sp/>given<sp/>module<sp/>functor<sp/>or<sp/>not.<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1DRes_1_1Observable_1a0456652e2ce320ea2548a4e4f7f02bd5" kindref="member">Observable</ref>::<ref refid="structGambit_1_1DRes_1_1Observable_1a949905d9e8f502703179b902e06eb747" kindref="member">dependencies_allow</ref>(functor*<sp/>f,<sp/>const<sp/>Utils::type_equivalency&amp;<sp/>te,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_if_weak)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="41"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ModuleRule&amp;<sp/>rule<sp/>:<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1aab446bef964cc637aa0df818f27f8038" kindref="member">dependencies</ref>)<sp/>allow<sp/>=<sp/>allow<sp/>and<sp/>rule.allows(f,<sp/>te,<sp/>ignore_if_weak);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allow;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Whether<sp/>the<sp/>functionChain<sp/>of<sp/>this<sp/>observable<sp/>allows<sp/>a<sp/>given<sp/>module<sp/>functor<sp/>to<sp/>be<sp/>used<sp/>to<sp/>resolve<sp/>the<sp/>dependency<sp/>of<sp/>another.<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1DRes_1_1Observable_1a415b234bca68b281625755170ff3232d" kindref="member">Observable::function_chain_allows</ref>(functor*<sp/>candidate,<sp/>functor*<sp/>dependee,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::type_equivalency&amp;<sp/>te)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="49"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>functionChain<sp/>is<sp/>empty,<sp/>the<sp/>candidate<sp/>is<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structGambit_1_1DRes_1_1Observable_1a9c1a967b8529c2e9808e4f663730783c" kindref="member">functionChain</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>candidate<sp/>functor<sp/>doesn&apos;t<sp/>also<sp/>match<sp/>the<sp/>capability<sp/>and<sp/>type<sp/>of<sp/>the<sp/>observable,<sp/>then<sp/>the<sp/>functionChain<sp/>is<sp/>not<sp/>relevant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="namespaceGambit_1_1DRes_1a6ca4116f647e0c01b07ef3bffea7f773" kindref="member">stringComp</ref>(<ref refid="structGambit_1_1DRes_1_1Observable_1aa69434bf3b2705472d03e78e5c793ec1" kindref="member">capability</ref>,<sp/>candidate-&gt;capability())<sp/>or<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/><ref refid="namespaceGambit_1_1DRes_1a667cf5e40a389d728c0f2da553e085de" kindref="member">typeComp</ref>(<ref refid="structGambit_1_1DRes_1_1Observable_1afa3765b76984e255090c99a2d6c6a726" kindref="member">type</ref>,<sp/>candidate-&gt;type(),<sp/>te))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>dependee<sp/>matches<sp/>the<sp/>observable,<sp/>then<sp/>the<sp/>candidate<sp/>is<sp/>allowed<sp/>only<sp/>if<sp/>it<sp/>appears<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>function<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structGambit_1_1DRes_1_1Observable_1acbb50813900928ea8db8adca2b48267d" kindref="member">matches</ref>(dependee,<sp/>te))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*<ref refid="structGambit_1_1DRes_1_1Observable_1a9c1a967b8529c2e9808e4f663730783c" kindref="member">functionChain</ref>.begin()<sp/>==<sp/>candidate-&gt;name());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>the<sp/>entries<sp/>in<sp/>the<sp/>functionChain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1a9c1a967b8529c2e9808e4f663730783c" kindref="member">functionChain</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1a9c1a967b8529c2e9808e4f663730783c" kindref="member">functionChain</ref>.end()<sp/>-<sp/>1;<sp/>++it)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>is<sp/>allowed<sp/>if<sp/>somewhere<sp/>in<sp/>the<sp/>chain<sp/>it<sp/>is<sp/>directly<sp/>preceded<sp/>by<sp/>the<sp/>dependent<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>dependee-&gt;name())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*(it+1)<sp/>==<sp/>candidate-&gt;name());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Whether<sp/>the<sp/>set<sp/>of<sp/>backend<sp/>rules<sp/>subjugate<sp/>to<sp/>this<sp/>observable<sp/>allow<sp/>a<sp/>given<sp/>backend<sp/>functor<sp/>or<sp/>not.<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1DRes_1_1Observable_1a66800c2b730ee60d892216b75cee6885" kindref="member">Observable::backend_reqs_allow</ref>(functor*<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Utils::type_equivalency&amp;<sp/>te,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;<sp/>group_being_resolved,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_if_weak)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="68"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BackendRule&amp;<sp/>rule<sp/>:<sp/><ref refid="structGambit_1_1DRes_1_1Observable_1a956d822d9ea4a2fa76278c056b83776d" kindref="member">backends</ref>)<sp/>allow<sp/>=<sp/>allow<sp/>and<sp/>rule.allows(f,<sp/>te,<sp/>group_being_resolved,<sp/>ignore_if_weak);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allow;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Core/src/observable.cpp"/>
  </compounddef>
</doxygen>
