<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1DRes" kind="namespace" language="C++">
    <compoundname>Gambit::DRes</compoundname>
    <innerclass refid="structGambit_1_1DRes_1_1BackendRule" prot="public">Gambit::DRes::BackendRule</innerclass>
    <innerclass refid="classGambit_1_1DRes_1_1DependencyResolver" prot="public">Gambit::DRes::DependencyResolver</innerclass>
    <innerclass refid="classGambit_1_1DRes_1_1edgeWriter" prot="public">Gambit::DRes::edgeWriter</innerclass>
    <innerclass refid="classGambit_1_1DRes_1_1labelWriter" prot="public">Gambit::DRes::labelWriter</innerclass>
    <innerclass refid="structGambit_1_1DRes_1_1ModuleRule" prot="public">Gambit::DRes::ModuleRule</innerclass>
    <innerclass refid="structGambit_1_1DRes_1_1Observable" prot="public">Gambit::DRes::Observable</innerclass>
    <innerclass refid="structGambit_1_1DRes_1_1OutputVertex" prot="public">Gambit::DRes::OutputVertex</innerclass>
    <innerclass refid="structGambit_1_1DRes_1_1QueueEntry" prot="public">Gambit::DRes::QueueEntry</innerclass>
    <innerclass refid="structGambit_1_1DRes_1_1Rule" prot="public">Gambit::DRes::Rule</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" prot="public" static="no">
        <type>adjacency_list&lt; vecS, vecS, bidirectionalS, <ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, vecS &gt;</type>
        <definition>typedef adjacency_list&lt;vecS, vecS, bidirectionalS, functor*, vecS&gt; Gambit::DRes::MasterGraphType</definition>
        <argsstring></argsstring>
        <name>MasterGraphType</name>
        <qualifiedname>Gambit::DRes::MasterGraphType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Typedefs for central boost graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/depresolver.hpp" line="63" column="28" bodyfile="Core/include/gambit/Core/depresolver.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1_1DRes_1a4824e49fa86cbde026f7045cd0367d2c" prot="public" static="no">
        <type>graph_traits&lt; <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &gt;::vertex_descriptor</type>
        <definition>typedef graph_traits&lt;MasterGraphType&gt;::vertex_descriptor Gambit::DRes::VertexID</definition>
        <argsstring></argsstring>
        <name>VertexID</name>
        <qualifiedname>Gambit::DRes::VertexID</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/depresolver.hpp" line="64" column="46" bodyfile="Core/include/gambit/Core/depresolver.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1_1DRes_1a2035665129c5dc1bce4bf64bd17e5b68" prot="public" static="no">
        <type>graph_traits&lt; <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &gt;::edge_descriptor</type>
        <definition>typedef graph_traits&lt;MasterGraphType&gt;::edge_descriptor Gambit::DRes::EdgeID</definition>
        <argsstring></argsstring>
        <name>EdgeID</name>
        <qualifiedname>Gambit::DRes::EdgeID</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/depresolver.hpp" line="65" column="44" bodyfile="Core/include/gambit/Core/depresolver.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1_1DRes_1acd9a8e27be22a48612fb182e83b38af0" prot="public" static="no">
        <type>property_map&lt; <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref>, vertex_index_t &gt;::type</type>
        <definition>typedef property_map&lt;MasterGraphType,vertex_index_t&gt;::type Gambit::DRes::IndexMap</definition>
        <argsstring></argsstring>
        <name>IndexMap</name>
        <qualifiedname>Gambit::DRes::IndexMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/depresolver.hpp" line="66" column="33" bodyfile="Core/include/gambit/Core/depresolver.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="namespaceGambit_1_1DRes_1a3d4857306b34e231f8e3bc79c04141f6" prot="public" static="no">
        <type>std::map&lt; std::string, double * &gt;</type>
        <definition>typedef std::map&lt;std::string, double *&gt; Gambit::DRes::inputMapType</definition>
        <argsstring></argsstring>
        <name>inputMapType</name>
        <qualifiedname>Gambit::DRes::inputMapType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Typedefs for communication channels with the master-likelihood </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/depresolver.hpp" line="71" column="22" bodyfile="Core/include/gambit/Core/depresolver.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1_1DRes_1af5db49b50d75b4dd70c8b57acf8672f7" prot="public" static="no">
        <type>std::map&lt; std::string, std::vector&lt; <ref refid="classGambit_1_1functor" kindref="compound">functor</ref> * &gt; &gt;</type>
        <definition>typedef std::map&lt;std::string, std::vector&lt;functor*&gt; &gt; Gambit::DRes::outputMapType</definition>
        <argsstring></argsstring>
        <name>outputMapType</name>
        <qualifiedname>Gambit::DRes::outputMapType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/depresolver.hpp" line="72" column="22" bodyfile="Core/include/gambit/Core/depresolver.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1abda0801bcf720c49927e2b62e0678648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::DRes::dependency_resolver_error</definition>
        <argsstring>()</argsstring>
        <name>dependency_resolver_error</name>
        <qualifiedname>Gambit::DRes::dependency_resolver_error</qualifiedname>
        <briefdescription>
<para>Dependency resolver errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/error_handlers.cpp" line="42" column="11" bodyfile="Core/src/error_handlers.cpp" bodystart="42" bodyend="46" declfile="Core/include/gambit/Core/error_handlers.hpp" declline="34" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1aef6f186a60427ce462d26acb91a8c9d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::DRes::dependency_resolver_warning</definition>
        <argsstring>()</argsstring>
        <name>dependency_resolver_warning</name>
        <qualifiedname>Gambit::DRes::dependency_resolver_warning</qualifiedname>
        <briefdescription>
<para>Dependency resolver warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/error_handlers.cpp" line="49" column="13" bodyfile="Core/src/error_handlers.cpp" bodystart="49" bodyend="53" declfile="Core/include/gambit/Core/error_handlers.hpp" declline="36" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1a6ca4116f647e0c01b07ef3bffea7f773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::DRes::stringComp</definition>
        <argsstring>(const str &amp;s1, const str &amp;s2)</argsstring>
        <name>stringComp</name>
        <qualifiedname>Gambit::DRes::stringComp</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Check whether s1 (wildcard + regex allowed) matches s2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/resolution_utilities.cpp" line="31" column="10" bodyfile="Core/src/resolution_utilities.cpp" bodystart="31" bodyend="51" declfile="Core/include/gambit/Core/resolution_utilities.hpp" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1a667cf5e40a389d728c0f2da553e085de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::DRes::typeComp</definition>
        <argsstring>(str s1, str s2, const Utils::type_equivalency &amp;eq)</argsstring>
        <name>typeComp</name>
        <qualifiedname>Gambit::DRes::typeComp</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>s2</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1Utils_1_1type__equivalency" kindref="compound">Utils::type_equivalency</ref> &amp;</type>
          <declname>eq</declname>
        </param>
        <briefdescription>
<para>Check whether type 1 (wildcard + regex allowed) matches type 2, taking into account equivalence classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/resolution_utilities.cpp" line="54" column="10" bodyfile="Core/src/resolution_utilities.cpp" bodystart="54" bodyend="81" declfile="Core/include/gambit/Core/resolution_utilities.hpp" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1a93451b9ec0195eefc037a7632a3d61ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::DRes::getParentVertices</definition>
        <argsstring>(const VertexID &amp;vertex, const MasterGraphType &amp;graph, std::set&lt; VertexID &gt; &amp;myVertexList)</argsstring>
        <name>getParentVertices</name>
        <qualifiedname>Gambit::DRes::getParentVertices</qualifiedname>
        <param>
          <type>const VertexID &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>std::set&lt; VertexID &gt; &amp;</type>
          <declname>myVertexList</declname>
        </param>
        <briefdescription>
<para>Collect parent vertices recursively (excluding root vertex) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/depresolver.cpp" line="114" column="10" bodyfile="Core/src/depresolver.cpp" bodystart="114" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1a89a1ae05e163b68180284376d196c29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; VertexID &gt;</type>
        <definition>std::vector&lt; VertexID &gt; Gambit::DRes::sortVertices</definition>
        <argsstring>(const std::set&lt; VertexID &gt; &amp;set, const std::list&lt; VertexID &gt; &amp;topoOrder)</argsstring>
        <name>sortVertices</name>
        <qualifiedname>Gambit::DRes::sortVertices</qualifiedname>
        <param>
          <type>const std::set&lt; VertexID &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const std::list&lt; VertexID &gt; &amp;</type>
          <declname>topoOrder</declname>
        </param>
        <briefdescription>
<para>Sort given list of vertices (according to topological sort result) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/depresolver.cpp" line="131" column="17" bodyfile="Core/src/depresolver.cpp" bodystart="131" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1a705c656e8912f1886219ad018e224184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; VertexID &gt;</type>
        <definition>std::vector&lt; VertexID &gt; Gambit::DRes::getSortedParentVertices</definition>
        <argsstring>(const VertexID &amp;vertex, const MasterGraphType &amp;graph, const std::list&lt; VertexID &gt; &amp;topoOrder)</argsstring>
        <name>getSortedParentVertices</name>
        <qualifiedname>Gambit::DRes::getSortedParentVertices</qualifiedname>
        <param>
          <type>const VertexID &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const std::list&lt; VertexID &gt; &amp;</type>
          <declname>topoOrder</declname>
        </param>
        <briefdescription>
<para>Get sorted list of parent vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/depresolver.cpp" line="143" column="17" bodyfile="Core/src/depresolver.cpp" bodystart="143" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1ae713212611548d03321a3c2c1811f6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::DRes::getTimeEstimate</definition>
        <argsstring>(const std::set&lt; VertexID &gt; &amp;vertexList, const MasterGraphType &amp;graph)</argsstring>
        <name>getTimeEstimate</name>
        <qualifiedname>Gambit::DRes::getTimeEstimate</qualifiedname>
        <param>
          <type>const std::set&lt; VertexID &gt; &amp;</type>
          <declname>vertexList</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Return runtime estimate for a set of nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/depresolver.cpp" line="196" column="12" bodyfile="Core/src/depresolver.cpp" bodystart="196" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1afced5dd048155b4228cec068863c2b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RuleT</type>
          </param>
        </templateparamlist>
        <type>std::set&lt; const RuleT * &gt;</type>
        <definition>std::set&lt; const RuleT * &gt; Gambit::DRes::getUsedOrUnusedRules</definition>
        <argsstring>(bool find_used, const std::vector&lt; RuleT &gt; &amp;rules, const MasterGraphType &amp;masterGraph)</argsstring>
        <name>getUsedOrUnusedRules</name>
        <qualifiedname>Gambit::DRes::getUsedOrUnusedRules</qualifiedname>
        <param>
          <type>bool</type>
          <declname>find_used</declname>
        </param>
        <param>
          <type>const std::vector&lt; RuleT &gt; &amp;</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &amp;</type>
          <declname>masterGraph</declname>
        </param>
        <briefdescription>
<para>Retrieve used or unused rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/depresolver.cpp" line="2081" column="14" bodyfile="Core/src/depresolver.cpp" bodystart="2081" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1a689c51295d9cee8e0ae6b1ffd1017d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RuleT</type>
          </param>
        </templateparamlist>
        <type>std::set&lt; const RuleT * &gt;</type>
        <definition>std::set&lt; const RuleT * &gt; Gambit::DRes::getUsedRules</definition>
        <argsstring>(const std::vector&lt; RuleT &gt; &amp;rules, const MasterGraphType &amp;masterGraph)</argsstring>
        <name>getUsedRules</name>
        <qualifiedname>Gambit::DRes::getUsedRules</qualifiedname>
        <param>
          <type>const std::vector&lt; RuleT &gt; &amp;</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &amp;</type>
          <declname>masterGraph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/depresolver.cpp" line="2111" column="14" bodyfile="Core/src/depresolver.cpp" bodystart="2111" bodyend="2114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1_1DRes_1a606fbc907eb7525fe398d0d6c145fd88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RuleT</type>
          </param>
        </templateparamlist>
        <type>std::set&lt; const RuleT * &gt;</type>
        <definition>std::set&lt; const RuleT * &gt; Gambit::DRes::getUnusedRules</definition>
        <argsstring>(const std::vector&lt; RuleT &gt; &amp;rules, const MasterGraphType &amp;masterGraph)</argsstring>
        <name>getUnusedRules</name>
        <qualifiedname>Gambit::DRes::getUnusedRules</qualifiedname>
        <param>
          <type>const std::vector&lt; RuleT &gt; &amp;</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1DRes_1ab3908c48a2c52ebf5d116d230ac62499" kindref="member">MasterGraphType</ref> &amp;</type>
          <declname>masterGraph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/depresolver.cpp" line="2116" column="14" bodyfile="Core/src/depresolver.cpp" bodystart="2116" bodyend="2119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Forward declaration of <ref refid="structGambit_1_1DRes_1_1Rule" kindref="compound">Rule</ref> and Observables classes for saving pointers to ignored and matched examples. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Core/include/gambit/Core/depresolver.hpp" line="56" column="3"/>
  </compounddef>
</doxygen>
