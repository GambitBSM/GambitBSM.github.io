<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1Printers_1_1BaseReader" kind="class" language="C++" prot="public">
    <compoundname>Gambit::Printers::BaseReader</compoundname>
    <basecompoundref refid="classGambit_1_1Printers_1_1BaseBaseReader" prot="public" virt="non-virtual">Gambit::Printers::BaseBaseReader</basecompoundref>
    <derivedcompoundref refid="classGambit_1_1Printers_1_1HDF5Reader" prot="public" virt="non-virtual">Gambit::Printers::HDF5Reader</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Printers_1_1SQLiteReader" prot="public" virt="non-virtual">Gambit::Printers::SQLiteReader</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1Printers_1_1asciiReader" prot="public" virt="non-virtual">Gambit::Printers::asciiReader</derivedcompoundref>
    <includes refid="baseprinter_8hpp" local="no">baseprinter.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseReader_1ad2f035a488f8875668e816d1ca2275fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::Printers::BaseReader::BaseReader</definition>
        <argsstring>()</argsstring>
        <name>BaseReader</name>
        <qualifiedname>Gambit::Printers::BaseReader::BaseReader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/baseprinter.hpp" line="189" column="9" bodyfile="Printers/include/gambit/Printers/baseprinter.hpp" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseReader_1a4b63d842be17a11c793abf31af7e2ca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Gambit::Printers::BaseReader::~BaseReader</definition>
        <argsstring>()</argsstring>
        <name>~BaseReader</name>
        <qualifiedname>Gambit::Printers::BaseReader::~BaseReader</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/baseprinter.hpp" line="192" column="17" bodyfile="Printers/include/gambit/Printers/baseprinter.hpp" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseReader_1aa8384e492baaf6db96559508f7991adc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseReader::retrieve</definition>
        <argsstring>(T &amp;out, const std::string &amp;label)</argsstring>
        <name>retrieve</name>
        <qualifiedname>Gambit::Printers::BaseReader::retrieve</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Reimplement overload for &apos;retrieve&apos; that uses the current point as the input for rank/pointID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/baseprinter.hpp" line="198" column="14" bodyfile="Printers/include/gambit/Printers/baseprinter.hpp" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseReader_1a011a159ddd3934c9d735327fee4a9298" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseReader::retrieve</definition>
        <argsstring>(T &amp;out, const std::string &amp;label, const uint rank, const ulong pointID)</argsstring>
        <name>retrieve</name>
        <qualifiedname>Gambit::Printers::BaseReader::retrieve</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const uint</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>const ulong</type>
          <declname>pointID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/baseprinter.hpp" line="206" column="14" bodyfile="Printers/include/gambit/Printers/baseprinter.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseReader_1a2add1d451993e11b176088c05e7a9fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseReader::retrieve_and_print</definition>
        <argsstring>(const std::string &amp;in_label, const std::string &amp;out_label, BaseBasePrinter &amp;printer, const uint rank, const ulong pointID)</argsstring>
        <name>retrieve_and_print</name>
        <qualifiedname>Gambit::Printers::BaseReader::retrieve_and_print</qualifiedname>
        <reimplements refid="classGambit_1_1Printers_1_1BaseBaseReader_1affe99bf2966877facb054c44df8d12eb">retrieve_and_print</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>in_label</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>out_label</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">BaseBasePrinter</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <param>
          <type>const uint</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>const ulong</type>
          <declname>pointID</declname>
        </param>
        <briefdescription>
<para>Retrieve and directly print data to new output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>First need to get the type data for &apos;in_label&apos;, then call appropriate retrieve and print functions. I think there is no choice but to do this with a big switch. Also need to check if the type matches what the printer expects, and decide what to do in case of mismatch.</para>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/baseprinter.hpp" line="212" column="14" bodyfile="Printers/src/baseprinter.cpp" bodystart="50" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseReader_1a080c5bf796d9bb764c3abe7037957570" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseBaseReader::_retrieve</definition>
        <argsstring>(T &amp;, const std::string &amp;label, const uint, const ulong)</argsstring>
        <name>_retrieve</name>
        <qualifiedname>Gambit::Printers::BaseReader::_retrieve</qualifiedname>
        <param>
          <type>T &amp;</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const</type>
          <declname>uint</declname>
        </param>
        <param>
          <type>const</type>
          <declname>ulong</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default _retrieve function. Throws an error if no virtual function matching the type of the attempted retrieval is found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/baseprinter.hpp" line="215" column="9" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="389" bodyend="403"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>BASE READER CLASS. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Gambit::Printers::BaseBaseReader</label>
        <link refid="classGambit_1_1Printers_1_1BaseBaseReader"/>
      </node>
      <node id="1">
        <label>Gambit::Printers::BaseReader</label>
        <link refid="classGambit_1_1Printers_1_1BaseReader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Gambit::Printers::HDF5Reader</label>
        <link refid="classGambit_1_1Printers_1_1HDF5Reader"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Gambit::Printers::SQLiteReader</label>
        <link refid="classGambit_1_1Printers_1_1SQLiteReader"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Gambit::Printers::asciiReader</label>
        <link refid="classGambit_1_1Printers_1_1asciiReader"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Gambit::Printers::BaseBaseReader</label>
        <link refid="classGambit_1_1Printers_1_1BaseBaseReader"/>
      </node>
      <node id="1">
        <label>Gambit::Printers::BaseReader</label>
        <link refid="classGambit_1_1Printers_1_1BaseReader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Printers/include/gambit/Printers/baseprinter.hpp" line="186" column="5" bodyfile="Printers/include/gambit/Printers/baseprinter.hpp" bodystart="187" bodyend="223"/>
    <listofallmembers>
      <member refid="classGambit_1_1Printers_1_1BaseReader_1a080c5bf796d9bb764c3abe7037957570" prot="protected" virt="non-virtual"><scope>Gambit::Printers::BaseReader</scope><name>_retrieve</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseReader_1ad2f035a488f8875668e816d1ca2275fa" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseReader</scope><name>BaseReader</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a2c8a4583bd370173cb60a52ef0f95121" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>eoi</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1ad134a0dc7bf3d0c4ec8735ac8a6c1c6c" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>get_all_labels</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1ab7507877c0b6c73606705df8f625501b" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>get_current_index</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1abb1d60a2d33fb382f4ab863c7d3c6ed2" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>get_current_point</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a22198dc2e1ab72a9499ecddd4df00920" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>get_dataset_length</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a7cb964eb3edefde83d09bb04aa1c8757" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>get_next_point</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1aa887c57cce2f67b91dc2084802f3da1d" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>get_type</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1afcde51e72062438ba2771fdc4a14d2a3" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseReader</scope><name>reset</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseReader_1aa8384e492baaf6db96559508f7991adc" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseReader</scope><name>retrieve</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseReader_1a011a159ddd3934c9d735327fee4a9298" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseReader</scope><name>retrieve</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseReader_1a2add1d451993e11b176088c05e7a9fce" prot="public" virt="virtual"><scope>Gambit::Printers::BaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a5236e281493c3fd74ea9f5f18d9f7c3d" prot="public" virt="non-virtual" ambiguityscope="Gambit::Printers::BaseBaseReader::"><scope>Gambit::Printers::BaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1aba8f9ee1b6e5e254dc8f582945f4190f" prot="public" virt="non-virtual" ambiguityscope="Gambit::Printers::BaseBaseReader::"><scope>Gambit::Printers::BaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1aa8466673011461e6016f0db170b45e56" prot="public" virt="non-virtual" ambiguityscope="Gambit::Printers::BaseBaseReader::"><scope>Gambit::Printers::BaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1ae257d4a0b00b254a997970ce90bcc61a" prot="public" virt="virtual"><scope>Gambit::Printers::BaseReader</scope><name>~BaseBaseReader</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseReader_1a4b63d842be17a11c793abf31af7e2ca8" prot="public" virt="virtual"><scope>Gambit::Printers::BaseReader</scope><name>~BaseReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
