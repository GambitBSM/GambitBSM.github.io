<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1SpecBit" kind="namespace" language="C++">
    <compoundname>Gambit::SpecBit</compoundname>
    <innerclass refid="classGambit_1_1SpecBit_1_1MDMSpec" prot="public">Gambit::SpecBit::MDMSpec</innerclass>
    <innerclass refid="structGambit_1_1SpecBit_1_1MSSM__strs" prot="public">Gambit::SpecBit::MSSM_strs</innerclass>
    <innerclass refid="classGambit_1_1SpecBit_1_1MSSMSpec" prot="public">Gambit::SpecBit::MSSMSpec</innerclass>
    <innerclass refid="classGambit_1_1SpecBit_1_1QedQcdWrapper" prot="public">Gambit::SpecBit::QedQcdWrapper</innerclass>
    <innerclass refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z2Spec" prot="public">Gambit::SpecBit::ScalarSingletDM_Z2Spec</innerclass>
    <innerclass refid="classGambit_1_1SpecBit_1_1ScalarSingletDM__Z3Spec" prot="public">Gambit::SpecBit::ScalarSingletDM_Z3Spec</innerclass>
    <innerclass refid="structGambit_1_1SpecBit_1_1SMHiggsModel" prot="public">Gambit::SpecBit::SMHiggsModel</innerclass>
    <innerclass refid="classGambit_1_1SpecBit_1_1SMHiggsSimpleSpec" prot="public">Gambit::SpecBit::SMHiggsSimpleSpec</innerclass>
    <innerclass refid="classGambit_1_1SpecBit_1_1SpectrumEntriesForVevacious" prot="public">Gambit::SpecBit::SpectrumEntriesForVevacious</innerclass>
    <innerclass refid="structGambit_1_1SpecBit_1_1SpectrumEntry" prot="public">Gambit::SpecBit::SpectrumEntry</innerclass>
    <innerclass refid="classGambit_1_1SpecBit_1_1VevaciousResultContainer" prot="public">Gambit::SpecBit::VevaciousResultContainer</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="SpecBit__helpers_8hpp_1ac442b10d4430a2ba56914473d1e972f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::setup_QedQcd</definition>
        <argsstring>(softsusy::QedQcd &amp;oneset, const SMInputs &amp;sminputs)</argsstring>
        <name>setup_QedQcd</name>
        <qualifiedname>Gambit::SpecBit::setup_QedQcd</qualifiedname>
        <param>
          <type>softsusy::QedQcd &amp;</type>
          <declname>oneset</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>sminputs</declname>
        </param>
        <briefdescription>
<para>Non-Gambit helper functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialise QedQcd object from <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> data </para>
        </detaileddescription>
        <inbodydescription>
<para>set running quark masses</para>
<para>set QED and QCD structure constants</para>
<para>NOTE! These assume the input electron and muon pole masses are &quot;close
enough&quot; to MSbar masses at MZ. The object does the same with its default values so I guess it is ok.</para>
<para>set running quark masses</para>
<para>set QED and QCD structure constants</para>
<para>NOTE! These assume the input electron and muon pole masses are &quot;close
enough&quot; to MSbar masses at MZ. The object does the same with its default values so I guess it is ok.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit.cpp" line="51" column="10" bodyfile="SpecBit/src/SpecBit.cpp" bodystart="51" bodyend="72" declfile="SpecBit/include/gambit/SpecBit/SpecBit_helpers.hpp" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__helpers_8hpp_1a2f0b4e6889c2679c95f00d9941d829d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::has_neutralino_LSP</definition>
        <argsstring>(const Spectrum &amp;result)</argsstring>
        <name>has_neutralino_LSP</name>
        <qualifiedname>Gambit::SpecBit::has_neutralino_LSP</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Check that the spectrum has a neutralino LSP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit.cpp" line="75" column="10" bodyfile="SpecBit/src/SpecBit.cpp" bodystart="75" bodyend="91" declfile="SpecBit/include/gambit/SpecBit/SpecBit_helpers.hpp" declline="50" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__helpers_8hpp_1a0352f8978e5b729443187f9128de772e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::has_neutralino_LSP</definition>
        <argsstring>(const Spectrum *result)</argsstring>
        <name>has_neutralino_LSP</name>
        <qualifiedname>Gambit::SpecBit::has_neutralino_LSP</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Helper to work with pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit.cpp" line="93" column="10" bodyfile="SpecBit/src/SpecBit.cpp" bodystart="93" bodyend="96" declfile="SpecBit/include/gambit/SpecBit/SpecBit_helpers.hpp" declline="53" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="SpecBit_8cpp_1a1047e94813ffee79e3e976837cc12647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_SMINPUTS</definition>
        <argsstring>(SMInputs &amp;result)</argsstring>
        <name>get_SMINPUTS</name>
        <qualifiedname>Gambit::SpecBit::get_SMINPUTS</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGambit" kindref="compound">Gambit</ref> module functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Set SMINPUTS (SLHA2) struct to match StandardModel_SLHA2 parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit.cpp" line="110" column="10" bodyfile="SpecBit/src/SpecBit.cpp" bodystart="110" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a61a97bad69a25ec0748938a7253a859f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::check_LSP</definition>
        <argsstring>(const Spectrum &amp;spec, const Options &amp;runOptions, bool gravitino_is_canonical_LSP)</argsstring>
        <name>check_LSP</name>
        <qualifiedname>Gambit::SpecBit::check_LSP</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>runOptions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gravitino_is_canonical_LSP</declname>
        </param>
        <briefdescription>
<para>Non-Gambit convenience functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Check that the spectrum has the canonical LSP for the model being scanned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="81" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="81" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a0c7119974e871550412d535108f9aba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::check_LSP</definition>
        <argsstring>(const Spectrum *spec, const Options &amp;runOptions, bool gravitino_model)</argsstring>
        <name>check_LSP</name>
        <qualifiedname>Gambit::SpecBit::check_LSP</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>runOptions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gravitino_model</declname>
        </param>
        <briefdescription>
<para>Helper to work with pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="117" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a513c56fddd16ab1654fc9171b069e1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_light_gravitino_mass</definition>
        <argsstring>(const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param, const Options &amp;runOptions)</argsstring>
        <name>get_light_gravitino_mass</name>
        <qualifiedname>Gambit::SpecBit::get_light_gravitino_mass</qualifiedname>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>runOptions</declname>
        </param>
        <briefdescription>
<para>Check that the gravitino is actually light, and retrieve its mass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="123" column="12" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="123" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a635dc35875e6240759da022da6168f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::add_gravitino_mass</definition>
        <argsstring>(Spectrum &amp;spec, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param, const Options &amp;runOptions)</argsstring>
        <name>add_gravitino_mass</name>
        <qualifiedname>Gambit::SpecBit::add_gravitino_mass</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>runOptions</declname>
        </param>
        <briefdescription>
<para>Add the gravitino mass if it is present (spectrum object version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="138" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a73d3b2417738a209f01789a2bf9db7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::add_gravitino_mass</definition>
        <argsstring>(SLHAstruct &amp;slha, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param, const Options &amp;runOptions)</argsstring>
        <name>add_gravitino_mass</name>
        <qualifiedname>Gambit::SpecBit::add_gravitino_mass</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>runOptions</declname>
        </param>
        <briefdescription>
<para>Add the gravitino mass if it is present (SLHAea version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="144" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a518c622eb289e121bccac8d91df42dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::add_gravitino_mass_from_slhaea</definition>
        <argsstring>(Spectrum &amp;spec, const SLHAstruct &amp;input_slha)</argsstring>
        <name>add_gravitino_mass_from_slhaea</name>
        <qualifiedname>Gambit::SpecBit::add_gravitino_mass_from_slhaea</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>input_slha</declname>
        </param>
        <briefdescription>
<para>Add the gravitino mass to a spectrum object if it is present in an SLHAea object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="150" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="150" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a5042abe08bc4b09d33d80d00b57cf70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref></type>
        <definition>Spectrum Gambit::SpecBit::run_FS_spectrum_generator</definition>
        <argsstring>(const typename MI::InputParameters &amp;input, const SMInputs &amp;sminputs, const Options &amp;runOptions, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;input_Param, bool gravitino_model)</argsstring>
        <name>run_FS_spectrum_generator</name>
        <qualifiedname>Gambit::SpecBit::run_FS_spectrum_generator</qualifiedname>
        <param>
          <type>const typename MI::InputParameters &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>runOptions</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>input_Param</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gravitino_model</declname>
        </param>
        <briefdescription>
<para>Compute an MSSM spectrum using flexiblesusy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TODO: Need to tell gambit that the spectrum is not viable somehow. For now just die.</para>
<para>Check what the problem was see: contrib/MassSpectra/flexiblesusy/src/problems.hpp</para>
<para>Fast way for now:</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="172" column="14" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="173" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a360c373812dfee46650db2b3be4b5bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, 3 &gt; Gambit::SpecBit::fill_3x3_parameter_matrix</definition>
        <argsstring>(const std::string &amp;rootname, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param)</argsstring>
        <name>fill_3x3_parameter_matrix</name>
        <qualifiedname>Gambit::SpecBit::fill_3x3_parameter_matrix</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>rootname</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <briefdescription>
<para>Helper function for setting 3x3 matrix-valued parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="603" column="19" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="603" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a6f94c4cb53d7d021748693c52f614784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 3, 3 &gt; Gambit::SpecBit::fill_3x3_symmetric_parameter_matrix</definition>
        <argsstring>(const std::string &amp;rootname, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param)</argsstring>
        <name>fill_3x3_symmetric_parameter_matrix</name>
        <qualifiedname>Gambit::SpecBit::fill_3x3_symmetric_parameter_matrix</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>rootname</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <briefdescription>
<para>As above, but for symmetric input (i.e. 6 entries, assumed to be the upper triangle) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="614" column="19" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="614" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1ac854e95e89c928ee3931148c9051a26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_MSSM63_input</definition>
        <argsstring>(T &amp;input, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param)</argsstring>
        <name>fill_MSSM63_input</name>
        <qualifiedname>Gambit::SpecBit::fill_MSSM63_input</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function for filling MSSM63-compatible input parameter objects Leaves out mHu2, mHd2, SignMu, (mA, mu) because we use two different parameterisations of these </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="628" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="628" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a146852681982144b6bfdc23903717ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_MSSM63_input_altnames</definition>
        <argsstring>(T &amp;input, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param)</argsstring>
        <name>fill_MSSM63_input_altnames</name>
        <qualifiedname>Gambit::SpecBit::fill_MSSM63_input_altnames</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="682" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="682" bodyend="729"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a2a5ed4e6b28d12e49d72796da01a14a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::convert_MSSM_to_SM</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>convert_MSSM_to_SM</name>
        <qualifiedname>Gambit::SpecBit::convert_MSSM_to_SM</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para><ref refid="namespaceGambit" kindref="compound">Gambit</ref> module functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="741" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="741" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1ada09944e12a9cae93f76f6609316cdf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::convert_NMSSM_to_SM</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>convert_NMSSM_to_SM</name>
        <qualifiedname>Gambit::SpecBit::convert_NMSSM_to_SM</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="742" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="742" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1ac08a5ae6a9fa263f83a6d51310a7746f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::convert_E6MSSM_to_SM</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>convert_E6MSSM_to_SM</name>
        <qualifiedname>Gambit::SpecBit::convert_E6MSSM_to_SM</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="743" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="743" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a57ae4611210ce58e91d7d084b94f9a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MSSM_spectrum_SPheno</definition>
        <argsstring>(Spectrum &amp;spectrum)</argsstring>
        <name>get_MSSM_spectrum_SPheno</name>
        <qualifiedname>Gambit::SpecBit::get_MSSM_spectrum_SPheno</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>spectrum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="745" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="745" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a6f6d2703d92786c2a881cfd3a53cb098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_GUTMSSMB_spectrum</definition>
        <argsstring>(Spectrum &amp;)</argsstring>
        <name>get_GUTMSSMB_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_GUTMSSMB_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1106" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1106" bodyend="1109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1aa692f0fa443feb2c8cd9869e249bbd30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Contents</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_subspectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const SubSpectrum &amp;)</argsstring>
        <name>fill_map_from_subspectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_subspectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <defname>subspec</defname>
        </param>
        <briefdescription>
<para>Convert MSSM type <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object into a map, so it can be printed. </para>
        </briefdescription>
        <detaileddescription>
<para>Extract all parameters from a subspectrum and put them into a map. </para>
        </detaileddescription>
        <inbodydescription>
<para>Add everything... use spectrum contents routines to automate task (make sure to use correct template parameter!)</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
<para>Add everything... use spectrum contents routines to automate task (make sure to use correct template parameter!)</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1916" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1916" bodyend="1993" declfile="SpecBit/src/SpecBit_MSSM.cpp" declline="1782" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a0e1fdf29f66d90f0cd4ccca0a69667a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::add_extra_MSSM_parameter_combinations</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap, const SubSpectrum &amp;mssm)</argsstring>
        <name>add_extra_MSSM_parameter_combinations</name>
        <qualifiedname>Gambit::SpecBit::add_extra_MSSM_parameter_combinations</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
<para>Adds additional information from interesting combinations of MSSM parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Determine which states are the third gens then add them for printing</para>
<para>Since this is for printing we only want to invalidate the point if this is completely wrong. We can also plot the mixing if we are suspicious.</para>
<para>return mass eigenstate strings that best represent required gauge eigenstate</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1785" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1785" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a4d8445d9e33ef047c18e84df6f08d074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MSSM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_MSSM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_MSSM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1874" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1874" bodyend="1892"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a515000f9d4c849bb37d9f2acd62eae7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_unimproved_MSSM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_unimproved_MSSM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_unimproved_MSSM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1893" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1893" bodyend="1911"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="SpecBit__types_8hpp_1aa562ba98c114b9de41141c0a0f9bc0f4" prot="public" static="no">
        <type>std::vector&lt; std::pair&lt; int, double &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::pair&lt;int,double&gt; &gt; Gambit::SpecBit::vec_pair_int_dbl</definition>
        <argsstring></argsstring>
        <name>vec_pair_int_dbl</name>
        <qualifiedname>Gambit::SpecBit::vec_pair_int_dbl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_types.hpp" line="42" column="25" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_types.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="SpecBit__types_8hpp_1a2856e8472afc17019412b9f36ba1ecc9" prot="public" static="no">
        <type>struct <ref refid="structGambit_1_1SpecBit_1_1SpectrumEntry" kindref="compound">SpectrumEntry</ref></type>
        <definition>typedef struct SpectrumEntry Gambit::SpecBit::SpectrumEntry</definition>
        <argsstring></argsstring>
        <name>SpectrumEntry</name>
        <qualifiedname>Gambit::SpecBit::SpectrumEntry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_types.hpp" line="54" column="32" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_types.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="SpecBit__types_8hpp_1ae713578ca9fde57b954348eda35afa4a" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="structGambit_1_1SpecBit_1_1SpectrumEntry" kindref="compound">SpectrumEntry</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string,SpectrumEntry&gt; Gambit::SpecBit::map_str_SpectrumEntry</definition>
        <argsstring></argsstring>
        <name>map_str_SpectrumEntry</name>
        <qualifiedname>Gambit::SpecBit::map_str_SpectrumEntry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>map mapping the name of a spectrum entry to the <ref refid="structGambit_1_1SpecBit_1_1SpectrumEntry" kindref="compound">SpectrumEntry</ref> type. In principle one could just use a vector instead of a map. However, this requires a lot of caution to avoid filling up the vector with more &amp; more entries with the same name but different parameters after one point is run so I thought this was the safer option </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_types.hpp" line="61" column="22" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_types.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="SpecBit__examples_8cpp_1a70bc9aa05e32fadd76b01b38c6fd5b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::add_error</definition>
        <argsstring>(std::ostringstream &amp;out, const std::exception &amp;e, const std::string &amp;msg)</argsstring>
        <name>add_error</name>
        <qualifiedname>Gambit::SpecBit::add_error</qualifiedname>
        <param>
          <type>std::ostringstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::exception &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_examples.cpp" line="44" column="10" bodyfile="SpecBit/examples/SpecBit_examples.cpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__examples_8cpp_1a5a9708ca41363cb0ab548eebe2516c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::exampleRead</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>exampleRead</name>
        <qualifiedname>Gambit::SpecBit::exampleRead</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>NEW! Tests of override setters</para>
<para>Now add some entry that didn&apos;t exist before</para>
<para>Note: if we try to do it like this, it should fail:</para>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_examples.cpp" line="54" column="10" bodyfile="SpecBit/examples/SpecBit_examples.cpp" bodystart="54" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="examples_2SpecBit__tests_8cpp_1a0b717b26044659739ccf2446a8ce79a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::make_test_spectrum</definition>
        <argsstring>(SubSpectrum *&amp;result)</argsstring>
        <name>make_test_spectrum</name>
        <qualifiedname>Gambit::SpecBit::make_test_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Create a spectrum object for testing purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_tests.cpp" line="44" column="10" bodyfile="SpecBit/examples/SpecBit_tests.cpp" bodystart="44" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="examples_2SpecBit__tests_8cpp_1a3bcb25093d1024cf9ebd099606ad86a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::specbit_test_func1</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>specbit_test_func1</name>
        <qualifiedname>Gambit::SpecBit::specbit_test_func1</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Function to test out SpecBit features. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_tests.cpp" line="85" column="10" bodyfile="SpecBit/examples/SpecBit_tests.cpp" bodystart="85" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="examples_2SpecBit__tests_8cpp_1a9539c2b04705603dab8be13678e0590d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::specbit_test_func2</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>specbit_test_func2</name>
        <qualifiedname>Gambit::SpecBit::specbit_test_func2</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Function to test out SpecBit features. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_tests.cpp" line="101" column="10" bodyfile="SpecBit/examples/SpecBit_tests.cpp" bodystart="101" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="examples_2SpecBit__tests_8cpp_1a3276210216ff9c2cde306fb2f5c78a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::specbit_test_func3</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>specbit_test_func3</name>
        <qualifiedname>Gambit::SpecBit::specbit_test_func3</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Function to test out SpecBit features. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_tests.cpp" line="150" column="10" bodyfile="SpecBit/examples/SpecBit_tests.cpp" bodystart="150" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="examples_2SpecBit__tests_8cpp_1a8d9c4273aa349b400022461af3518b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::specbit_test_Spectrum</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>specbit_test_Spectrum</name>
        <qualifiedname>Gambit::SpecBit::specbit_test_Spectrum</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Test out consistency of <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object (and pre-extracted SM SubSpectrum*) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_tests.cpp" line="164" column="10" bodyfile="SpecBit/examples/SpecBit_tests.cpp" bodystart="164" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="examples_2SpecBit__tests_8cpp_1a9fa7c4737bd10c4ec07749e8901622c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::specbit_test_show_SMInputs</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>specbit_test_show_SMInputs</name>
        <qualifiedname>Gambit::SpecBit::specbit_test_show_SMInputs</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Display <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_tests.cpp" line="178" column="10" bodyfile="SpecBit/examples/SpecBit_tests.cpp" bodystart="178" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="examples_2SpecBit__tests_8cpp_1a41f9cb45402e5dd99a226b683ff14171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::test_Singlet_spectrum</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>test_Singlet_spectrum</name>
        <qualifiedname>Gambit::SpecBit::test_Singlet_spectrum</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Check that the SingletDM spectrum object is working. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/examples/SpecBit_tests.cpp" line="204" column="10" bodyfile="SpecBit/examples/SpecBit_tests.cpp" bodystart="204" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="MDMSpec_8hpp_1a4c0c3810188dd7d98c9d6b08ad4dcb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_sinthW2_MSbar</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_sinthW2_MSbar</name>
        <qualifiedname>Gambit::SpecBit::get_sinthW2_MSbar</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MDMSpec.hpp" line="87" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MDMSpec.hpp" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a00a4f7adc061f0b87effbc18946a3cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_tanbeta</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_tanbeta</name>
        <qualifiedname>Gambit::SpecBit::get_tanbeta</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="218" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a13678e67179e0229ea9c3dd4af71605b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_DRbar_mA2</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_DRbar_mA2</name>
        <qualifiedname>Gambit::SpecBit::get_DRbar_mA2</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="225" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="225" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1aa3fbda3f148cc425eabcf29bcb7f2982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_sinthW2_DRbar</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_sinthW2_DRbar</name>
        <qualifiedname>Gambit::SpecBit::get_sinthW2_DRbar</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="234" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="234" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a84ebdec93784edda2bc0e4ffe96ec4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_MAh1_pole_slha</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_MAh1_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::get_MAh1_pole_slha</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="246" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a057fdee4c9b79610193f8bf4188dd286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_MHpm1_pole_slha</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_MHpm1_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::get_MHpm1_pole_slha</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="252" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1ad3683fa5a8a068138fa81c4327980745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_neutral_goldstone_pole_slha</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_neutral_goldstone_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::get_neutral_goldstone_pole_slha</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="260" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a687758c361719ecfbb3f54970e702597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_charged_goldstone_pole_slha</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_charged_goldstone_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::get_charged_goldstone_pole_slha</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="266" column="14" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1ab7379a8f7a80aee5d5eac55b2661f6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MSu_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i)</argsstring>
        <name>set_MSu_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MSu_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="273" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a6458dd190b66647414509def1e1aef80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MSd_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i)</argsstring>
        <name>set_MSd_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MSd_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="279" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a59cf8ea16bde3cc5af40b335ff29dd73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MSe_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i)</argsstring>
        <name>set_MSe_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MSe_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="285" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1acc6c58fdca84e7f4c55cd2dcf4defd1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MSv_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i)</argsstring>
        <name>set_MSv_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MSv_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="291" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a45ecd840b8fa9fb3be6bd47e8176146c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MCha_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i)</argsstring>
        <name>set_MCha_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MCha_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="297" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1aac24f6f9a297f5d955295aa28088382d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MChi_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i)</argsstring>
        <name>set_MChi_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MChi_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="303" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a461a7bf0e36bb40f5260a9bfaa31e928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_Mhh_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i)</argsstring>
        <name>set_Mhh_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_Mhh_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="309" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a120082f7046d215ed7868700b58f8030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZD_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZD_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZD_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="315" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1aead97648090e69099661559b9c8af22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZU_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZU_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZU_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="321" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1adb663969c524b531a6e4057cbb0d2e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZE_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZE_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZE_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="327" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1ac6307a40b1b6b4c5e8857b2b961e33b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZV_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZV_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZV_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="333" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a067bd505fcf29329081e86f55abc2d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZH_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZH_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZH_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="339" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1af5dbd7b2e9e33e8610962d2962054fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZA_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZA_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZA_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="345" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a770803b583fdd26bcc839488f11be0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZP_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZP_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZP_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="351" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a6866fca3d3c18d1fba0d6c80799067fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_ZN_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_ZN_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_ZN_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="357" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1af92683a7855f00a2609bc2080b7e3a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_UM_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_UM_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_UM_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="363" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a0f02a42f1a110f74fdfec4a899fbc239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_UP_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass, int i, int j)</argsstring>
        <name>set_UP_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_UP_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="369" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="369" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1aad1fd9b2f251e55e70eeeeeb15541278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MAh1_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_MAh1_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MAh1_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="375" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a23e4d1d73cd30f008a6fdd2c460f41cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MHpm1_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_MHpm1_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MHpm1_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="381" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1ac225d620e4211335201f6482179e8b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_neutral_goldstone_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_neutral_goldstone_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_neutral_goldstone_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="389" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a333f69c6f6c866e0ad0e56a7211ad9a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_charged_goldstone_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_charged_goldstone_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_charged_goldstone_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="395" column="12" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a7b17a5766229e7a7cf22185815edd88c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MGluino_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_MGluino_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MGluino_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="406" column="11" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1aa7a9d099b54c448a9d96bd053bc5d251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MZ_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_MZ_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MZ_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="413" column="11" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="413" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="MSSMSpec_8hpp_1a961714ec49c3dc29c3e05da7b78419db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_MW_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_MW_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_MW_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" line="419" column="11" bodyfile="SpecBit/include/gambit/SpecBit/MSSMSpec.hpp" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="ScalarSingletDM__Z3Spec_8hpp_1a8b885e6960ad448ef073c40daba28310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::get_sinthW2_MSbar2</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>get_sinthW2_MSbar2</name>
        <qualifiedname>Gambit::SpecBit::get_sinthW2_MSbar2</qualifiedname>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/ScalarSingletDM_Z3Spec.hpp" line="105" column="14" bodyfile="SpecBit/include/gambit/SpecBit/ScalarSingletDM_Z3Spec.hpp" bodystart="105" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="ScalarSingletDM__Z3Spec_8hpp_1a89c566d8e54bbbf3b4a9ace1fd19a3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_Mhh_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_Mhh_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_Mhh_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/ScalarSingletDM_Z3Spec.hpp" line="116" column="12" bodyfile="SpecBit/include/gambit/SpecBit/ScalarSingletDM_Z3Spec.hpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="ScalarSingletDM__Z3Spec_8hpp_1a5d457c2c34cf938077761c33aff7b2cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::set_Mss_pole_slha</definition>
        <argsstring>(Model &amp;model, double mass)</argsstring>
        <name>set_Mss_pole_slha</name>
        <qualifiedname>Gambit::SpecBit::set_Mss_pole_slha</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/ScalarSingletDM_Z3Spec.hpp" line="123" column="12" bodyfile="SpecBit/include/gambit/SpecBit/ScalarSingletDM_Z3Spec.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1adefe48fcd11bd22bef8f16826f53a3a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::print_error</definition>
        <argsstring>(bool pass, std::string get_type, std::string data, double sting_get_out, double data_member, int i=-1, int j=-1)</argsstring>
        <name>print_error</name>
        <qualifiedname>Gambit::SpecBit::print_error</qualifiedname>
        <param>
          <type>bool</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>get_type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>data</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sting_get_out</declname>
        </param>
        <param>
          <type>double</type>
          <declname>data_member</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="56" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="56" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1aef82d28642a63000096bd697d0d9bdff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::print_error</definition>
        <argsstring>(std::string get_type, std::string name, double sting_get_out, double data_member, int i=-1, int j=-1)</argsstring>
        <name>print_error</name>
        <qualifiedname>Gambit::SpecBit::print_error</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>get_type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sting_get_out</declname>
        </param>
        <param>
          <type>double</type>
          <declname>data_member</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="73" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="73" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a8af9497686ea1102d78927c072546df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::test_getters</definition>
        <argsstring>(std::string get_type, std::string name, double getter_output, double data_member, int i=-1, int j=-1)</argsstring>
        <name>test_getters</name>
        <qualifiedname>Gambit::SpecBit::test_getters</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>get_type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>getter_output</declname>
        </param>
        <param>
          <type>double</type>
          <declname>data_member</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="88" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a6da6d7a60bb20fd6144bf2f4b8a9ade4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass2_0</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass2_0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass2_0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Module convenience functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="104" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="104" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a9879a2818642eeddcdad2f69c8f50066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass2_0</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass2_0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass2_0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="137" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="137" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1af458278787e7ada57a5323488cc00be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass2_2</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass2_2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass2_2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="164" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="164" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1ae1832419a28a4f5b9e1168bb459dacc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass2_2</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass2_2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass2_2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="196" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="196" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1aa0438237f278c59a2848a2473359a662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass1_0</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass1_0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass1_0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="228" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="228" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a8e01465d437eebb3527cd8bc5900eb5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass1_0</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass1_0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass1_0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="254" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="254" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1ad2cb180d39790f2703b7b070c2ba3024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass1_2</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass1_2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass1_2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="282" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="282" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a2ba8da4364b6fa705a18035c48177d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass1_2</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass1_2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass1_2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="309" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="309" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1adc3f99d131cf31646bc362b90cf22897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass0_0</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass0_0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass0_0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="335" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="335" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a9068277ff133aec117cc6851af62d0a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass0_0</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass0_0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass0_0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="359" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="359" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a5dd58b7ed0d3e4629fe03a76d6a4e62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass0_2</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass0_2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass0_2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="382" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="382" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1ae45a413eae1fb8154650d7d1e3340dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParMass0_2</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmParMass0_2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParMass0_2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="412" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="412" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a12b2d5521175d21b0a76b06fc2361009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleGets0</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmPoleGets0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleGets0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="441" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="441" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a3079a839b62584cb02ea040b0032ed5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleGets0</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmPoleGets0</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleGets0</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="466" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="466" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1ab14a5d020a7c8a786f8ad88043dd0545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleGets1</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmPoleGets1</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleGets1</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="491" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="491" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a7da0d4dd31453fc9c4f30dcf426924d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleGets1</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmPoleGets1</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleGets1</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="559" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="559" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a46ab03fa61a2f085f73623cb7d73f6be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleMixingGets2</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmPoleMixingGets2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleMixingGets2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="626" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="626" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a6adfb7154d6197e1c17b1925a9179fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleMixingGets2</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm, bool immediate_exit=true)</argsstring>
        <name>TestMssmPoleMixingGets2</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleMixingGets2</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate_exit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="691" column="11" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="691" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1ae3c71731e068110e9789ef89c0f10193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleGets</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm)</argsstring>
        <name>TestMssmPoleGets</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleGets</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="755" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="755" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a424e65c440176efc98db00bb6c58f74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmPoleGets</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm)</argsstring>
        <name>TestMssmPoleGets</name>
        <qualifiedname>Gambit::SpecBit::TestMssmPoleGets</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="768" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="768" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a87cc88de891357dce5d0d466e2b433be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParGets</definition>
        <argsstring>(SubSpectrum *spec, M FSmssm)</argsstring>
        <name>TestMssmParGets</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParGets</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FSmssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="781" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="781" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a05e6c24c717b71ba50464141f5615af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::TestMssmParGets</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FSmssm)</argsstring>
        <name>TestMssmParGets</name>
        <qualifiedname>Gambit::SpecBit::TestMssmParGets</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FSmssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="802" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="802" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1addbf56284b61576eb88deb7494627d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::setup</definition>
        <argsstring>(Model &amp;mssm)</argsstring>
        <name>setup</name>
        <qualifiedname>Gambit::SpecBit::setup</qualifiedname>
        <param>
          <type>Model &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="823" column="10" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="823" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a6685547483051f557a0464375aead8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::test_exact</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FS_model_slha)</argsstring>
        <name>test_exact</name>
        <qualifiedname>Gambit::SpecBit::test_exact</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FS_model_slha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="940" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="940" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1ad5189fc6d21c7af143e24f730b77c7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::SpecBit::test_exact</definition>
        <argsstring>(SubSpectrum *spec, M FS_model_slha)</argsstring>
        <name>test_exact</name>
        <qualifiedname>Gambit::SpecBit::test_exact</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>M</type>
          <declname>FS_model_slha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="960" column="14" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="960" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a329f34754c5d07e614f50be091b542fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::running_test</definition>
        <argsstring>(MSSMSpec&lt; MI &gt; &amp;mssm, typename MI::Model &amp;FS_model_slha, double tol)</argsstring>
        <name>running_test</name>
        <qualifiedname>Gambit::SpecBit::running_test</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1MSSMSpec" kindref="compound">MSSMSpec</ref>&lt; MI &gt; &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>typename MI::Model &amp;</type>
          <declname>FS_model_slha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="981" column="13" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="981" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a3f864d493c1b5cbcb6887aeb4752039d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Model</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::SpecBit::running_test</definition>
        <argsstring>(SubSpectrum *spec, Model &amp;FS_model_slha, double tol)</argsstring>
        <name>running_test</name>
        <qualifiedname>Gambit::SpecBit::running_test</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>Model &amp;</type>
          <declname>FS_model_slha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="1018" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="1018" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a2ff3782e7d2c23e8be1800f1db28d056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::test_within_tol</definition>
        <argsstring>(double a, double b, double tol, std::string label)</argsstring>
        <name>test_within_tol</name>
        <qualifiedname>Gambit::SpecBit::test_within_tol</qualifiedname>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="1055" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="1055" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__externaltests_8hpp_1a1e69b8393bee5f0b5a41f000b80ff4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::Spectrum_test</definition>
        <argsstring>(Spectrum matched_spectra, const SubSpectrum *smin, bool SLHAonly=0)</argsstring>
        <name>Spectrum_test</name>
        <qualifiedname>Gambit::SpecBit::Spectrum_test</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref></type>
          <declname>matched_spectra</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
          <declname>smin</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>SLHAonly</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Generate data for a plot of quark mass</para>
<para>Testing copyability of <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref>;</para>
        </inbodydescription>
        <location file="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" line="1082" column="12" bodyfile="SpecBit/include/gambit/SpecBit/SpecBit_externaltests.hpp" bodystart="1082" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a79e28334792df2a8d346396283a0ee9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mUp</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mUp</name>
        <qualifiedname>Gambit::SpecBit::get_mUp</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Plain C-function wrappers for QedQcd running mass getters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="110" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a1a65145895704ecaddde470b4e2fc1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mCharm</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mCharm</name>
        <qualifiedname>Gambit::SpecBit::get_mCharm</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="111" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1ae02af082cbd8a436aa5a6a46d6051457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mTop</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mTop</name>
        <qualifiedname>Gambit::SpecBit::get_mTop</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="112" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a5d22ef8f71913df4e55bc4ec73a2a4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mDown</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mDown</name>
        <qualifiedname>Gambit::SpecBit::get_mDown</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="113" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1aba47f5fb3d7df6af3c1ff47d07986693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mStrange</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mStrange</name>
        <qualifiedname>Gambit::SpecBit::get_mStrange</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="114" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a07fa48965c7726c7c225ada7e9f508ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mBottom</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mBottom</name>
        <qualifiedname>Gambit::SpecBit::get_mBottom</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="115" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1adf1b41d7c294dd2d1ae15a404c63bfc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mElectron</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mElectron</name>
        <qualifiedname>Gambit::SpecBit::get_mElectron</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="116" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1aae7fbd73585f36b3c11951c481c7700d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mMuon</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mMuon</name>
        <qualifiedname>Gambit::SpecBit::get_mMuon</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="117" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a5b74b51d9424c17c16f0f96e8c9fc553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mTau</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_mTau</name>
        <qualifiedname>Gambit::SpecBit::get_mTau</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="118" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1abaa8dd20b8328f36524846677ff01fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mPhoton</definition>
        <argsstring>(const softsusy::QedQcd &amp;)</argsstring>
        <name>get_mPhoton</name>
        <qualifiedname>Gambit::SpecBit::get_mPhoton</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="120" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a950c5e033785544b2ef57945b2ef2a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_mGluon</definition>
        <argsstring>(const softsusy::QedQcd &amp;)</argsstring>
        <name>get_mGluon</name>
        <qualifiedname>Gambit::SpecBit::get_mGluon</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="121" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1add915505d1cc9da124d277f48cb830b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_alpha</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_alpha</name>
        <qualifiedname>Gambit::SpecBit::get_alpha</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Plain C-function wrappers for QedQcd running coupling getters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="126" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a48317cdb5d56c8b006643120441bf387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_alphaS</definition>
        <argsstring>(const softsusy::QedQcd &amp;model)</argsstring>
        <name>get_alphaS</name>
        <qualifiedname>Gambit::SpecBit::get_alphaS</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="127" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a65020b7cc8d83acf24247896db7360e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_a1</definition>
        <argsstring>(const softsusy::QedQcd &amp;)</argsstring>
        <name>get_a1</name>
        <qualifiedname>Gambit::SpecBit::get_a1</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All 3 SM gauge couplings. The QedQcd documenation has the following to say about this calculations: { This will calculate the three gauge couplings of the Standard Model at the scale m2. It&apos;s a simple one-loop calculation only and no thresholds are assumed. Range of validity is electroweak to top scale. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="144" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="144" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a4d318ea3ac3c072963f7edc0c3546dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_Pole_mElectron</definition>
        <argsstring>(const SMInputs &amp;inputs)</argsstring>
        <name>get_Pole_mElectron</name>
        <qualifiedname>Gambit::SpecBit::get_Pole_mElectron</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
<para>Plain C-function wrappers for extra pole mass getters (manually specified masses) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="155" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a5dc445c67f2f33c066722fe98f41fe1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_Pole_mMuon</definition>
        <argsstring>(const SMInputs &amp;inputs)</argsstring>
        <name>get_Pole_mMuon</name>
        <qualifiedname>Gambit::SpecBit::get_Pole_mMuon</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="156" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1aa9c279e30f68c40c613cb612b299f3c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_Pole_mNu1</definition>
        <argsstring>(const SMInputs &amp;inputs)</argsstring>
        <name>get_Pole_mNu1</name>
        <qualifiedname>Gambit::SpecBit::get_Pole_mNu1</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="157" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a351119f179e4f79bd0c495723aabc048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_Pole_mNu2</definition>
        <argsstring>(const SMInputs &amp;inputs)</argsstring>
        <name>get_Pole_mNu2</name>
        <qualifiedname>Gambit::SpecBit::get_Pole_mNu2</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="158" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a4d53bd933cd50a299e5e26fa19e9fb22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_Pole_mNu3</definition>
        <argsstring>(const SMInputs &amp;inputs)</argsstring>
        <name>get_Pole_mNu3</name>
        <qualifiedname>Gambit::SpecBit::get_Pole_mNu3</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="159" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a776103dd20af38af6f0afdb28ffd6df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_Pole_mPhoton</definition>
        <argsstring>(const SMInputs &amp;)</argsstring>
        <name>get_Pole_mPhoton</name>
        <qualifiedname>Gambit::SpecBit::get_Pole_mPhoton</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="161" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1abc30e369b8d1008921b79557de810956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_Pole_mGluon</definition>
        <argsstring>(const SMInputs &amp;)</argsstring>
        <name>get_Pole_mGluon</name>
        <qualifiedname>Gambit::SpecBit::get_Pole_mGluon</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="162" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1ace38b5921c2b370d2938afe190095fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::get_sinthW2_pole</definition>
        <argsstring>(const softsusy::QedQcd &amp;qedqcd)</argsstring>
        <name>get_sinthW2_pole</name>
        <qualifiedname>Gambit::SpecBit::get_sinthW2_pole</qualifiedname>
        <param>
          <type>const softsusy::QedQcd &amp;</type>
          <declname>qedqcd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="164" column="14" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="QedQcdWrapper_8cpp_1a4f103e6ca0e4e0ae0d04dc495e04f8fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::set_Pole_mElectron</definition>
        <argsstring>(SMInputs &amp;inputs, double set_value)</argsstring>
        <name>set_Pole_mElectron</name>
        <qualifiedname>Gambit::SpecBit::set_Pole_mElectron</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>set_value</declname>
        </param>
        <briefdescription>
<para>Plain C-function wrappers for extra pole mass setters (manually specified masses) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/QedQcdWrapper.cpp" line="281" column="12" bodyfile="SpecBit/src/QedQcdWrapper.cpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DiracSingletDM_8cpp_1a18f2113a6315be98db63ba1d5a36c657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DiracSingletDM_Z2_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_DiracSingletDM_Z2_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_DiracSingletDM_Z2_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for the DiracSingletDM_Z2 model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DiracSingletDM.cpp" line="52" column="10" bodyfile="SpecBit/src/SpecBit_DiracSingletDM.cpp" bodystart="52" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DiracSingletDM_8cpp_1a7f422c221f6d26fc6956a847f439da63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_DiracSingletDM_Z2spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_DiracSingletDM_Z2spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_DiracSingletDM_Z2spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>diracdmspec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DiracSingletDM.cpp" line="165" column="10" bodyfile="SpecBit/src/SpecBit_DiracSingletDM.cpp" bodystart="165" bodyend="218" declfile="SpecBit/src/SpecBit_DiracSingletDM.cpp" declline="156" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DiracSingletDM_8cpp_1ae08cf0fbf6ddf8d55b5354b4557200c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DiracSingletDM_Z2_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_DiracSingletDM_Z2_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_DiracSingletDM_Z2_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DiracSingletDM.cpp" line="158" column="10" bodyfile="SpecBit/src/SpecBit_DiracSingletDM.cpp" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMEFT_8cpp_1ade64cd037acacc20771bb000d7af1096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMEFT_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_DMEFT_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_DMEFT_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a simple wrapper for <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMEFT.cpp" line="34" column="10" bodyfile="SpecBit/src/SpecBit_DMEFT.cpp" bodystart="34" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMEFT_8cpp_1a2450431e257cc29c4fa6bfbf42134c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_DMEFT_spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_DMEFT_spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_DMEFT_spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Use SpectrumContents routines to automate</para>
<para>Use SpectrumContents routines to automate</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMEFT.cpp" line="148" column="10" bodyfile="SpecBit/src/SpecBit_DMEFT.cpp" bodystart="148" bodyend="205" declfile="SpecBit/src/SpecBit_DMEFT.cpp" declline="139" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMEFT_8cpp_1a4ca178a964d9fb5276ee420a2dfe382b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMEFT_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_DMEFT_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_DMEFT_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMEFT.cpp" line="141" column="10" bodyfile="SpecBit/src/SpecBit_DMEFT.cpp" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedDiracDM_8cpp_1a46c1cdf5d2f8d13de9651355fa31f049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedDiracDM_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_DMsimpVectorMedDiracDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedDiracDM_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for DMsimpVectorMedDiracDM_spectrum model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" line="41" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" bodystart="41" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedDiracDM_8cpp_1af8a7ab27d2ff1261a453a4a96d9c4dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_DMsimpVectorMedDiracDM_spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_DMsimpVectorMedDiracDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_DMsimpVectorMedDiracDM_spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Use SpectrumContents routines to automate</para>
<para>Use SpectrumContents routines to automate</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" line="159" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" bodystart="159" bodyend="211" declfile="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" declline="150" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedDiracDM_8cpp_1a996bb7a5b80c7be67ef9a98a25a8fb6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedDiracDM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_DMsimpVectorMedDiracDM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedDiracDM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" line="152" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedDiracDM_8cpp_1aef0a773e839e946a8faa15b549e2e9ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::Unitarity_Bound_DMsimpVectorMedDiracDM</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>Unitarity_Bound_DMsimpVectorMedDiracDM</name>
        <qualifiedname>Gambit::SpecBit::Unitarity_Bound_DMsimpVectorMedDiracDM</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate whether or not unitarity is violated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" line="214" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedDiracDM.cpp" bodystart="214" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedMajoranaDM_8cpp_1ad7b8d27ce998cab267439651dc070455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedMajoranaDM_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_DMsimpVectorMedMajoranaDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedMajoranaDM_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for DMsimpVectorMedMajoranaDM_spectrum model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" line="41" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" bodystart="41" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedMajoranaDM_8cpp_1a4e95cfc82aa2f4c2c23294009555aef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_DMsimpVectorMedMajoranaDM_spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_DMsimpVectorMedMajoranaDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_DMsimpVectorMedMajoranaDM_spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Use SpectrumContents routines to automate</para>
<para>Use SpectrumContents routines to automate</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" line="158" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" bodystart="158" bodyend="210" declfile="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" declline="149" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedMajoranaDM_8cpp_1a8ca8f7f935f6e05f86d5f95e5af9ac1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedMajoranaDM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_DMsimpVectorMedMajoranaDM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedMajoranaDM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" line="151" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedMajoranaDM_8cpp_1aaa5829ef0c448913c5be2ba51c5b76e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::Unitarity_Bound_DMsimpVectorMedMajoranaDM</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>Unitarity_Bound_DMsimpVectorMedMajoranaDM</name>
        <qualifiedname>Gambit::SpecBit::Unitarity_Bound_DMsimpVectorMedMajoranaDM</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate whether or not unitarity is violated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" line="213" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedMajoranaDM.cpp" bodystart="213" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedScalarDM_8cpp_1a7fbc0c2ae13d1b0426bf5b94b70ba77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedScalarDM_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_DMsimpVectorMedScalarDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedScalarDM_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for DMsimpVectorMedScalarDM_spectrum model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedScalarDM.cpp" line="41" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedScalarDM.cpp" bodystart="41" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedScalarDM_8cpp_1a96f240a99c61e979aad818af1f293f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_DMsimpVectorMedScalarDM_spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_DMsimpVectorMedScalarDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_DMsimpVectorMedScalarDM_spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Use SpectrumContents routines to automate</para>
<para>Use SpectrumContents routines to automate</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedScalarDM.cpp" line="158" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedScalarDM.cpp" bodystart="158" bodyend="210" declfile="SpecBit/src/SpecBit_DMsimpVectorMedScalarDM.cpp" declline="149" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedScalarDM_8cpp_1a0c0dd70b88983173d7989a3e9cea89d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedScalarDM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_DMsimpVectorMedScalarDM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedScalarDM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedScalarDM.cpp" line="151" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedScalarDM.cpp" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedVectorDM_8cpp_1a4e586feda9baf1aba96bd3c90ee02c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedVectorDM_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_DMsimpVectorMedVectorDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedVectorDM_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for DMsimpVectorMedVectorDM_spectrum model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" line="41" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" bodystart="41" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedVectorDM_8cpp_1a009edaceed73abff8c88764bc0a66d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_DMsimpVectorMedVectorDM_spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_DMsimpVectorMedVectorDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_DMsimpVectorMedVectorDM_spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Use SpectrumContents routines to automate</para>
<para>Use SpectrumContents routines to automate</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" line="158" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" bodystart="158" bodyend="210" declfile="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" declline="149" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedVectorDM_8cpp_1a2e63cd0547df32cfa4e7d0b0c9ad8c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_DMsimpVectorMedVectorDM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_DMsimpVectorMedVectorDM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_DMsimpVectorMedVectorDM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" line="151" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__DMsimpVectorMedVectorDM_8cpp_1a28fd8d44a2d141ce0559da5174146da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::DecayWidthPerturbativity_DMsimpVectorMedVectorDM</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>DecayWidthPerturbativity_DMsimpVectorMedVectorDM</name>
        <qualifiedname>Gambit::SpecBit::DecayWidthPerturbativity_DMsimpVectorMedVectorDM</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate the mediator decay width-mass ratio and invalidate the point if greater than 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" line="213" column="10" bodyfile="SpecBit/src/SpecBit_DMsimpVectorMedVectorDM.cpp" bodystart="213" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MajoranaSingletDM_8cpp_1aa42a3a883bb2e1d03e2a75b178d3b41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MajoranaSingletDM_Z2_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_MajoranaSingletDM_Z2_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_MajoranaSingletDM_Z2_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for the MajoranaSingletDM_Z2 model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MajoranaSingletDM.cpp" line="52" column="10" bodyfile="SpecBit/src/SpecBit_MajoranaSingletDM.cpp" bodystart="52" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MajoranaSingletDM_8cpp_1a26e1789c205aabd7f42760ab83758f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_MajoranaSingletDM_Z2spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_MajoranaSingletDM_Z2spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_MajoranaSingletDM_Z2spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>majoranadmspec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MajoranaSingletDM.cpp" line="165" column="10" bodyfile="SpecBit/src/SpecBit_MajoranaSingletDM.cpp" bodystart="165" bodyend="218" declfile="SpecBit/src/SpecBit_MajoranaSingletDM.cpp" declline="156" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MajoranaSingletDM_8cpp_1a27ae0b7a1ac9e8a5cccae09429f4788b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MajoranaSingletDM_Z2_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_MajoranaSingletDM_Z2_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_MajoranaSingletDM_Z2_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MajoranaSingletDM.cpp" line="158" column="10" bodyfile="SpecBit/src/SpecBit_MajoranaSingletDM.cpp" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MDM_8cpp_1a975fb75f77cae6ceec9db9124cf5f2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MI</type>
          </param>
          <param>
            <type>class SI</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref></type>
        <definition>Spectrum Gambit::SpecBit::run_FS_spectrum_generator</definition>
        <argsstring>(const typename MI::InputParameters &amp;input, const SMInputs &amp;sminputs, const Options &amp;runOptions, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;input_Param)</argsstring>
        <name>run_FS_spectrum_generator</name>
        <qualifiedname>Gambit::SpecBit::run_FS_spectrum_generator</qualifiedname>
        <param>
          <type>const typename MI::InputParameters &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>sminputs</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &amp;</type>
          <declname>runOptions</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>input_Param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MDM.cpp" line="54" column="14" bodyfile="SpecBit/src/SpecBit_MDM.cpp" bodystart="55" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MDM_8cpp_1a33367b7dd83aeeb082cb38714a58a85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_MDM_input</definition>
        <argsstring>(T &amp;input, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param, SMInputs sminputs)</argsstring>
        <name>fill_MDM_input</name>
        <qualifiedname>Gambit::SpecBit::fill_MDM_input</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MDM.cpp" line="141" column="10" bodyfile="SpecBit/src/SpecBit_MDM.cpp" bodystart="141" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MDM_8cpp_1a3060d16ef31ca4c98494afa3ad2fe598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::check_perturb_MDM</definition>
        <argsstring>(const Spectrum &amp;spec, double scale, int pts)</argsstring>
        <name>check_perturb_MDM</name>
        <qualifiedname>Gambit::SpecBit::check_perturb_MDM</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MDM.cpp" line="164" column="10" bodyfile="SpecBit/src/SpecBit_MDM.cpp" bodystart="164" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MDM_8cpp_1ab1c9cd26d8a89a476b881a124e045f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::find_non_perturb_scale_MDM</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>find_non_perturb_scale_MDM</name>
        <qualifiedname>Gambit::SpecBit::find_non_perturb_scale_MDM</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MDM.cpp" line="279" column="6" bodyfile="SpecBit/src/SpecBit_MDM.cpp" bodystart="279" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MDM_8cpp_1a99e339424b6e14597529d1a9ad7c24f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_MDMspectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_MDMspectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_MDMspectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>mdmspec</defname>
        </param>
        <briefdescription>
<para>Print MDM spectrum out. Stripped down copy from MSSM version with variable names changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MDM.cpp" line="337" column="10" bodyfile="SpecBit/src/SpecBit_MDM.cpp" bodystart="337" bodyend="390" declfile="SpecBit/src/SpecBit_MDM.cpp" declline="328" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MDM_8cpp_1aa7645d4e07e3cb924518823110fb951f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MDM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_MDM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_MDM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MDM.cpp" line="330" column="10" bodyfile="SpecBit/src/SpecBit_MDM.cpp" bodystart="330" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a10ede116e2f8a4bd834edac56c815d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_SM_SubSpectrum_from_MSSM_Spectrum</definition>
        <argsstring>(const SubSpectrum *&amp;result)</argsstring>
        <name>get_SM_SubSpectrum_from_MSSM_Spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_SM_SubSpectrum_from_MSSM_Spectrum</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve SubSpectrum* to SM LE model from <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object <ref refid="module__macros__incore_8hpp_1a6b4d1ca0beaad9490ec178d15c775fef" kindref="member">DEPENDENCY(MSSM_spectrum, Spectrum)</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1117" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1117" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a959101e1309d4e13bafe177f418f7068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MSSM_spectrum_as_SLHAea_SLHA1</definition>
        <argsstring>(SLHAstruct &amp;result)</argsstring>
        <name>get_MSSM_spectrum_as_SLHAea_SLHA1</name>
        <qualifiedname>Gambit::SpecBit::get_MSSM_spectrum_as_SLHAea_SLHA1</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Extract an SLHAea version of the spectrum contained in a <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object, in SLHA1 format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1125" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1125" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a81cfc49fd6aeb1cda8b9b46499d52be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MSSM_spectrum_as_SLHAea_SLHA2</definition>
        <argsstring>(SLHAstruct &amp;result)</argsstring>
        <name>get_MSSM_spectrum_as_SLHAea_SLHA2</name>
        <qualifiedname>Gambit::SpecBit::get_MSSM_spectrum_as_SLHAea_SLHA2</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Extract an SLHAea version of the spectrum contained in a <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object, in SLHA2 format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1131" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1131" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a4e1bd8bbe957866030020eb9c1488e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MSSM_spectrum_from_SLHAfile</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_MSSM_spectrum_from_SLHAfile</name>
        <qualifiedname>Gambit::SpecBit::get_MSSM_spectrum_from_SLHAfile</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an MSSMSpectrum object from an SLHA file Wraps it up in <ref refid="classGambit_1_1MSSMSimpleSpec" kindref="compound">MSSMSimpleSpec</ref>; i.e. no RGE running possible. This is mainly for testing against benchmark points, but may be a useful last resort for interacting with &quot;difficult&quot; spectrum generators. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1140" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1140" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a292d0ddb744f2550fcab1623d5b6d660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MSSM_spectrum_from_SLHAstruct</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_MSSM_spectrum_from_SLHAstruct</name>
        <qualifiedname>Gambit::SpecBit::get_MSSM_spectrum_from_SLHAstruct</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an MSSMSpectrum object from an SLHAstruct Wraps it up in <ref refid="classGambit_1_1MSSMSimpleSpec" kindref="compound">MSSMSimpleSpec</ref>; i.e. no RGE running possible. This can be used as a poor-man&apos;s interface to backend spectrum generators </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1203" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1203" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1aa4ca4943a0e98e44f5afba1793011d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_MSSM_spectrum_from_postprocessor</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_MSSM_spectrum_from_postprocessor</name>
        <qualifiedname>Gambit::SpecBit::get_MSSM_spectrum_from_postprocessor</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pre-computed MSSM spectrum from previous output file This function ONLY works when the scan is driven by the postprocessor! This is because it relies on the global reader object created by the postprocessor to retrieve output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1255" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1255" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1ae0e97dce0f51c49f39bcac9a234d800d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::FeynHiggs_MSSMMasses</definition>
        <argsstring>(fh_MSSMMassObs_container &amp;result)</argsstring>
        <name>FeynHiggs_MSSMMasses</name>
        <qualifiedname>Gambit::SpecBit::FeynHiggs_MSSMMasses</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1fh__MSSMMassObs__container" kindref="compound">fh_MSSMMassObs_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>FeynHiggs SUSY masses and mixings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1313" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1313" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1aec7644315417966384e2ee1ccd137f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::FeynHiggs_AllHiggsMasses</definition>
        <argsstring>(fh_HiggsMassObs_container &amp;result)</argsstring>
        <name>FeynHiggs_AllHiggsMasses</name>
        <qualifiedname>Gambit::SpecBit::FeynHiggs_AllHiggsMasses</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1fh__HiggsMassObs__container" kindref="compound">fh_HiggsMassObs_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Higgs masses and mixings with theoretical uncertainties. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1426" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1426" bodyend="1500"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1af739f33b2f42d4723a3ce7014d65b38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::FeynHiggs_Couplings</definition>
        <argsstring>(fh_Couplings_container &amp;result)</argsstring>
        <name>FeynHiggs_Couplings</name>
        <qualifiedname>Gambit::SpecBit::FeynHiggs_Couplings</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1fh__Couplings__container" kindref="compound">fh_Couplings_container</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Call FHCouplings from FeynHiggs and collect the output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1507" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1507" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1abafff724b0e03f6e186781baacd69584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; str, str &gt; &gt; Gambit::SpecBit::get_invisibles</definition>
        <argsstring>(const SubSpectrum &amp;spec)</argsstring>
        <name>get_invisibles</name>
        <qualifiedname>Gambit::SpecBit::get_invisibles</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Helper function to work out if the LSP is invisible, and if so, which particle it is. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1578" column="17" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1578" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a2b5c2f892707671d7cfad52df88cb32b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::MSSM_higgs_couplings_pwid</definition>
        <argsstring>(HiggsCouplingsTable &amp;result)</argsstring>
        <name>MSSM_higgs_couplings_pwid</name>
        <qualifiedname>Gambit::SpecBit::MSSM_higgs_couplings_pwid</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1HiggsCouplingsTable" kindref="compound">HiggsCouplingsTable</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Put together the Higgs couplings for the MSSM, from partial widths only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1600" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1600" bodyend="1675"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a7952646fe92194253f5e04c2d6cfffdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::MSSM_higgs_couplings_FeynHiggs</definition>
        <argsstring>(HiggsCouplingsTable &amp;result)</argsstring>
        <name>MSSM_higgs_couplings_FeynHiggs</name>
        <qualifiedname>Gambit::SpecBit::MSSM_higgs_couplings_FeynHiggs</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1HiggsCouplingsTable" kindref="compound">HiggsCouplingsTable</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Put together the Higgs couplings for the MSSM, using FeynHiggs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1679" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1679" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a11f2befbc810ac12cf28944a4c0c1fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::FeynHiggs_HiggsMass</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>FeynHiggs_HiggsMass</name>
        <qualifiedname>Gambit::SpecBit::FeynHiggs_HiggsMass</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1triplet" kindref="compound">triplet</ref>&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="1995" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="1995" bodyend="2008"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1a98915289e99e0a231471262b6a5a6625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::FeynHiggs_HeavyHiggsMasses</definition>
        <argsstring>(map_int_triplet_dbl &amp;result)</argsstring>
        <name>FeynHiggs_HeavyHiggsMasses</name>
        <qualifiedname>Gambit::SpecBit::FeynHiggs_HeavyHiggsMasses</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1abd933db4e41415a5f75eac3fb0d03178" kindref="member">map_int_triplet_dbl</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="2010" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="2010" bodyend="2030"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__MSSM_8cpp_1acc8dfeace1e819668b5731f5fec81af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::SUSYHD_HiggsMass</definition>
        <argsstring>(triplet&lt; double &gt; &amp;result)</argsstring>
        <name>SUSYHD_HiggsMass</name>
        <qualifiedname>Gambit::SpecBit::SUSYHD_HiggsMass</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1triplet" kindref="compound">triplet</ref>&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_MSSM.cpp" line="2032" column="10" bodyfile="SpecBit/src/SpecBit_MSSM.cpp" bodystart="2032" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1ad18d835398f17b195ecd21c5e157fe90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_ScalarSingletDM_Z2_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_ScalarSingletDM_Z2_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_ScalarSingletDM_Z2_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for the ScalarSingletDM_Z2 model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="56" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="56" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1a1df852d2c78544e9096f3404ad3b85b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_ScalarSingletDM_Z3_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_ScalarSingletDM_Z3_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_ScalarSingletDM_Z3_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for the ScalarSingletDM_Z3 model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="119" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="119" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1a7bad3ee6085ffedf4f8d6a88ae0b83c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_ScalarSingletDM_input</definition>
        <argsstring>(T &amp;input, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param, SMInputs sminputs)</argsstring>
        <name>fill_ScalarSingletDM_input</name>
        <qualifiedname>Gambit::SpecBit::fill_ScalarSingletDM_input</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <param>
          <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
          <declname>sminputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="296" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="296" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1ad8e81aa874aff5ae85d83a365bca3b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_extra_input</definition>
        <argsstring>(T &amp;input, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; &amp;Param)</argsstring>
        <name>fill_extra_input</name>
        <qualifiedname>Gambit::SpecBit::fill_extra_input</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; &amp;</type>
          <declname>Param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="323" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1adc288cc9afedbd6f8b025b28761bc053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::check_perturb</definition>
        <argsstring>(const Spectrum &amp;spec, const std::vector&lt; SpectrumParameter &gt; &amp;required_parameters, double scale, int pts)</argsstring>
        <name>check_perturb</name>
        <qualifiedname>Gambit::SpecBit::check_perturb</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classGambit_1_1SpectrumParameter" kindref="compound">SpectrumParameter</ref> &gt; &amp;</type>
          <declname>required_parameters</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="328" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="328" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1aae390156c3e41a1513cf5d3e24368391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::ScalarSingletDM_higgs_couplings_pwid</definition>
        <argsstring>(HiggsCouplingsTable &amp;result)</argsstring>
        <name>ScalarSingletDM_higgs_couplings_pwid</name>
        <qualifiedname>Gambit::SpecBit::ScalarSingletDM_higgs_couplings_pwid</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1HiggsCouplingsTable" kindref="compound">HiggsCouplingsTable</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Put together the Higgs couplings for the ScalarSingletDM models, from partial widths only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="574" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="574" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1a282623732915af871abd97db751750aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_ScalarSingletDM_spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap, const Spectrum &amp;singletdmspec, const std::vector&lt; SpectrumParameter &gt; &amp;required_parameters)</argsstring>
        <name>fill_map_from_ScalarSingletDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_ScalarSingletDM_spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>singletdmspec</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classGambit_1_1SpectrumParameter" kindref="compound">SpectrumParameter</ref> &gt; &amp;</type>
          <declname>required_parameters</declname>
        </param>
        <briefdescription>
<para>Print ScalarSingletDM spectra out. Stripped down copy of MSSM version with variable names changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="607" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="607" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1af14c178d1d84916b4904c6fac26066fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_ScalarSingletDM_Z2_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_ScalarSingletDM_Z2_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_ScalarSingletDM_Z2_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="659" column="10" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="659" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__ScalarSingletDM_8cpp_1a85127c2e27becd141929e97a01b08558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_ScalarSingletDM_Z3_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_ScalarSingletDM_Z3_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_ScalarSingletDM_Z3_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_ScalarSingletDM.cpp" line="668" column="6" bodyfile="SpecBit/src/SpecBit_ScalarSingletDM.cpp" bodystart="668" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__SM_8cpp_1a7b032de0cd57ae35490e28c3b6402241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_QedQcd_spectrum</definition>
        <argsstring>(const SubSpectrum *&amp;result)</argsstring>
        <name>get_QedQcd_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_QedQcd_spectrum</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *&amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> object from <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> using <ref refid="classGambit_1_1SpecBit_1_1QedQcdWrapper" kindref="compound">QedQcdWrapper</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_SM.cpp" line="46" column="10" bodyfile="SpecBit/src/SpecBit_SM.cpp" bodystart="46" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__SM_8cpp_1ae7e22a1587e987ce25e70285ff2de63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_SM_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_SM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_SM_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for Standard-Model-only information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_SM.cpp" line="76" column="10" bodyfile="SpecBit/src/SpecBit_SM.cpp" bodystart="76" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__SM_8cpp_1a5aa294415de6518ee3d81fca5d6fb832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::SM_higgs_couplings</definition>
        <argsstring>(HiggsCouplingsTable &amp;result)</argsstring>
        <name>SM_higgs_couplings</name>
        <qualifiedname>Gambit::SpecBit::SM_higgs_couplings</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1HiggsCouplingsTable" kindref="compound">HiggsCouplingsTable</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Put together the SM Higgs couplings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_SM.cpp" line="113" column="10" bodyfile="SpecBit/src/SpecBit_SM.cpp" bodystart="113" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__SubGeVDM_8cpp_1a9f0eae1817dc19abd192deb8f34e8840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_SubGeVDM_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_SubGeVDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_SubGeVDM_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for the SubGeVDM model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_SubGeVDM.cpp" line="46" column="10" bodyfile="SpecBit/src/SpecBit_SubGeVDM.cpp" bodystart="46" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__SubGeVDM_8cpp_1ab85e44173260ffe10466b8374dc738d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_SubGeVDM_spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_SubGeVDM_spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_SubGeVDM_spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>SubGeVdmspec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_SubGeVDM.cpp" line="119" column="10" bodyfile="SpecBit/src/SpecBit_SubGeVDM.cpp" bodystart="119" bodyend="172" declfile="SpecBit/src/SpecBit_SubGeVDM.cpp" declline="110" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__SubGeVDM_8cpp_1a41fbabfd8406b34aaab9994424bde770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_SubGeVDM_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_SubGeVDM_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_SubGeVDM_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_SubGeVDM.cpp" line="112" column="10" bodyfile="SpecBit/src/SpecBit_SubGeVDM.cpp" bodystart="112" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="src_2SpecBit__tests_8cpp_1abe3ea3bcf1f3a3a7cb7a60942394903a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::Math_test</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>Math_test</name>
        <qualifiedname>Gambit::SpecBit::Math_test</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_tests.cpp" line="60" column="10" bodyfile="SpecBit/src/SpecBit_tests.cpp" bodystart="60" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="src_2SpecBit__tests_8cpp_1a5876c20c8b9766a73eeb4ead57562fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::SUSYHD_test</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>SUSYHD_test</name>
        <qualifiedname>Gambit::SpecBit::SUSYHD_test</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_tests.cpp" line="75" column="10" bodyfile="SpecBit/src/SpecBit_tests.cpp" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="src_2SpecBit__tests_8cpp_1a22e581da488b53ee14b17a1bea4cdbc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::SPheno_MSSM_test</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>SPheno_MSSM_test</name>
        <qualifiedname>Gambit::SpecBit::SPheno_MSSM_test</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_tests.cpp" line="90" column="10" bodyfile="SpecBit/src/SpecBit_tests.cpp" bodystart="90" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="src_2SpecBit__tests_8cpp_1af3e8ab8aa53cab9e1ba7f6633a19aced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::MSSMspectrum_test</definition>
        <argsstring>(bool &amp;result)</argsstring>
        <name>MSSMspectrum_test</name>
        <qualifiedname>Gambit::SpecBit::MSSMspectrum_test</qualifiedname>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify consistency of the contents of a <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object of capability MSSMspectrum. (derived from old &apos;exampleRead&apos; function) </para>
        </detaileddescription>
        <inbodydescription>
<para>NEW! Tests of override setters These cannot be run on a const spectrum object, so we need to clone it first</para>
<para>Now add some entry that didn&apos;t exist before</para>
<para>Note: if we try to do it like this, it should fail:</para>
<para>TODO: Tests of ordinary &apos;setter&apos; functions (these actually replace data in the wrapped object)</para>
<para>Tests of spectrum/particle database antiparticle getters/setters interaction</para>
<para>Turn SpecBit warnings to &apos;fatal&apos; in order to trigger stop after this function runs.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_tests.cpp" line="102" column="10" bodyfile="SpecBit/src/SpecBit_tests.cpp" bodystart="102" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="src_2SpecBit__tests_8cpp_1a5d5e8c564a89d318d69ee9fa5500dcca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::light_quark_test</definition>
        <argsstring>(bool &amp;)</argsstring>
        <name>light_quark_test</name>
        <qualifiedname>Gambit::SpecBit::light_quark_test</qualifiedname>
        <param>
          <type>bool &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Generate data for a plot of quark mass</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_tests.cpp" line="748" column="10" bodyfile="SpecBit/src/SpecBit_tests.cpp" bodystart="748" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VectorSingletDM_8cpp_1a3340b7d2297fff35d01682847962e9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_VectorSingletDM_Z2_spectrum</definition>
        <argsstring>(Spectrum &amp;result)</argsstring>
        <name>get_VectorSingletDM_Z2_spectrum</name>
        <qualifiedname>Gambit::SpecBit::get_VectorSingletDM_Z2_spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a (simple) <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object wrapper for the VectorSingletDM_Z2 model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VectorSingletDM.cpp" line="53" column="10" bodyfile="SpecBit/src/SpecBit_VectorSingletDM.cpp" bodystart="53" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VectorSingletDM_8cpp_1aac40f63ac61f805b36aa54a7d6e998aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::fill_map_from_VectorSingletDM_Z2spectrum</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;, const Spectrum &amp;)</argsstring>
        <name>fill_map_from_VectorSingletDM_Z2spectrum</name>
        <qualifiedname>Gambit::SpecBit::fill_map_from_VectorSingletDM_Z2spectrum</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <defname>specmap</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <defname>vectordmspec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
<para>Add everything... use spectrum contents routines to automate task</para>
<para>Verification routine should have taken care of invalid shapes etc, so won&apos;t check for that here.</para>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VectorSingletDM.cpp" line="135" column="10" bodyfile="SpecBit/src/SpecBit_VectorSingletDM.cpp" bodystart="135" bodyend="188" declfile="SpecBit/src/SpecBit_VectorSingletDM.cpp" declline="126" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VectorSingletDM_8cpp_1a844514fb05b679995283aee25ccf7ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_VectorSingletDM_Z2_spectrum_as_map</definition>
        <argsstring>(std::map&lt; std::string, double &gt; &amp;specmap)</argsstring>
        <name>get_VectorSingletDM_Z2_spectrum_as_map</name>
        <qualifiedname>Gambit::SpecBit::get_VectorSingletDM_Z2_spectrum_as_map</qualifiedname>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>specmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VectorSingletDM.cpp" line="128" column="10" bodyfile="SpecBit/src/SpecBit_VectorSingletDM.cpp" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1ad6277424fae73031225d10f909b4d25e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::check_EW_stability_ScalarSingletDM_Z3</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>check_EW_stability_ScalarSingletDM_Z3</name>
        <qualifiedname>Gambit::SpecBit::check_EW_stability_ScalarSingletDM_Z3</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="69" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="69" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a12f9f5e1fb78564c13f4e0a52ab913d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SpecBit::check_perturb_to_min_lambda</definition>
        <argsstring>(const Spectrum &amp;spec, double scale, int pts, const std::vector&lt; SpectrumParameter &gt; required_parameters)</argsstring>
        <name>check_perturb_to_min_lambda</name>
        <qualifiedname>Gambit::SpecBit::check_perturb_to_min_lambda</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pts</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classGambit_1_1SpectrumParameter" kindref="compound">SpectrumParameter</ref> &gt;</type>
          <declname>required_parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="100" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="100" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a19d2b2c2c3c0ce9c8b47bb6aaf1c93d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SpecBit::run_lambda</definition>
        <argsstring>(double scale, void *params)</argsstring>
        <name>run_lambda</name>
        <qualifiedname>Gambit::SpecBit::run_lambda</qualifiedname>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="166" column="12" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="166" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a29f53d6123fbfb4f69d6866a292ed679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::find_min_lambda_Helper</definition>
        <argsstring>(dbl_dbl_bool &amp;vs_tuple, const Spectrum &amp;fullspectrum, double high_energy_limit, int check_perturb_pts, const std::vector&lt; SpectrumParameter &gt; required_parameters)</argsstring>
        <name>find_min_lambda_Helper</name>
        <qualifiedname>Gambit::SpecBit::find_min_lambda_Helper</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1dbl__dbl__bool" kindref="compound">dbl_dbl_bool</ref> &amp;</type>
          <declname>vs_tuple</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>fullspectrum</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high_energy_limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>check_perturb_pts</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classGambit_1_1SpectrumParameter" kindref="compound">SpectrumParameter</ref> &gt;</type>
          <declname>required_parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="198" column="11" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="198" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a53ec37c7b2932fc75e12e58a3920a02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::find_min_lambda_ScalarSingletDM_Z2</definition>
        <argsstring>(dbl_dbl_bool &amp;vs_tuple)</argsstring>
        <name>find_min_lambda_ScalarSingletDM_Z2</name>
        <qualifiedname>Gambit::SpecBit::find_min_lambda_ScalarSingletDM_Z2</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1dbl__dbl__bool" kindref="compound">dbl_dbl_bool</ref> &amp;</type>
          <declname>vs_tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="333" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="333" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1abc5c376547743abb165e96eacbbba347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::find_min_lambda_ScalarSingletDM_Z3</definition>
        <argsstring>(dbl_dbl_bool &amp;vs_tuple)</argsstring>
        <name>find_min_lambda_ScalarSingletDM_Z3</name>
        <qualifiedname>Gambit::SpecBit::find_min_lambda_ScalarSingletDM_Z3</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1dbl__dbl__bool" kindref="compound">dbl_dbl_bool</ref> &amp;</type>
          <declname>vs_tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="343" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="343" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a3361e95a55145661a531c14a7fa4d26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::find_min_lambda_MDM</definition>
        <argsstring>(dbl_dbl_bool &amp;vs_tuple)</argsstring>
        <name>find_min_lambda_MDM</name>
        <qualifiedname>Gambit::SpecBit::find_min_lambda_MDM</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1dbl__dbl__bool" kindref="compound">dbl_dbl_bool</ref> &amp;</type>
          <declname>vs_tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="353" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="353" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1af7a27a34a7a133230082b5eac6044e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_expected_vacuum_lifetime</definition>
        <argsstring>(double &amp;lifetime)</argsstring>
        <name>get_expected_vacuum_lifetime</name>
        <qualifiedname>Gambit::SpecBit::get_expected_vacuum_lifetime</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>lifetime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="367" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="367" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a4a6227518c25968e1d683ded98c93fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::lnL_highscale_vacuum_decay_single_field</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>lnL_highscale_vacuum_decay_single_field</name>
        <qualifiedname>Gambit::SpecBit::lnL_highscale_vacuum_decay_single_field</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="383" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="383" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a39633b048051296eddca4b2d02df7d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_lambdaB</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>get_lambdaB</name>
        <qualifiedname>Gambit::SpecBit::get_lambdaB</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="405" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="405" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1ad30f85bcb06c928ea810a962a2bec1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::check_perturb_min_lambda</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>check_perturb_min_lambda</name>
        <qualifiedname>Gambit::SpecBit::check_perturb_min_lambda</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="414" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="414" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a9230e8a341b68b10bd6a6a4a4c45942a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_likelihood_VS</definition>
        <argsstring>(double &amp;result)</argsstring>
        <name>get_likelihood_VS</name>
        <qualifiedname>Gambit::SpecBit::get_likelihood_VS</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vacuum stability likelihood from a Vevacious run calculating the lifetime of &amp; tunneling probability to the vacuua </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="437" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="437" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a5ce2c8730e02bca53cb6cfa5af77136e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::get_VS_results</definition>
        <argsstring>(map_str_dbl &amp;result)</argsstring>
        <name>get_VS_results</name>
        <qualifiedname>Gambit::SpecBit::get_VS_results</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" kindref="member">map_str_dbl</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>get all results from VS as str to dbl map to easily print them </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="468" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="468" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a87dbdfb59226f9e3cf7ae393d0864038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::make_vpp_inputs</definition>
        <argsstring>(map_str_str &amp;opts)</argsstring>
        <name>make_vpp_inputs</name>
        <qualifiedname>Gambit::SpecBit::make_vpp_inputs</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1ae96b932df1a511063b912a23631f260b" kindref="member">map_str_str</ref> &amp;</type>
          <declname>opts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function that takes any <ref refid="namespaceYAML" kindref="compound">YAML</ref> options and makes the vevacious input, in the form of .xml files. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="491" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="491" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a3c5322744bb3bc2f3a1000bd8d1f71c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::set_panic_vacua</definition>
        <argsstring>(std::set&lt; std::string &gt; &amp;result)</argsstring>
        <name>set_panic_vacua</name>
        <qualifiedname>Gambit::SpecBit::set_panic_vacua</qualifiedname>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a string set containing a list with all likelihoods that vevacious should calculate. The options are tunneling to<itemizedlist>
<listitem><para>the global minimum -&gt; &quot;global&quot;</para>
</listitem><listitem><para>the nearest minimum -&gt; &quot;nearest&quot; Default behaviour (if no sub-capabilities are set): calculate both </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="916" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="916" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a0b62bdb4ea9e2702f6ed0ecf301708ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::set_tunnelling_strategy</definition>
        <argsstring>(std::set&lt; std::string &gt; &amp;result)</argsstring>
        <name>set_tunnelling_strategy</name>
        <qualifiedname>Gambit::SpecBit::set_tunnelling_strategy</qualifiedname>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a string set containing a list of the tunnelling strategies that vevacious should use. This could be<itemizedlist>
<listitem><para>quantum (zero-T) tunnelling to new minimum -&gt; &quot;quantum&quot;</para>
</listitem><listitem><para>thermal (finiite-T) tunnelling to new minimum -&gt; &quot;thermal&quot; Default behaviour is both </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="958" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="958" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1aa48f96bbbd0104b2515718351433bdd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::SpecBit::helper_set_tunnelingStrategy</definition>
        <argsstring>(std::set&lt; std::string &gt; tunnelling_strategy)</argsstring>
        <name>helper_set_tunnelingStrategy</name>
        <qualifiedname>Gambit::SpecBit::helper_set_tunnelingStrategy</qualifiedname>
        <param>
          <type>std::set&lt; std::string &gt;</type>
          <declname>tunnelling_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set tunnelling strategy for the different minima, either<itemizedlist>
<listitem><para>JustQuantum -&gt; only quantum</para>
</listitem><listitem><para>JustThermal -&gt; only thermal or</para>
</listitem><listitem><para>QuantumThenThermal -&gt; both depending on the strategy provided from the sub-capabilities </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1009" column="9" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1009" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a8ffbf0fd3ecb2cec6cf73c828a610413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::initialize_vevacious</definition>
        <argsstring>(std::string &amp;inputspath)</argsstring>
        <name>initialize_vevacious</name>
        <qualifiedname>Gambit::SpecBit::initialize_vevacious</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>inputspath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses the <ref refid="namespaceYAML" kindref="compound">YAML</ref> file for any settings, then passes to make_vpp_inputs to create .xml files for vevacious to run with. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1049" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1049" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1aa741e89b1679f2e744dfbb28f393ac82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vevacious_1_0::VevaciousPlusPlus::VevaciousPlusPlus</type>
        <definition>vevacious_1_0::VevaciousPlusPlus::VevaciousPlusPlus Gambit::SpecBit::exec_pass_spectrum_to_vevacious</definition>
        <argsstring>(SpectrumEntriesForVevacious &amp;pass_spectrum)</argsstring>
        <name>exec_pass_spectrum_to_vevacious</name>
        <qualifiedname>Gambit::SpecBit::exec_pass_spectrum_to_vevacious</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1SpectrumEntriesForVevacious" kindref="compound">SpectrumEntriesForVevacious</ref> &amp;</type>
          <declname>pass_spectrum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute the passing of the spectrum object (as SLHAea) to vevacious. It is a helper function and not a capability since this has to be executed before every single vevacious run. vevacious can run multiple times for a single point in parameter space depending on settings: -&gt; global and/or nearest minimum for tunneling requested? -&gt; multiple attempts for one vevacious run allowed? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1094" column="57" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1094" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1aa35e62ed8d72c6328f7fb1991305f7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::helper_run_vevacious</definition>
        <argsstring>(vevacious_1_0::VevaciousPlusPlus::VevaciousPlusPlus &amp;vevaciousPlusPlus, VevaciousResultContainer &amp;result, std::string panic_vacuum, std::string inputPath)</argsstring>
        <name>helper_run_vevacious</name>
        <qualifiedname>Gambit::SpecBit::helper_run_vevacious</qualifiedname>
        <param>
          <type>vevacious_1_0::VevaciousPlusPlus::VevaciousPlusPlus &amp;</type>
          <declname>vevaciousPlusPlus</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1VevaciousResultContainer" kindref="compound">VevaciousResultContainer</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>panic_vacuum</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>inputPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call vevacious, the result is either &quot;Stable&quot;, &quot;Metastable&quot; or &quot;Inconclusive&quot; in case a vevacious run failed for some reason </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1118" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1118" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1ad4c6affb30bad5dd7d3f1504c1dcb076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::helper_catch_vevacious</definition>
        <argsstring>(VevaciousResultContainer &amp;result, std::string panic_vacuum)</argsstring>
        <name>helper_catch_vevacious</name>
        <qualifiedname>Gambit::SpecBit::helper_catch_vevacious</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1VevaciousResultContainer" kindref="compound">VevaciousResultContainer</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>panic_vacuum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decide how to deal with a failed vevacious run --&gt; set lifetime and thermalProbability conservatively to a value easy to identify in analysis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1215" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1215" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a9e2bff935ed5ded0fc8341bd0cdd6728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::compare_panic_vacua</definition>
        <argsstring>(map_str_str &amp;result)</argsstring>
        <name>compare_panic_vacua</name>
        <qualifiedname>Gambit::SpecBit::compare_panic_vacua</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1ae96b932df1a511063b912a23631f260b" kindref="member">map_str_str</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If tunnelling to global and nearest vacuum are requested, this capability compares if the two vacua are the same. Return true if they coincide, false if not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1235" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1235" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1aec08dff07fccfccffe1dd5efb480545b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::check_vacuum_stability_vevacious</definition>
        <argsstring>(VevaciousResultContainer &amp;result)</argsstring>
        <name>check_vacuum_stability_vevacious</name>
        <qualifiedname>Gambit::SpecBit::check_vacuum_stability_vevacious</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1VevaciousResultContainer" kindref="compound">VevaciousResultContainer</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Check stability of global vacuum of the potential with vevacious. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1293" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1293" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1a43f68cb300aba8b8a4a42555c4f8b7a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::vevacious_file_location_MSSM</definition>
        <argsstring>(map_str_str &amp;result)</argsstring>
        <name>vevacious_file_location_MSSM</name>
        <qualifiedname>Gambit::SpecBit::vevacious_file_location_MSSM</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1ae96b932df1a511063b912a23631f260b" kindref="member">map_str_str</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Tell GAMBIT which files to work with for the MSSM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1349" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1349" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="SpecBit__VS_8cpp_1ab58b92ebff3b665989e4b8ffdd2842e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SpecBit::prepare_pass_MSSM_spectrum_to_vevacious</definition>
        <argsstring>(SpectrumEntriesForVevacious &amp;result)</argsstring>
        <name>prepare_pass_MSSM_spectrum_to_vevacious</name>
        <qualifiedname>Gambit::SpecBit::prepare_pass_MSSM_spectrum_to_vevacious</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SpecBit_1_1SpectrumEntriesForVevacious" kindref="compound">SpectrumEntriesForVevacious</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function adds all entries of the spectrum object (as SLHAea) that need to be passed to vevacious to an instance of type <ref refid="classGambit_1_1SpecBit_1_1SpectrumEntriesForVevacious" kindref="compound">SpectrumEntriesForVevacious</ref>. The actual passing happens in the helper function exec_pass_spectrum_to_vevacious which gets executed every time before a vevacious call. Model dependent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SpecBit/src/SpecBit_VS.cpp" line="1386" column="10" bodyfile="SpecBit/src/SpecBit_VS.cpp" bodystart="1386" bodyend="1643"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="SpecBit/examples/SpecBit_examples.cpp" line="38" column="3"/>
  </compounddef>
</doxygen>
