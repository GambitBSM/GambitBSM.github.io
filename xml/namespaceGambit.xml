<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit" kind="namespace" language="C++">
    <compoundname>Gambit</compoundname>
    <innerclass refid="structGambit_1_1____is__container____" prot="public">Gambit::__is_container__</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1array_3_01T_00_01N_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1deque_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::deque&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1forward__list_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::forward_list&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1list_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::list&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1map_3_01T1_00_01T2_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::map&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1multimap_3_01T1_00_01T2_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::multimap&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1multiset_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::multiset&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1set_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::set&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1unordered__map_3_01T1_00_01T2_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::unordered_map&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1unordered__multimap_3_01T1_00_01T2_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::unordered_multimap&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1unordered__multiset_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::unordered_multiset&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1unordered__set_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::unordered_set&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__container_____3_01std_1_1vector_3_01T_01_4_01_4" prot="public">Gambit::__is_container__&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__pair____" prot="public">Gambit::__is_pair__</innerclass>
    <innerclass refid="structGambit_1_1____is__pair_____3_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">Gambit::__is_pair__&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1____is__vector____" prot="public">Gambit::__is_vector__</innerclass>
    <innerclass refid="structGambit_1_1____is__vector_____3_01std_1_1vector_3_01T_01_4_01_4" prot="public">Gambit::__is_vector__&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1__err" prot="public">Gambit::_err</innerclass>
    <innerclass refid="structGambit_1_1always__false" prot="public">Gambit::always_false</innerclass>
    <innerclass refid="classGambit_1_1ASCIIdictReader" prot="public">Gambit::ASCIIdictReader</innerclass>
    <innerclass refid="classGambit_1_1ASCIItableReader" prot="public">Gambit::ASCIItableReader</innerclass>
    <innerclass refid="classGambit_1_1backend__functor" prot="public">Gambit::backend_functor</innerclass>
    <innerclass refid="classGambit_1_1backend__functor_3_01TYPE_07_5_08_07ARGS_8_8_8_08_00_01TYPE_00_01ARGS_8_8_8_01_4" prot="public">Gambit::backend_functor&lt; TYPE(*)(ARGS...), TYPE, ARGS... &gt;</innerclass>
    <innerclass refid="classGambit_1_1backend__functor_3_01typename_01variadic__ptr_3_01TYPE_00_01ARGS_8_8_8_01_4_1_1ty72d3974d93bcbccd5afc933e90698111" prot="public">Gambit::backend_functor&lt; typename variadic_ptr&lt; TYPE, ARGS... &gt;::type, TYPE, ARGS... &gt;</innerclass>
    <innerclass refid="classGambit_1_1backend__functor_3_01typename_01variadic__ptr_3_01void_00_01ARGS_8_8_8_01_4_1_1tyf70fe5b8dacf530fb4e50c81f52a10d6" prot="public">Gambit::backend_functor&lt; typename variadic_ptr&lt; void, ARGS... &gt;::type, void, ARGS... &gt;</innerclass>
    <innerclass refid="classGambit_1_1backend__functor_3_01void_07_5_08_07ARGS_8_8_8_08_00_01void_00_01ARGS_8_8_8_01_4" prot="public">Gambit::backend_functor&lt; void(*)(ARGS...), void, ARGS... &gt;</innerclass>
    <innerclass refid="classGambit_1_1backend__functor__common" prot="public">Gambit::backend_functor_common</innerclass>
    <innerclass refid="classGambit_1_1BBN__container" prot="public">Gambit::BBN_container</innerclass>
    <innerclass refid="classGambit_1_1BE__bucket__base" prot="public">Gambit::BE_bucket_base</innerclass>
    <innerclass refid="classGambit_1_1BEfunction__bucket" prot="public">Gambit::BEfunction_bucket</innerclass>
    <innerclass refid="classGambit_1_1BEfunction__bucket_3_01TYPE_07_5_08_07ARGS_8_8_8_08_00_01TYPE_00_01ARGS_8_8_8_01_4" prot="public">Gambit::BEfunction_bucket&lt; TYPE(*)(ARGS...), TYPE, ARGS... &gt;</innerclass>
    <innerclass refid="classGambit_1_1BEfunction__bucket_3_01typename_01variadic__ptr_3_01TYPE_00_01ARGS_8_8_8_01_4_1_15dd60a923b4ad82c804e05a59e6e7510" prot="public">Gambit::BEfunction_bucket&lt; typename variadic_ptr&lt; TYPE, ARGS... &gt;::type, TYPE, ARGS... &gt;</innerclass>
    <innerclass refid="classGambit_1_1BEfunction__bucket__common" prot="public">Gambit::BEfunction_bucket_common</innerclass>
    <innerclass refid="classGambit_1_1BEvariable__bucket" prot="public">Gambit::BEvariable_bucket</innerclass>
    <innerclass refid="classGambit_1_1BibTeX" prot="public">Gambit::BibTeX</innerclass>
    <innerclass refid="structGambit_1_1CalcHEP__interface" prot="public">Gambit::CalcHEP_interface</innerclass>
    <innerclass refid="classGambit_1_1CallFcn" prot="public">Gambit::CallFcn</innerclass>
    <innerclass refid="classGambit_1_1CallFcn_3_01HostSpec_00_01MapTag_1_1Get_01_4" prot="public">Gambit::CallFcn&lt; HostSpec, MapTag::Get &gt;</innerclass>
    <innerclass refid="classGambit_1_1CallFcn_3_01HostSpec_00_01MapTag_1_1Set_01_4" prot="public">Gambit::CallFcn&lt; HostSpec, MapTag::Set &gt;</innerclass>
    <innerclass refid="structGambit_1_1capability__info" prot="public">Gambit::capability_info</innerclass>
    <innerclass refid="structGambit_1_1checkfavvio__type" prot="public">Gambit::checkfavvio_type</innerclass>
    <innerclass refid="classGambit_1_1Cholesky" prot="public">Gambit::Cholesky</innerclass>
    <innerclass refid="structGambit_1_1clik__lensing__object" prot="public">Gambit::clik_lensing_object</innerclass>
    <innerclass refid="structGambit_1_1colorBasis" prot="public">Gambit::colorBasis</innerclass>
    <innerclass refid="structGambit_1_1dbl__dbl__bool" prot="public">Gambit::dbl_dbl_bool</innerclass>
    <innerclass refid="structGambit_1_1DD__coupling__container" prot="public">Gambit::DD_coupling_container</innerclass>
    <innerclass refid="classGambit_1_1DecayTable" prot="public">Gambit::DecayTable</innerclass>
    <innerclass refid="structGambit_1_1DefaultTraits" prot="public">Gambit::DefaultTraits</innerclass>
    <innerclass refid="classGambit_1_1dep__bucket" prot="public">Gambit::dep_bucket</innerclass>
    <innerclass refid="classGambit_1_1DescriptionDatabase" prot="public">Gambit::DescriptionDatabase</innerclass>
    <innerclass refid="structGambit_1_1div__ints__by__half" prot="public">Gambit::div_ints_by_half</innerclass>
    <innerclass refid="structGambit_1_1DM__nucleon__couplings" prot="public">Gambit::DM_nucleon_couplings</innerclass>
    <innerclass refid="structGambit_1_1DS5__COUPLINGCONSTANTS" prot="public">Gambit::DS5_COUPLINGCONSTANTS</innerclass>
    <innerclass refid="structGambit_1_1DS5__DDCOM" prot="public">Gambit::DS5_DDCOM</innerclass>
    <innerclass refid="structGambit_1_1DS5__HMCOM" prot="public">Gambit::DS5_HMCOM</innerclass>
    <innerclass refid="structGambit_1_1DS5__MSPCTM" prot="public">Gambit::DS5_MSPCTM</innerclass>
    <innerclass refid="structGambit_1_1DS5__NUCOM" prot="public">Gambit::DS5_NUCOM</innerclass>
    <innerclass refid="structGambit_1_1DS5__PACODES" prot="public">Gambit::DS5_PACODES</innerclass>
    <innerclass refid="structGambit_1_1DS5__RDMGEV" prot="public">Gambit::DS5_RDMGEV</innerclass>
    <innerclass refid="structGambit_1_1DS5__SCKM" prot="public">Gambit::DS5_SCKM</innerclass>
    <innerclass refid="structGambit_1_1DS5__SMCUSEFUL" prot="public">Gambit::DS5_SMCUSEFUL</innerclass>
    <innerclass refid="structGambit_1_1DS5__SMRUSEFUL" prot="public">Gambit::DS5_SMRUSEFUL</innerclass>
    <innerclass refid="structGambit_1_1DS5__WIDTHS" prot="public">Gambit::DS5_WIDTHS</innerclass>
    <innerclass refid="structGambit_1_1DS__COUPLINGCONSTANTS" prot="public">Gambit::DS_COUPLINGCONSTANTS</innerclass>
    <innerclass refid="structGambit_1_1DS__COUPLINGCONSTANTS61" prot="public">Gambit::DS_COUPLINGCONSTANTS61</innerclass>
    <innerclass refid="structGambit_1_1DS__DDCOMLEGACY" prot="public">Gambit::DS_DDCOMLEGACY</innerclass>
    <innerclass refid="structGambit_1_1DS__DDMSSMCOM" prot="public">Gambit::DS_DDMSSMCOM</innerclass>
    <innerclass refid="structGambit_1_1DS__DSANCOANN" prot="public">Gambit::DS_DSANCOANN</innerclass>
    <innerclass refid="structGambit_1_1DS__gg" prot="public">Gambit::DS_gg</innerclass>
    <innerclass refid="structGambit_1_1DS__HMCOM" prot="public">Gambit::DS_HMCOM</innerclass>
    <innerclass refid="structGambit_1_1DS__HMFRAMEVELCOM" prot="public">Gambit::DS_HMFRAMEVELCOM</innerclass>
    <innerclass refid="structGambit_1_1DS__HMISODF" prot="public">Gambit::DS_HMISODF</innerclass>
    <innerclass refid="structGambit_1_1DS__HMNOCLUE" prot="public">Gambit::DS_HMNOCLUE</innerclass>
    <innerclass refid="structGambit_1_1DS__IBINTVARS" prot="public">Gambit::DS_IBINTVARS</innerclass>
    <innerclass refid="structGambit_1_1DS__INTDOF" prot="public">Gambit::DS_INTDOF</innerclass>
    <innerclass refid="structGambit_1_1DS__MIXING" prot="public">Gambit::DS_MIXING</innerclass>
    <innerclass refid="structGambit_1_1DS__MSSMIUSEFUL" prot="public">Gambit::DS_MSSMIUSEFUL</innerclass>
    <innerclass refid="structGambit_1_1DS__MSSMMIXING" prot="public">Gambit::DS_MSSMMIXING</innerclass>
    <innerclass refid="structGambit_1_1DS__MSSMPAR" prot="public">Gambit::DS_MSSMPAR</innerclass>
    <innerclass refid="structGambit_1_1DS__MSSMSWITCH" prot="public">Gambit::DS_MSSMSWITCH</innerclass>
    <innerclass refid="structGambit_1_1DS__MSSMTYPE" prot="public">Gambit::DS_MSSMTYPE</innerclass>
    <innerclass refid="structGambit_1_1DS__MSSMWIDTHS" prot="public">Gambit::DS_MSSMWIDTHS</innerclass>
    <innerclass refid="structGambit_1_1DS__NUCOM" prot="public">Gambit::DS_NUCOM</innerclass>
    <innerclass refid="structGambit_1_1DS__PACODES__MSSM" prot="public">Gambit::DS_PACODES_MSSM</innerclass>
    <innerclass refid="structGambit_1_1DS__PACODES__MSSM61" prot="public">Gambit::DS_PACODES_MSSM61</innerclass>
    <innerclass refid="structGambit_1_1DS__PMASSES" prot="public">Gambit::DS_PMASSES</innerclass>
    <innerclass refid="structGambit_1_1DS__PWIDTHS" prot="public">Gambit::DS_PWIDTHS</innerclass>
    <innerclass refid="structGambit_1_1DS__RDDOF" prot="public">Gambit::DS_RDDOF</innerclass>
    <innerclass refid="structGambit_1_1DS__RDERRORS" prot="public">Gambit::DS_RDERRORS</innerclass>
    <innerclass refid="structGambit_1_1DS__RDLUN" prot="public">Gambit::DS_RDLUN</innerclass>
    <innerclass refid="structGambit_1_1DS__RDPADD" prot="public">Gambit::DS_RDPADD</innerclass>
    <innerclass refid="structGambit_1_1DS__RDPARS" prot="public">Gambit::DS_RDPARS</innerclass>
    <innerclass refid="structGambit_1_1DS__RDPTH" prot="public">Gambit::DS_RDPTH</innerclass>
    <innerclass refid="structGambit_1_1DS__RDSWITCH" prot="public">Gambit::DS_RDSWITCH</innerclass>
    <innerclass refid="structGambit_1_1DS__RDTIME" prot="public">Gambit::DS_RDTIME</innerclass>
    <innerclass refid="structGambit_1_1DS__SCKM" prot="public">Gambit::DS_SCKM</innerclass>
    <innerclass refid="structGambit_1_1DS__SFERMIONMASS" prot="public">Gambit::DS_SFERMIONMASS</innerclass>
    <innerclass refid="structGambit_1_1DS__SMCOUPLING" prot="public">Gambit::DS_SMCOUPLING</innerclass>
    <innerclass refid="structGambit_1_1DS__SMCOUPLING61" prot="public">Gambit::DS_SMCOUPLING61</innerclass>
    <innerclass refid="structGambit_1_1DS__SMQUARKMASSES" prot="public">Gambit::DS_SMQUARKMASSES</innerclass>
    <innerclass refid="structGambit_1_1DS__VRTXS" prot="public">Gambit::DS_VRTXS</innerclass>
    <innerclass refid="classGambit_1_1DummyInput" prot="public">Gambit::DummyInput</innerclass>
    <innerclass refid="classGambit_1_1DummyModel" prot="public">Gambit::DummyModel</innerclass>
    <innerclass refid="structGambit_1_1enable__if__all__member" prot="public">Gambit::enable_if_all_member</innerclass>
    <innerclass refid="structGambit_1_1enable__if__all__member__vector" prot="public">Gambit::enable_if_all_member_vector</innerclass>
    <innerclass refid="structGambit_1_1enable__if__not__all__member" prot="public">Gambit::enable_if_not_all_member</innerclass>
    <innerclass refid="structGambit_1_1enable__if__not__all__member__vector" prot="public">Gambit::enable_if_not_all_member_vector</innerclass>
    <innerclass refid="structGambit_1_1enable__if__not__one__member" prot="public">Gambit::enable_if_not_one_member</innerclass>
    <innerclass refid="structGambit_1_1enable__if__not__one__member__vector" prot="public">Gambit::enable_if_not_one_member_vector</innerclass>
    <innerclass refid="structGambit_1_1enable__if__one__member" prot="public">Gambit::enable_if_one_member</innerclass>
    <innerclass refid="structGambit_1_1enable__if__one__member__vector" prot="public">Gambit::enable_if_one_member_vector</innerclass>
    <innerclass refid="classGambit_1_1error" prot="public">Gambit::error</innerclass>
    <innerclass refid="classGambit_1_1exception" prot="public">Gambit::exception</innerclass>
    <innerclass refid="classGambit_1_1Farray" prot="public">Gambit::Farray</innerclass>
    <innerclass refid="structGambit_1_1FcnInfo1" prot="public">Gambit::FcnInfo1</innerclass>
    <innerclass refid="structGambit_1_1FcnInfo2" prot="public">Gambit::FcnInfo2</innerclass>
    <innerclass refid="classGambit_1_1FcomplexT" prot="public">Gambit::FcomplexT</innerclass>
    <innerclass refid="structGambit_1_1fh__Couplings__container" prot="public">Gambit::fh_Couplings_container</innerclass>
    <innerclass refid="structGambit_1_1fh__FlavourObs__container" prot="public">Gambit::fh_FlavourObs_container</innerclass>
    <innerclass refid="structGambit_1_1fh__HiggsMassObs__container" prot="public">Gambit::fh_HiggsMassObs_container</innerclass>
    <innerclass refid="structGambit_1_1fh__HiggsProd__container" prot="public">Gambit::fh_HiggsProd_container</innerclass>
    <innerclass refid="structGambit_1_1fh__MSSMMassObs__container" prot="public">Gambit::fh_MSSMMassObs_container</innerclass>
    <innerclass refid="structGambit_1_1fh__PrecisionObs__container" prot="public">Gambit::fh_PrecisionObs_container</innerclass>
    <innerclass refid="structGambit_1_1Finputs" prot="public">Gambit::Finputs</innerclass>
    <innerclass refid="structGambit_1_1flav__prediction" prot="public">Gambit::flav_prediction</innerclass>
    <innerclass refid="structGambit_1_1flavviolation__type" prot="public">Gambit::flavviolation_type</innerclass>
    <innerclass refid="structGambit_1_1flhaparam" prot="public">Gambit::flhaparam</innerclass>
    <innerclass refid="classGambit_1_1FptrFinder" prot="public">Gambit::FptrFinder</innerclass>
    <innerclass refid="classGambit_1_1Fstring" prot="public">Gambit::Fstring</innerclass>
    <innerclass refid="classGambit_1_1FstringArray" prot="public">Gambit::FstringArray</innerclass>
    <innerclass refid="classGambit_1_1functor" prot="public">Gambit::functor</innerclass>
    <innerclass refid="structGambit_1_1GalacticHaloProperties" prot="public">Gambit::GalacticHaloProperties</innerclass>
    <innerclass refid="classGambit_1_1gambit__core" prot="public">Gambit::gambit_core</innerclass>
    <innerclass refid="structGambit_1_1gambit__inflation__observables" prot="public">Gambit::gambit_inflation_observables</innerclass>
    <innerclass refid="classGambit_1_1halt__loop__exception" prot="public">Gambit::halt_loop_exception</innerclass>
    <innerclass refid="classGambit_1_1HardShutdownException" prot="public">Gambit::HardShutdownException</innerclass>
    <innerclass refid="structGambit_1_1hb__ModelParameters" prot="public">Gambit::hb_ModelParameters</innerclass>
    <innerclass refid="structGambit_1_1hb__ModelParameters__effC" prot="public">Gambit::hb_ModelParameters_effC</innerclass>
    <innerclass refid="structGambit_1_1hd__golddec__type" prot="public">Gambit::hd_golddec_type</innerclass>
    <innerclass refid="classGambit_1_1HiggsCouplingsTable" prot="public">Gambit::HiggsCouplingsTable</innerclass>
    <innerclass refid="structGambit_1_1indnuis" prot="public">Gambit::indnuis</innerclass>
    <innerclass refid="classGambit_1_1invalid__loop__iteration__exception" prot="public">Gambit::invalid_loop_iteration_exception</innerclass>
    <innerclass refid="classGambit_1_1invalid__point__exception" prot="public">Gambit::invalid_point_exception</innerclass>
    <innerclass refid="structGambit_1_1is__all__member" prot="public">Gambit::is_all_member</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__internal" prot="public">Gambit::is_all_member_internal</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__internal_3_01type_00_01void_07_08_4" prot="public">Gambit::is_all_member_internal&lt; type, void()&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__internal_3_01type_00_01void_07T_00_01args_8_8_8_08_4" prot="public">Gambit::is_all_member_internal&lt; type, void(T, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__vector" prot="public">Gambit::is_all_member_vector</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__vector__internal" prot="public">Gambit::is_all_member_vector_internal</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__vector__internal_3_01void_07_08_4" prot="public">Gambit::is_all_member_vector_internal&lt; void()&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__vector__internal_3_01void_07const_01std_1_1vector_3_01T_01_4_01_6_00_01args_8_8_8_08_4" prot="public">Gambit::is_all_member_vector_internal&lt; void(const std::vector&lt; T &gt; &amp;, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__vector__internal_3_01void_07std_1_1vector_3_01T_01_4_01_6_00_01args_8_8_8_08_4" prot="public">Gambit::is_all_member_vector_internal&lt; void(std::vector&lt; T &gt; &amp;, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__vector__internal_3_01void_07std_1_1vector_3_01T_01_4_00_01args_8_8_8_08_4" prot="public">Gambit::is_all_member_vector_internal&lt; void(std::vector&lt; T &gt;, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__all__member__vector__internal_3_01void_07T_00_01args_8_8_8_08_4" prot="public">Gambit::is_all_member_vector_internal&lt; void(T, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__container" prot="public">Gambit::is_container</innerclass>
    <innerclass refid="structGambit_1_1is__one__member" prot="public">Gambit::is_one_member</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__internal" prot="public">Gambit::is_one_member_internal</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__internal_3_01type_00_01void_07_08_4" prot="public">Gambit::is_one_member_internal&lt; type, void()&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__internal_3_01type_00_01void_07T_00_01args_8_8_8_08_4" prot="public">Gambit::is_one_member_internal&lt; type, void(T, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__vector" prot="public">Gambit::is_one_member_vector</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__vector__internal" prot="public">Gambit::is_one_member_vector_internal</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__vector__internal_3_01void_07_08_4" prot="public">Gambit::is_one_member_vector_internal&lt; void()&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__vector__internal_3_01void_07const_01std_1_1vector_3_01T_01_4_01_6_00_01args_8_8_8_08_4" prot="public">Gambit::is_one_member_vector_internal&lt; void(const std::vector&lt; T &gt; &amp;, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__vector__internal_3_01void_07std_1_1vector_3_01T_01_4_01_6_00_01args_8_8_8_08_4" prot="public">Gambit::is_one_member_vector_internal&lt; void(std::vector&lt; T &gt; &amp;, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__vector__internal_3_01void_07std_1_1vector_3_01T_01_4_00_01args_8_8_8_08_4" prot="public">Gambit::is_one_member_vector_internal&lt; void(std::vector&lt; T &gt;, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__one__member__vector__internal_3_01void_07T_00_01args_8_8_8_08_4" prot="public">Gambit::is_one_member_vector_internal&lt; void(T, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1is__pair" prot="public">Gambit::is_pair</innerclass>
    <innerclass refid="structGambit_1_1is__same__type" prot="public">Gambit::is_same_type</innerclass>
    <innerclass refid="structGambit_1_1is__same__type_3_01mult__types_3_01args_8_8_8_01_4_00_01T_01_4" prot="public">Gambit::is_same_type&lt; mult_types&lt; args... &gt;, T &gt;</innerclass>
    <innerclass refid="structGambit_1_1is__same__type_3_01T_00_01T_01_4" prot="public">Gambit::is_same_type&lt; T, T &gt;</innerclass>
    <innerclass refid="structGambit_1_1is__same__type__internal" prot="public">Gambit::is_same_type_internal</innerclass>
    <innerclass refid="structGambit_1_1is__same__type__internal_3_01void_07_08_00_01type_01_4" prot="public">Gambit::is_same_type_internal&lt; void(), type &gt;</innerclass>
    <innerclass refid="structGambit_1_1is__same__type__internal_3_01void_07T_00_01args_8_8_8_08_00_01T_01_4" prot="public">Gambit::is_same_type_internal&lt; void(T, args...), T &gt;</innerclass>
    <innerclass refid="structGambit_1_1is__same__type__internal_3_01void_07T_00_01args_8_8_8_08_00_01type_01_4" prot="public">Gambit::is_same_type_internal&lt; void(T, args...), type &gt;</innerclass>
    <innerclass refid="structGambit_1_1is__vector" prot="public">Gambit::is_vector</innerclass>
    <innerclass refid="structGambit_1_1libFarrayTest__CB2__type" prot="public">Gambit::libFarrayTest_CB2_type</innerclass>
    <innerclass refid="structGambit_1_1libFarrayTest__CB3__type" prot="public">Gambit::libFarrayTest_CB3_type</innerclass>
    <innerclass refid="structGambit_1_1libFarrayTest__CB__type" prot="public">Gambit::libFarrayTest_CB_type</innerclass>
    <innerclass refid="classGambit_1_1Likelihood__Container" prot="public">Gambit::Likelihood_Container</innerclass>
    <innerclass refid="classGambit_1_1Likelihood__Container__Factory" prot="public">Gambit::Likelihood_Container_Factory</innerclass>
    <innerclass refid="structGambit_1_1LocalMaxwellianHalo" prot="public">Gambit::LocalMaxwellianHalo</innerclass>
    <innerclass refid="structGambit_1_1MapCollection" prot="public">Gambit::MapCollection</innerclass>
    <innerclass refid="structGambit_1_1MapTag" prot="public">Gambit::MapTag</innerclass>
    <innerclass refid="structGambit_1_1MapTypes" prot="public">Gambit::MapTypes</innerclass>
    <innerclass refid="structGambit_1_1MapTypes_3_01DerivedSpec_00_01MapTag_1_1Get_01_4" prot="public">Gambit::MapTypes&lt; DerivedSpec, MapTag::Get &gt;</innerclass>
    <innerclass refid="structGambit_1_1MapTypes_3_01DerivedSpec_00_01MapTag_1_1Set_01_4" prot="public">Gambit::MapTypes&lt; DerivedSpec, MapTag::Set &gt;</innerclass>
    <innerclass refid="structGambit_1_1mass__es__pseudonyms" prot="public">Gambit::mass_es_pseudonyms</innerclass>
    <innerclass refid="classGambit_1_1mathematica__variable" prot="public">Gambit::mathematica_variable</innerclass>
    <innerclass refid="structGambit_1_1Mesons__decay__constants" prot="public">Gambit::Mesons_decay_constants</innerclass>
    <innerclass refid="structGambit_1_1Mesons__masses" prot="public">Gambit::Mesons_masses</innerclass>
    <innerclass refid="classGambit_1_1model__functor" prot="public">Gambit::model_functor</innerclass>
    <innerclass refid="structGambit_1_1model__info" prot="public">Gambit::model_info</innerclass>
    <innerclass refid="classGambit_1_1ModelHierarchy" prot="public">Gambit::ModelHierarchy</innerclass>
    <innerclass refid="classGambit_1_1ModelParameters" prot="public">Gambit::ModelParameters</innerclass>
    <innerclass refid="classGambit_1_1module__functor" prot="public">Gambit::module_functor</innerclass>
    <innerclass refid="classGambit_1_1module__functor_3_01void_01_4" prot="public">Gambit::module_functor&lt; void &gt;</innerclass>
    <innerclass refid="classGambit_1_1module__functor__common" prot="public">Gambit::module_functor_common</innerclass>
    <innerclass refid="classGambit_1_1MPIShutdownException" prot="public">Gambit::MPIShutdownException</innerclass>
    <innerclass refid="classGambit_1_1MSSMea" prot="public">Gambit::MSSMea</innerclass>
    <innerclass refid="classGambit_1_1MSSMSimpleSpec" prot="public">Gambit::MSSMSimpleSpec</innerclass>
    <innerclass refid="structGambit_1_1mult__types" prot="public">Gambit::mult_types</innerclass>
    <innerclass refid="classGambit_1_1Multimode__inputs" prot="public">Gambit::Multimode_inputs</innerclass>
    <innerclass refid="structGambit_1_1NREO__DM__nucleon__couplings" prot="public">Gambit::NREO_DM_nucleon_couplings</innerclass>
    <innerclass refid="structGambit_1_1nuisance" prot="public">Gambit::nuisance</innerclass>
    <innerclass refid="structGambit_1_1nuiscorr" prot="public">Gambit::nuiscorr</innerclass>
    <innerclass refid="structGambit_1_1numout" prot="public">Gambit::numout</innerclass>
    <innerclass refid="structGambit_1_1obsname" prot="public">Gambit::obsname</innerclass>
    <innerclass refid="classGambit_1_1omp__safe__ptr" prot="public">Gambit::omp_safe_ptr</innerclass>
    <innerclass refid="classGambit_1_1Options" prot="public">Gambit::Options</innerclass>
    <innerclass refid="structGambit_1_1OverrideMaps" prot="public">Gambit::OverrideMaps</innerclass>
    <innerclass refid="structGambit_1_1parameters" prot="public">Gambit::parameters</innerclass>
    <innerclass refid="structGambit_1_1particle2" prot="public">Gambit::particle2</innerclass>
    <innerclass refid="structGambit_1_1particle23" prot="public">Gambit::particle23</innerclass>
    <innerclass refid="classGambit_1_1PID__pair" prot="public">Gambit::PID_pair</innerclass>
    <innerclass refid="classGambit_1_1Piped__exceptions" prot="public">Gambit::Piped_exceptions</innerclass>
    <innerclass refid="classGambit_1_1Piped__invalid__point" prot="public">Gambit::Piped_invalid_point</innerclass>
    <innerclass refid="classGambit_1_1primary__model__functor" prot="public">Gambit::primary_model_functor</innerclass>
    <innerclass refid="classGambit_1_1prospino__settings" prot="public">Gambit::prospino_settings</innerclass>
    <innerclass refid="classGambit_1_1python__variable" prot="public">Gambit::python_variable</innerclass>
    <innerclass refid="classGambit_1_1Random" prot="public">Gambit::Random</innerclass>
    <innerclass refid="classGambit_1_1reg__elem" prot="public">Gambit::reg_elem</innerclass>
    <innerclass refid="structGambit_1_1remove__all" prot="public">Gambit::remove_all</innerclass>
    <innerclass refid="classGambit_1_1safe__ptr" prot="public">Gambit::safe_ptr</innerclass>
    <innerclass refid="classGambit_1_1safe__variable__ptr" prot="public">Gambit::safe_variable_ptr</innerclass>
    <innerclass refid="classGambit_1_1SafeBool" prot="public">Gambit::SafeBool</innerclass>
    <innerclass refid="classGambit_1_1safety__bucket__base" prot="public">Gambit::safety_bucket_base</innerclass>
    <innerclass refid="structGambit_1_1sd__char2body__type" prot="public">Gambit::sd_char2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__char2bodygrav__type" prot="public">Gambit::sd_char2bodygrav_type</innerclass>
    <innerclass refid="structGambit_1_1sd__char3body__type" prot="public">Gambit::sd_char3body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__charwidth__type" prot="public">Gambit::sd_charwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__glui2body__type" prot="public">Gambit::sd_glui2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__glui3body__type" prot="public">Gambit::sd_glui3body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__gluiloop__type" prot="public">Gambit::sd_gluiloop_type</innerclass>
    <innerclass refid="structGambit_1_1sd__gluiwidth__type" prot="public">Gambit::sd_gluiwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__leshouches1__type" prot="public">Gambit::sd_leshouches1_type</innerclass>
    <innerclass refid="structGambit_1_1sd__leshouches2__type" prot="public">Gambit::sd_leshouches2_type</innerclass>
    <innerclass refid="structGambit_1_1sd__mbmb__type" prot="public">Gambit::sd_mbmb_type</innerclass>
    <innerclass refid="structGambit_1_1sd__neut2body__type" prot="public">Gambit::sd_neut2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__neut2bodygrav__type" prot="public">Gambit::sd_neut2bodygrav_type</innerclass>
    <innerclass refid="structGambit_1_1sd__neut3body__type" prot="public">Gambit::sd_neut3body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__neutloop__type" prot="public">Gambit::sd_neutloop_type</innerclass>
    <innerclass refid="structGambit_1_1sd__neutwidth__type" prot="public">Gambit::sd_neutwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sbot2body__type" prot="public">Gambit::sd_sbot2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sbot3body__type" prot="public">Gambit::sd_sbot3body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sbotwidth__type" prot="public">Gambit::sd_sbotwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sdown2body__type" prot="public">Gambit::sd_sdown2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sdownwidth__type" prot="public">Gambit::sd_sdownwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sel2body__type" prot="public">Gambit::sd_sel2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__selectron__type" prot="public">Gambit::sd_selectron_type</innerclass>
    <innerclass refid="structGambit_1_1sd__selwidth__type" prot="public">Gambit::sd_selwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__snel2body__type" prot="public">Gambit::sd_snel2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__snelwidth__type" prot="public">Gambit::sd_snelwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sntau2body__type" prot="public">Gambit::sd_sntau2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sntauwidth__type" prot="public">Gambit::sd_sntauwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stau2body__type" prot="public">Gambit::sd_stau2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stau2bodygrav__type" prot="public">Gambit::sd_stau2bodygrav_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stauwidth__type" prot="public">Gambit::sd_stauwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stop2body__type" prot="public">Gambit::sd_stop2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stop3body__type" prot="public">Gambit::sd_stop3body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stop4body__type" prot="public">Gambit::sd_stop4body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stoploop__type" prot="public">Gambit::sd_stoploop_type</innerclass>
    <innerclass refid="structGambit_1_1sd__stopwidth__type" prot="public">Gambit::sd_stopwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__sup2body__type" prot="public">Gambit::sd_sup2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__supwidth__type" prot="public">Gambit::sd_supwidth_type</innerclass>
    <innerclass refid="structGambit_1_1sd__top2body__type" prot="public">Gambit::sd_top2body_type</innerclass>
    <innerclass refid="structGambit_1_1sd__topwidth__type" prot="public">Gambit::sd_topwidth_type</innerclass>
    <innerclass refid="classGambit_1_1SetMaps" prot="public">Gambit::SetMaps</innerclass>
    <innerclass refid="classGambit_1_1SignalData" prot="public">Gambit::SignalData</innerclass>
    <innerclass refid="classGambit_1_1SilentShutdownException" prot="public">Gambit::SilentShutdownException</innerclass>
    <innerclass refid="structGambit_1_1slha__leshouches2__hdec__type" prot="public">Gambit::slha_leshouches2_hdec_type</innerclass>
    <innerclass refid="classGambit_1_1SLHAeaModel" prot="public">Gambit::SLHAeaModel</innerclass>
    <innerclass refid="classGambit_1_1SLHASimpleSpec" prot="public">Gambit::SLHASimpleSpec</innerclass>
    <innerclass refid="classGambit_1_1SMea" prot="public">Gambit::SMea</innerclass>
    <innerclass refid="structGambit_1_1SMInputs" prot="public">Gambit::SMInputs</innerclass>
    <innerclass refid="classGambit_1_1SMSimpleSpec" prot="public">Gambit::SMSimpleSpec</innerclass>
    <innerclass refid="classGambit_1_1SoftShutdownException" prot="public">Gambit::SoftShutdownException</innerclass>
    <innerclass refid="classGambit_1_1Spec" prot="public">Gambit::Spec</innerclass>
    <innerclass refid="classGambit_1_1special__exception" prot="public">Gambit::special_exception</innerclass>
    <innerclass refid="classGambit_1_1SpecOverrideOptions" prot="public">Gambit::SpecOverrideOptions</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits" prot="public">Gambit::SpecTraits</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01Models_1_1DiracSingletDM__Z2SimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; Models::DiracSingletDM_Z2SimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01Models_1_1DMEFTSimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; Models::DMEFTSimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01Models_1_1MajoranaSingletDM__Z2SimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; Models::MajoranaSingletDM_Z2SimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01Models_1_1ScalarSingletDM__Z2SimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; Models::ScalarSingletDM_Z2SimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01Models_1_1ScalarSingletDM__Z3SimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; Models::ScalarSingletDM_Z3SimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01Models_1_1VectorSingletDM__Z2SimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; Models::VectorSingletDM_Z2SimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01MSSMSimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; MSSMSimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01SMSimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; SMSimpleSpec &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01SpecBit_1_1MDMSpec_3_01MI_01_4_01_4" prot="public">Gambit::SpecTraits&lt; SpecBit::MDMSpec&lt; MI &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01SpecBit_1_1MSSMSpec_3_01MI_01_4_01_4" prot="public">Gambit::SpecTraits&lt; SpecBit::MSSMSpec&lt; MI &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01SpecBit_1_1QedQcdWrapper_01_4" prot="public">Gambit::SpecTraits&lt; SpecBit::QedQcdWrapper &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01SpecBit_1_1ScalarSingletDM__Z2Spec_3_01MI_01_4_01_4" prot="public">Gambit::SpecTraits&lt; SpecBit::ScalarSingletDM_Z2Spec&lt; MI &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01SpecBit_1_1ScalarSingletDM__Z3Spec_3_01MI_01_4_01_4" prot="public">Gambit::SpecTraits&lt; SpecBit::ScalarSingletDM_Z3Spec&lt; MI &gt; &gt;</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits_3_01SpecBit_1_1SMHiggsSimpleSpec_01_4" prot="public">Gambit::SpecTraits&lt; SpecBit::SMHiggsSimpleSpec &gt;</innerclass>
    <innerclass refid="classGambit_1_1Spectrum" prot="public">Gambit::Spectrum</innerclass>
    <innerclass refid="classGambit_1_1SpectrumParameter" prot="public">Gambit::SpectrumParameter</innerclass>
    <innerclass refid="classGambit_1_1SubSpectrum" prot="public">Gambit::SubSpectrum</innerclass>
    <innerclass refid="classGambit_1_1SubSpectrumContents" prot="public">Gambit::SubSpectrumContents</innerclass>
    <innerclass refid="structGambit_1_1susyhitin__type" prot="public">Gambit::susyhitin_type</innerclass>
    <innerclass refid="classGambit_1_1table__formatter" prot="public">Gambit::table_formatter</innerclass>
    <innerclass refid="structGambit_1_1triplet" prot="public">Gambit::triplet</innerclass>
    <innerclass refid="structGambit_1_1type__equal__to" prot="public">Gambit::type_equal_to</innerclass>
    <innerclass refid="structGambit_1_1type__hasher" prot="public">Gambit::type_hasher</innerclass>
    <innerclass refid="structGambit_1_1type__index" prot="public">Gambit::type_index</innerclass>
    <innerclass refid="structGambit_1_1variadic__ptr" prot="public">Gambit::variadic_ptr</innerclass>
    <innerclass refid="classGambit_1_1VerifyContents" prot="public">Gambit::VerifyContents</innerclass>
    <innerclass refid="classGambit_1_1warning" prot="public">Gambit::warning</innerclass>
    <innerclass refid="structGambit_1_1widtha__hdec__type" prot="public">Gambit::widtha_hdec_type</innerclass>
    <innerclass refid="structGambit_1_1widthhc__hdec__type" prot="public">Gambit::widthhc_hdec_type</innerclass>
    <innerclass refid="structGambit_1_1widthhh__hdec__type" prot="public">Gambit::widthhh_hdec_type</innerclass>
    <innerclass refid="structGambit_1_1widthhl__hdec__type" prot="public">Gambit::widthhl_hdec_type</innerclass>
    <innerclass refid="classGambit_1_1WIMP__annihilation" prot="public">Gambit::WIMP_annihilation</innerclass>
    <innerclass refid="structGambit_1_1WIMPprops" prot="public">Gambit::WIMPprops</innerclass>
    <innerclass refid="structGambit_1_1wisfer__hdec__type" prot="public">Gambit::wisfer_hdec_type</innerclass>
    <innerclass refid="structGambit_1_1wisusy__hdec__type" prot="public">Gambit::wisusy_hdec_type</innerclass>
    <innernamespace refid="namespaceGambit_1_1AlterBBN__2__2">Gambit::AlterBBN_2_2</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Backends">Gambit::Backends</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ColliderBit">Gambit::ColliderBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1CosmoBit">Gambit::CosmoBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1DarkAges">Gambit::DarkAges</innernamespace>
    <innernamespace refid="namespaceGambit_1_1DarkBit">Gambit::DarkBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1DecayBit">Gambit::DecayBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Diver__1__0__0">Gambit::Diver_1_0_0</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Diver__1__0__2">Gambit::Diver_1_0_2</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Diver__1__0__4">Gambit::Diver_1_0_4</innernamespace>
    <innernamespace refid="namespaceGambit_1_1DRes">Gambit::DRes</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ExampleBit__A">Gambit::ExampleBit_A</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ExampleBit__B">Gambit::ExampleBit_B</innernamespace>
    <innernamespace refid="namespaceGambit_1_1FlavBit">Gambit::FlavBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1FunctorHelp">Gambit::FunctorHelp</innernamespace>
    <innernamespace refid="namespaceGambit_1_1GMPI">Gambit::GMPI</innernamespace>
    <innernamespace refid="namespaceGambit_1_1GreAT">Gambit::GreAT</innernamespace>
    <innernamespace refid="namespaceGambit_1_1IniParser">Gambit::IniParser</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Logging">Gambit::Logging</innernamespace>
    <innernamespace refid="namespaceGambit_1_1LogTags">Gambit::LogTags</innernamespace>
    <innernamespace refid="namespaceGambit_1_1MicrOmegas">Gambit::MicrOmegas</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Models">Gambit::Models</innernamespace>
    <innernamespace refid="namespaceGambit_1_1MultiNest">Gambit::MultiNest</innernamespace>
    <innernamespace refid="namespaceGambit_1_1NeutrinoBit">Gambit::NeutrinoBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1NodeUtility">Gambit::NodeUtility</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ObjectivesBit">Gambit::ObjectivesBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Par">Gambit::Par</innernamespace>
    <innernamespace refid="namespaceGambit_1_1PolyChord">Gambit::PolyChord</innernamespace>
    <innernamespace refid="namespaceGambit_1_1PostProcessor">Gambit::PostProcessor</innernamespace>
    <innernamespace refid="namespaceGambit_1_1PrecisionBit">Gambit::PrecisionBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Printers">Gambit::Printers</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Priors">Gambit::Priors</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Scanner">Gambit::Scanner</innernamespace>
    <innernamespace refid="namespaceGambit_1_1slhahelp">Gambit::slhahelp</innernamespace>
    <innernamespace refid="namespaceGambit_1_1SpecBit">Gambit::SpecBit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1SpectrumContents">Gambit::SpectrumContents</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Stats">Gambit::Stats</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Utils">Gambit::Utils</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="namespaceGambit_1a905d504ecbc60fe4e6f52b477432a44c" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::mw_central_observed</definition>
        <argsstring></argsstring>
        <name>mw_central_observed</name>
        <qualifiedname>Gambit::mw_central_observed</qualifiedname>
        <initializer>= 80.385</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>M_W (Breit-Wigner mass parameter ~ pole) = 80.385 +/- 0.015 GeV (1 sigma), Gaussian. Reference <ulink url="http://pdg.lbl.gov/2014/listings/rpp2014-list-w-boson.pdf">http://pdg.lbl.gov/2014/listings/rpp2014-list-w-boson.pdf</ulink> = K.A. Olive et al. (Particle Data Group), Chin. Phys. C38, 090001 (2014) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="170" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a6d15be2971e110422c5f2cde89c349fc" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::mw_err_observed</definition>
        <argsstring></argsstring>
        <name>mw_err_observed</name>
        <qualifiedname>Gambit::mw_err_observed</qualifiedname>
        <initializer>= 0.015</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="171" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespaceGambit_1a069b1d3aecda51d38fc83f22d19b2077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::swap</definition>
        <argsstring>(Spectrum &amp;first, Spectrum &amp;second)</argsstring>
        <name>swap</name>
        <qualifiedname>Gambit::swap</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap resources of two <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> objects Note: Not a member function! This is an external function which is a friend of the <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/spectrum.cpp" line="57" column="9" bodyfile="Elements/src/spectrum.cpp" bodystart="57" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespaceGambit_1a486087b73676e0277ff3cde21d3bd230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::sighandler_soft</definition>
        <argsstring>(int sig)</argsstring>
        <name>sighandler_soft</name>
        <qualifiedname>Gambit::sighandler_soft</qualifiedname>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Signal handler functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Helpers</para>
<sect1 id="namespaceGambit_1autotoc_md72">
<title>========================================================================</title>
<para>We used to have more of these, but now we only use the &quot;soft shutdown&quot; signal handler. Sets a &quot;shutdown_begun&quot; flag, which is checked each likelihood loop, after which MPI synchronisation followed by clean shutdown is attempted. </para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/signal_handling.cpp" line="664" column="9" bodyfile="Utils/src/signal_handling.cpp" bodystart="664" bodyend="669" declfile="Utils/include/gambit/Utils/signal_handling.hpp" declline="247" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespaceGambit_1af402d2cfc9b4b3931b7cef98ad788b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::block_signals</definition>
        <argsstring>()</argsstring>
        <name>block_signals</name>
        <qualifiedname>Gambit::block_signals</qualifiedname>
        <briefdescription>
<para>Signal blocking/unblocking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/signal_helpers.cpp" line="31" column="9" bodyfile="Utils/src/signal_helpers.cpp" bodystart="31" bodyend="34" declfile="Utils/include/gambit/Utils/signal_helpers.hpp" declline="45" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ad4fc8d6b0d4cb748589b2968c11dfbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::unblock_signals</definition>
        <argsstring>()</argsstring>
        <name>unblock_signals</name>
        <qualifiedname>Gambit::unblock_signals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/signal_helpers.cpp" line="36" column="9" bodyfile="Utils/src/signal_helpers.cpp" bodystart="36" bodyend="39" declfile="Utils/include/gambit/Utils/signal_helpers.hpp" declline="46" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="namespaceGambit_1ae1cc619314afbb2c26095b7232eac18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, const int index, const double value, const str &amp;comment=&quot;&quot;, const bool overwrite=false)</argsstring>
        <name>SLHAea_add</name>
        <qualifiedname>Gambit::SLHAea_add</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>overwrite</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an entry to an SLHAea object (if overwrite=false, only if it doesn&apos;t already exist) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="188" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="188" bodyend="193" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="77" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a208e77a901d3aaef4617356dcd076eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, const int index, const str &amp;value, const str &amp;comment=&quot;&quot;, const bool overwrite=false)</argsstring>
        <name>SLHAea_add</name>
        <qualifiedname>Gambit::SLHAea_add</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>overwrite</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="196" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="196" bodyend="201" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="79" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a3ce661c8c6a979e598c2c1d504c94300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, const int index, const int value, const str &amp;comment=&quot;&quot;, const bool overwrite=false)</argsstring>
        <name>SLHAea_add</name>
        <qualifiedname>Gambit::SLHAea_add</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>overwrite</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="204" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="204" bodyend="209" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="81" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1addddb1333550484c1c281d6c68751447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, const int index1, const int index2, const double &amp;value, const str &amp;comment, const bool overwrite=false)</argsstring>
        <name>SLHAea_add</name>
        <qualifiedname>Gambit::SLHAea_add</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index2</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>overwrite</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="212" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="212" bodyend="217" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="84" declcolumn="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" prot="public" static="no">
        <type>std::string</type>
        <definition>typedef std::string Gambit::str</definition>
        <argsstring></argsstring>
        <name>str</name>
        <qualifiedname>Gambit::str</qualifiedname>
        <briefdescription>
<para>Shorthand for a standard string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ColliderBit/include/gambit/ColliderBit/analyses/Analysis.hpp" line="35" column="23" bodyfile="ColliderBit/include/gambit/ColliderBit/analyses/Analysis.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a9a344d209421d527ab17d6ed60ebbc94" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gambit::REAL</definition>
        <argsstring></argsstring>
        <name>REAL</name>
        <qualifiedname>Gambit::REAL</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/CalcHEP.hpp" line="23" column="18" bodyfile="Backends/include/gambit/Backends/backend_types/CalcHEP.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a84c5bd4b38d045fb6ab0a58ea8c6cc4f" prot="public" static="no">
        <type>Fdouble</type>
        <definition>typedef Fdouble Gambit::fh_real</definition>
        <argsstring></argsstring>
        <name>fh_real</name>
        <qualifiedname>Gambit::fh_real</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" line="161" column="19" bodyfile="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a3dac748eb2e31bbcaec13a1fb77ec99f" prot="public" static="no">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">Fdouble_complex</ref></type>
        <definition>typedef Fdouble_complex Gambit::fh_complex</definition>
        <argsstring></argsstring>
        <name>fh_complex</name>
        <qualifiedname>Gambit::fh_complex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" line="162" column="27" bodyfile="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a6b4cd1a131a9edfcead4a4c779f7d0af" prot="public" static="no">
        <type>const fh_real</type>
        <definition>typedef const fh_real Gambit::fh_creal</definition>
        <argsstring></argsstring>
        <name>fh_creal</name>
        <qualifiedname>Gambit::fh_creal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" line="163" column="25" bodyfile="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1aac24792cc8f196da306ee2801a424f89" prot="public" static="no">
        <type>const <ref refid="classGambit_1_1FcomplexT" kindref="compound">fh_complex</ref></type>
        <definition>typedef const fh_complex Gambit::fh_ccomplex</definition>
        <argsstring></argsstring>
        <name>fh_ccomplex</name>
        <qualifiedname>Gambit::fh_ccomplex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" line="164" column="28" bodyfile="Backends/include/gambit/Backends/backend_types/FeynHiggs.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1aeb466dc88395561ceb8b26ce390e8b23" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gambit::dblarr[10]</definition>
        <argsstring>[10]</argsstring>
        <name>dblarr</name>
        <qualifiedname>Gambit::dblarr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/libfirst.hpp" line="23" column="18" bodyfile="Backends/include/gambit/Backends/backend_types/libfirst.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a7f5b4645a0cc1c77caaa575be597cf4d" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gambit::nuyield_function_pointer) (const double &amp;, const int &amp;, void *&amp;)</definition>
        <argsstring>)(const double &amp;, const int &amp;, void *&amp;)</argsstring>
        <name>nuyield_function_pointer</name>
        <qualifiedname>Gambit::nuyield_function_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/nulike.hpp" line="24" column="11" bodyfile="Backends/include/gambit/Backends/backend_types/nulike.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a1dd48ae2cecaced8a134e60e5f60118b" prot="public" static="no">
        <type>struct <ref refid="structGambit_1_1__err" kindref="compound">Gambit::_err</ref></type>
        <definition>typedef struct Gambit::_err Gambit::clik_error</definition>
        <argsstring></argsstring>
        <name>clik_error</name>
        <qualifiedname>Gambit::clik_error</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/plc.hpp" line="33" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a5cc6291df51d6064c52efef8b65f2c58" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Finteger, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;Finteger,1,3&gt; Gambit::Farray_Finteger_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_Finteger_1_3</name>
        <qualifiedname>Gambit::Farray_Finteger_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="30" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a57ccaa181289eba3189bac8ffd021aa5" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,2&gt; Gambit::Farray_Freal8_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_2</name>
        <qualifiedname>Gambit::Farray_Freal8_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="31" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad2a5390a71949a5c36be81f0d06b8ea6" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,3&gt; Gambit::Farray_Freal8_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_3</name>
        <qualifiedname>Gambit::Farray_Freal8_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="32" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad520345d9ca984b97630944d9591075b" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 4 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,4&gt; Gambit::Farray_Freal8_1_4</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_4</name>
        <qualifiedname>Gambit::Farray_Freal8_1_4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="33" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ae4fe96dfcc01f0db0026c1461211067f" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 5 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,5&gt; Gambit::Farray_Freal8_1_5</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_5</name>
        <qualifiedname>Gambit::Farray_Freal8_1_5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="34" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1af640ef128f9f46ab6e955a964822be47" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 6 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,6&gt; Gambit::Farray_Freal8_1_6</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_6</name>
        <qualifiedname>Gambit::Farray_Freal8_1_6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="35" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a3bd291577f907f730734f5dc305121fb" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 2, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,2,1,2&gt; Gambit::Farray_Freal8_1_2_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_2_1_2</name>
        <qualifiedname>Gambit::Farray_Freal8_1_2_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="36" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ac1f7f59d0b59ce04af55466bb531a87f" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 3, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,3,1,3&gt; Gambit::Farray_Freal8_1_3_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_3_1_3</name>
        <qualifiedname>Gambit::Farray_Freal8_1_3_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="37" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1acfc958bde75c7adca37feee370e5f460" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 4, 1, 4 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,4,1,4&gt; Gambit::Farray_Freal8_1_4_1_4</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_4_1_4</name>
        <qualifiedname>Gambit::Farray_Freal8_1_4_1_4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="38" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a0ca713eb62a0723dbe1cf321e5a9856c" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 6, 1, 6 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,6,1,6&gt; Gambit::Farray_Freal8_1_6_1_6</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_6_1_6</name>
        <qualifiedname>Gambit::Farray_Freal8_1_6_1_6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="39" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1aca7bcd8aa2937df05673dcc5e6027a90" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 2, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,2,1,3&gt; Gambit::Farray_Freal8_1_2_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_2_1_3</name>
        <qualifiedname>Gambit::Farray_Freal8_1_2_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="40" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a8ecd076874a28664b31806bdfd76f428" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1FcomplexT" kindref="compound">Fcomplex16</ref>, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;Fcomplex16,1,2&gt; Gambit::Farray_Fcomplex16_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_Fcomplex16_1_2</name>
        <qualifiedname>Gambit::Farray_Fcomplex16_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="41" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a76533948c7bbe1a53c5a910f0819a651" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1FcomplexT" kindref="compound">Fcomplex16</ref>, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;Fcomplex16,1,3&gt; Gambit::Farray_Fcomplex16_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_Fcomplex16_1_3</name>
        <qualifiedname>Gambit::Farray_Fcomplex16_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="42" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a9146b68a9125b1f826adc6fd90dab2f3" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1FcomplexT" kindref="compound">Fcomplex16</ref>, 1, 2, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;Fcomplex16,1,2,1,2&gt; Gambit::Farray_Fcomplex16_1_2_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_Fcomplex16_1_2_1_2</name>
        <qualifiedname>Gambit::Farray_Fcomplex16_1_2_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="43" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a3ecdd8af0411847aef43e6e1296b0174" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1FcomplexT" kindref="compound">Fcomplex16</ref>, 1, 3, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;Fcomplex16,1,3,1,3&gt; Gambit::Farray_Fcomplex16_1_3_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_Fcomplex16_1_3_1_3</name>
        <qualifiedname>Gambit::Farray_Fcomplex16_1_3_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="44" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a3e3c191204c14b48699e9f89bfcac2fd" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1FcomplexT" kindref="compound">Fcomplex16</ref>, 1, 4, 1, 4 &gt;</type>
        <definition>typedef Farray&lt;Fcomplex16,1,4,1,4&gt; Gambit::Farray_Fcomplex16_1_4_1_4</definition>
        <argsstring></argsstring>
        <name>Farray_Fcomplex16_1_4_1_4</name>
        <qualifiedname>Gambit::Farray_Fcomplex16_1_4_1_4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="45" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ace46b385d841097ba8169b4cecb7f9a5" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1FcomplexT" kindref="compound">Fcomplex16</ref>, 1, 5, 1, 5 &gt;</type>
        <definition>typedef Farray&lt;Fcomplex16,1,5,1,5&gt; Gambit::Farray_Fcomplex16_1_5_1_5</definition>
        <argsstring></argsstring>
        <name>Farray_Fcomplex16_1_5_1_5</name>
        <qualifiedname>Gambit::Farray_Fcomplex16_1_5_1_5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="46" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ab644f8766560d06154b5b48e0197a8b1" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1FcomplexT" kindref="compound">Fcomplex16</ref>, 1, 6, 1, 6 &gt;</type>
        <definition>typedef Farray&lt;Fcomplex16,1,6,1,6&gt; Gambit::Farray_Fcomplex16_1_6_1_6</definition>
        <argsstring></argsstring>
        <name>Farray_Fcomplex16_1_6_1_6</name>
        <qualifiedname>Gambit::Farray_Fcomplex16_1_6_1_6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="47" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1aa772cbb25585fdbaef246dfa2a941984" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Flogical, 1, 100 &gt;</type>
        <definition>typedef Farray&lt;Flogical,1,100&gt; Gambit::Farray_Flogical_1_100</definition>
        <argsstring></argsstring>
        <name>Farray_Flogical_1_100</name>
        <qualifiedname>Gambit::Farray_Flogical_1_100</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="48" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a8dd2fb7ed1de197d9ec6896a710c320f" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100&gt; Gambit::Farray_Freal8_1_100</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="49" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ada06bc1d654f433a28f24f9e50b0a60c" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,2&gt; Gambit::Farray_Freal8_1_100_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_2</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="50" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad0247a269854c6151f8b5119a34a529b" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 5 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,5&gt; Gambit::Farray_Freal8_1_100_1_5</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_5</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="51" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1aefa2afab0c56d21a6c1a1da2eb0fe1bd" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 2, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,2,1,2&gt; Gambit::Farray_Freal8_1_100_1_2_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_2_1_2</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_2_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="52" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ab7c4c160ad174966dbdfdb87171d3590" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 3, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,3,1,3&gt; Gambit::Farray_Freal8_1_100_1_3_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_3_1_3</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_3_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="53" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a54ad9f6a79dfce3b0afc70fd57cda837" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 4, 1, 4 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,4,1,4&gt; Gambit::Farray_Freal8_1_100_1_4_1_4</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_4_1_4</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_4_1_4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="54" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a6c7c90d796491f26a8cb38e9c0797f45" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 5, 1, 4 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,5,1,4&gt; Gambit::Farray_Freal8_1_100_1_5_1_4</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_5_1_4</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_5_1_4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="55" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad0d163df2d07694f400b44133775cc51" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 5, 1, 5 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,5,1,5&gt; Gambit::Farray_Freal8_1_100_1_5_1_5</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_5_1_5</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_5_1_5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="56" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a15b74cc287de04b9723d9bca15391611" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 6, 1, 6 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,6,1,6&gt; Gambit::Farray_Freal8_1_100_1_6_1_6</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_6_1_6</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_6_1_6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="57" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a7824f332130ed9b44224998f9287f6f4" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; Freal8, 1, 100, 1, 7, 1, 7 &gt;</type>
        <definition>typedef Farray&lt;Freal8,1,100,1,7,1,7&gt; Gambit::Farray_Freal8_1_100_1_7_1_7</definition>
        <argsstring></argsstring>
        <name>Farray_Freal8_1_100_1_7_1_7</name>
        <qualifiedname>Gambit::Farray_Freal8_1_100_1_7_1_7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="58" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ab617ca688d75337b3d22585a0eafa07e" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 31 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,31&gt; Gambit::Farray_Fstring60_1_31</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_31</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_31</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="59" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a546a8484d157612ec5d2141a8f549b40" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 10 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,10&gt; Gambit::Farray_Fstring60_1_10</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_10</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_10</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="60" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a604cb18fffafbf3f1f2e406689b35ff3" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,2&gt; Gambit::Farray_Fstring60_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_2</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="61" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a307781dd39b4f607f277cb7276e57d02" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 33 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,33&gt; Gambit::Farray_Fstring60_1_33</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_33</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_33</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="62" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad24ba13ea5622454a07ff25d52addf99" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 15 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,15&gt; Gambit::Farray_Fstring60_1_15</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_15</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_15</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="63" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a693b1434e40ec1353ee7c463e5d3bbe3" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 22 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,22&gt; Gambit::Farray_Fstring60_1_22</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_22</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_22</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="64" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1afa5e3ff1fa86772f990e260e44422b9e" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 25 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,25&gt; Gambit::Farray_Fstring60_1_25</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_25</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_25</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="65" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a0ef0b8f1b5cd07657d6a2be71cc97edd" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 60 &gt;, 1, 9 &gt;</type>
        <definition>typedef Farray&lt;Fstring&lt;60&gt;,1,9&gt; Gambit::Farray_Fstring60_1_9</definition>
        <argsstring></argsstring>
        <name>Farray_Fstring60_1_9</name>
        <qualifiedname>Gambit::Farray_Fstring60_1_9</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="66" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad70639cc781dd296c01bb018330bb078" prot="public" static="no">
        <type><ref refid="classGambit_1_1Fstring" kindref="compound">Fstring</ref>&lt; 20 &gt;</type>
        <definition>typedef Fstring&lt;20&gt; Gambit::Fstring20</definition>
        <argsstring></argsstring>
        <name>Fstring20</name>
        <qualifiedname>Gambit::Fstring20</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="67" column="21" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a68e8400908ee744797cd26c64386cfd0" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="structGambit_1_1particle2" kindref="compound">particle2</ref>, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;particle2,1,2&gt; Gambit::Farray_particle2_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_particle2_1_2</name>
        <qualifiedname>Gambit::Farray_particle2_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="80" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a8cd683e8ef772bb4ab4c6aee91a211b0" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="structGambit_1_1particle2" kindref="compound">particle2</ref>, 1, 6 &gt;</type>
        <definition>typedef Farray&lt;particle2,1,6&gt; Gambit::Farray_particle2_1_6</definition>
        <argsstring></argsstring>
        <name>Farray_particle2_1_6</name>
        <qualifiedname>Gambit::Farray_particle2_1_6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="81" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad6fdb4a4ab1ed1ed9299406b086ba550" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="structGambit_1_1particle23" kindref="compound">particle23</ref>, 1, 2 &gt;</type>
        <definition>typedef Farray&lt;particle23,1,2&gt; Gambit::Farray_particle23_1_2</definition>
        <argsstring></argsstring>
        <name>Farray_particle23_1_2</name>
        <qualifiedname>Gambit::Farray_particle23_1_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="97" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a23ee59c76f1511b25875a5ad23817841" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="structGambit_1_1particle23" kindref="compound">particle23</ref>, 1, 3 &gt;</type>
        <definition>typedef Farray&lt;particle23,1,3&gt; Gambit::Farray_particle23_1_3</definition>
        <argsstring></argsstring>
        <name>Farray_particle23_1_3</name>
        <qualifiedname>Gambit::Farray_particle23_1_3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="98" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1af50c0ede3da3bd985656c5dd6cd22030" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="structGambit_1_1particle23" kindref="compound">particle23</ref>, 1, 4 &gt;</type>
        <definition>typedef Farray&lt;particle23,1,4&gt; Gambit::Farray_particle23_1_4</definition>
        <argsstring></argsstring>
        <name>Farray_particle23_1_4</name>
        <qualifiedname>Gambit::Farray_particle23_1_4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="99" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a1bd712075dc4e550502bcf28a09609aa" prot="public" static="no">
        <type><ref refid="classGambit_1_1Farray" kindref="compound">Farray</ref>&lt; <ref refid="structGambit_1_1particle23" kindref="compound">particle23</ref>, 1, 6 &gt;</type>
        <definition>typedef Farray&lt;particle23,1,6&gt; Gambit::Farray_particle23_1_6</definition>
        <argsstring></argsstring>
        <name>Farray_particle23_1_6</name>
        <qualifiedname>Gambit::Farray_particle23_1_6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/SPheno.hpp" line="100" column="20" bodyfile="Backends/include/gambit/Backends/backend_types/SPheno.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a6ba4e14443038319652a0c5e0980074a" prot="public" static="no">
        <type>std::map&lt; const std::string, double &gt;</type>
        <definition>typedef std::map&lt;const std::string, double&gt; Gambit::flav_observable_map</definition>
        <argsstring></argsstring>
        <name>flav_observable_map</name>
        <qualifiedname>Gambit::flav_observable_map</qualifiedname>
        <briefdescription>
<para>Maps for holding observables and covariance matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/flav_prediction.hpp" line="32" column="20" bodyfile="Elements/include/gambit/Elements/flav_prediction.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a85b83ffc9ce7a179d6519ce069d0a6fc" prot="public" static="no">
        <type>std::map&lt; const std::string, std::map&lt; const std::string, double &gt; &gt;</type>
        <definition>typedef std::map&lt;const std::string, std::map&lt;const std::string, double&gt; &gt; Gambit::flav_covariance_map</definition>
        <argsstring></argsstring>
        <name>flav_covariance_map</name>
        <qualifiedname>Gambit::flav_covariance_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/flav_prediction.hpp" line="33" column="20" bodyfile="Elements/include/gambit/Elements/flav_prediction.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a04c2b410df3814a62ad944736c6f5487" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gambit::fptr) (int &amp;)</definition>
        <argsstring>)(int &amp;)</argsstring>
        <name>fptr</name>
        <qualifiedname>Gambit::fptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a function that takes an integer by reference and returns a double. Just used for example purposes in ExampleBit_A and ExampleBit_B. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/shared_types.hpp" line="70" column="11" bodyfile="Elements/include/gambit/Elements/shared_types.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a9cb4b910878a073195e07b72d1b91af0" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gambit::fptr_dd) (double &amp;)</definition>
        <argsstring>)(double &amp;)</argsstring>
        <name>fptr_dd</name>
        <qualifiedname>Gambit::fptr_dd</qualifiedname>
        <briefdescription>
<para>A double in, double out function pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/shared_types.hpp" line="73" column="11" bodyfile="Elements/include/gambit/Elements/shared_types.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a77ef799b89f784c7265156b8b9cf7acb" prot="public" static="no">
        <type>LogTags::LogTag_declaration</type>
        <definition>typedef LogTags::LogTag_declaration Gambit::LogTag</definition>
        <argsstring></argsstring>
        <name>LogTag</name>
        <qualifiedname>Gambit::LogTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logs/include/gambit/Logs/log_tags.hpp" line="62" column="39" bodyfile="Logs/include/gambit/Logs/log_tags.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a98f19afeabdc4fcaa456c944cc19a50c" prot="public" static="no">
        <type>std::map&lt; std::string, double &gt;</type>
        <definition>typedef std::map&lt; std::string, double &gt; Gambit::map_str_dbl</definition>
        <argsstring></argsstring>
        <name>map_str_dbl</name>
        <qualifiedname>Gambit::map_str_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for a string-to-double map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="53" column="20" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a1c03e097efba1f551a18e452fc29a5ca" prot="public" static="no">
        <type>std::map&lt; std::string, double &gt;</type>
        <definition>typedef std::map&lt;std::string, double&gt; Gambit::parameterMap</definition>
        <argsstring></argsstring>
        <name>parameterMap</name>
        <qualifiedname>Gambit::parameterMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/model_parameters.hpp" line="52" column="20" bodyfile="Utils/include/gambit/Utils/model_parameters.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" prot="public" static="no">
        <type>SLHAea::Coll</type>
        <definition>typedef SLHAea::Coll Gambit::SLHAstruct</definition>
        <argsstring></argsstring>
        <name>SLHAstruct</name>
        <qualifiedname>Gambit::SLHAstruct</qualifiedname>
        <briefdescription>
<para>Less confusing name for SLHAea container class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/slhaea_helpers.hpp" line="41" column="24" bodyfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>typedef std::pair&lt;str, str&gt; Gambit::sspair</definition>
        <argsstring></argsstring>
        <name>sspair</name>
        <qualifiedname>Gambit::sspair</qualifiedname>
        <briefdescription>
<para>Shorthand for a pair of standard strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="64" column="21" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a88a4bdaa56b0e16ca75c8936050594ad" prot="public" static="no">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>typedef std::pair&lt;double, double&gt; Gambit::ddpair</definition>
        <argsstring></argsstring>
        <name>ddpair</name>
        <qualifiedname>Gambit::ddpair</qualifiedname>
        <briefdescription>
<para>Shorthand for a pair of doubles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="66" column="21" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad59d3bd695b3851e7d7adbca2aa294aa" prot="public" static="no">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>typedef std::pair&lt;int, int&gt; Gambit::iipair</definition>
        <argsstring></argsstring>
        <name>iipair</name>
        <qualifiedname>Gambit::iipair</qualifiedname>
        <briefdescription>
<para>Shorthand for a pair of integers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="68" column="21" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a2d616c373dd240651db05cfc52c859c7" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, double &gt;</type>
        <definition>typedef std::pair&lt;str, double&gt; Gambit::sdpair</definition>
        <argsstring></argsstring>
        <name>sdpair</name>
        <qualifiedname>Gambit::sdpair</qualifiedname>
        <briefdescription>
<para>Shorthand for a pair of string and double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="70" column="21" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a3a9c6ab1ad2c01094bec00ce98211f82" prot="public" static="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>typedef std::vector&lt;double&gt; Gambit::vec_dbl</definition>
        <argsstring></argsstring>
        <name>vec_dbl</name>
        <qualifiedname>Gambit::vec_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for a vector of doubles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="72" column="23" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a2290e245a3e5e88d71da60164481a023" prot="public" static="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::vector&lt;double&gt; &gt; Gambit::mat_dbl</definition>
        <argsstring></argsstring>
        <name>mat_dbl</name>
        <qualifiedname>Gambit::mat_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for a matrix of doubles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="74" column="23" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a5d7d3e157918b1a536f394671e12a328" prot="public" static="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>typedef std::map&lt;std::string,int&gt; Gambit::map_str_int</definition>
        <argsstring></argsstring>
        <name>map_str_int</name>
        <qualifiedname>Gambit::map_str_int</qualifiedname>
        <briefdescription>
<para>Shorthand for a string-to-int map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="78" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a89325f4443e809eee69d8f00d882c52f" prot="public" static="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, double &gt; &gt;</type>
        <definition>typedef std::map&lt;std::string,std::map&lt;std::string,double&gt; &gt; Gambit::map_str_map_str_dbl</definition>
        <argsstring></argsstring>
        <name>map_str_map_str_dbl</name>
        <qualifiedname>Gambit::map_str_map_str_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for a string-to-string-to-double map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="80" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a55029f6c6c6f6ab07a979608d79d5a0b" prot="public" static="no">
        <type>std::map&lt; const std::string, double &gt;</type>
        <definition>typedef std::map&lt;const std::string,double&gt; Gambit::map_const_str_dbl</definition>
        <argsstring></argsstring>
        <name>map_const_str_dbl</name>
        <qualifiedname>Gambit::map_const_str_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for a const-string-to-double map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="82" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ab73aeae729acb498a53c7cff54636e84" prot="public" static="no">
        <type>std::map&lt; const std::string, std::map&lt; const std::string, double &gt; &gt;</type>
        <definition>typedef std::map&lt;const std::string,std::map&lt;const std::string,double&gt; &gt; Gambit::map_const_str_map_const_str_dbl</definition>
        <argsstring></argsstring>
        <name>map_const_str_map_const_str_dbl</name>
        <qualifiedname>Gambit::map_const_str_map_const_str_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for a const-string-to-const-string-to-double map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="84" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a51de803e5143010226b0a7c7e7e05b88" prot="public" static="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::map&lt;std::string,std::string&gt; Gambit::map_str_str</definition>
        <argsstring></argsstring>
        <name>map_str_str</name>
        <qualifiedname>Gambit::map_str_str</qualifiedname>
        <briefdescription>
<para>Shorthand for a string-to-string map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="86" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a6cfca63d2961c5582e204a7a894c7a03" prot="public" static="no">
        <type>std::map&lt; std::string, bool &gt;</type>
        <definition>typedef std::map&lt;std::string,bool&gt; Gambit::map_str_bool</definition>
        <argsstring></argsstring>
        <name>map_str_bool</name>
        <qualifiedname>Gambit::map_str_bool</qualifiedname>
        <briefdescription>
<para>Shorthand for a string-to-bool map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="88" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a35f0cff5217ce1cb5a0f0d6dbb7e5ebc" prot="public" static="no">
        <type>std::map&lt; int, double &gt;</type>
        <definition>typedef std::map&lt;int,double&gt; Gambit::map_int_dbl</definition>
        <argsstring></argsstring>
        <name>map_int_dbl</name>
        <qualifiedname>Gambit::map_int_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for an int to double map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="90" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a9f1be5fd19020d0c0cd6a8452bb36fe0" prot="public" static="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, std::string &gt; &gt;</type>
        <definition>typedef std::map&lt;std::string,std::map&lt;std::string,std::string&gt; &gt; Gambit::map_str_map_str_str</definition>
        <argsstring></argsstring>
        <name>map_str_map_str_str</name>
        <qualifiedname>Gambit::map_str_map_str_str</qualifiedname>
        <briefdescription>
<para>Shorthand for a string-to-string-to-string map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="92" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a1ff4cae18c1ff210e4f214a673d90d49" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, double &gt;</type>
        <definition>typedef std::map&lt; std::pair &lt; int, int &gt;, double&gt; Gambit::map_intpair_dbl</definition>
        <argsstring></argsstring>
        <name>map_intpair_dbl</name>
        <qualifiedname>Gambit::map_intpair_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for an int-int pair to double map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="94" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a31098f655cfe35f4c64ca9240c427f11" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gambit::fptr_void) ()</definition>
        <argsstring>)()</argsstring>
        <name>fptr_void</name>
        <qualifiedname>Gambit::fptr_void</qualifiedname>
        <briefdescription>
<para>Shorthand for a pointer to a void function with no arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="97" column="11" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1abd933db4e41415a5f75eac3fb0d03178" prot="public" static="no">
        <type>std::map&lt; int, <ref refid="structGambit_1_1triplet" kindref="compound">triplet</ref>&lt; double &gt; &gt;</type>
        <definition>typedef std::map&lt;int,triplet&lt;double&gt; &gt; Gambit::map_int_triplet_dbl</definition>
        <argsstring></argsstring>
        <name>map_int_triplet_dbl</name>
        <qualifiedname>Gambit::map_int_triplet_dbl</qualifiedname>
        <briefdescription>
<para>Shorthand for an int-to-double triplet map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="143" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a9d7253bd2af4ce15e7618fc1d295b9b7" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt;</type>
        <definition>typedef std::map&lt;std::string, safe_ptr&lt;const double&gt; &gt; Gambit::param_map_type</definition>
        <argsstring></argsstring>
        <name>param_map_type</name>
        <qualifiedname>Gambit::param_map_type</qualifiedname>
        <briefdescription>
<para>Shorthand for the type of the &apos;Param&apos; map (string-to-double-safe_ptr map) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="320" column="20" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ae1c485eb27f0a0cbeba4e764604efa45" prot="public" static="no">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; float &gt;</type>
        <definition>typedef FcomplexT&lt;float&gt; Gambit::Fcomplex</definition>
        <argsstring></argsstring>
        <name>Fcomplex</name>
        <qualifiedname>Gambit::Fcomplex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fortran type typedefs TODO: Implement compiler dependent macros ensuring that these are always correct </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="647" column="22" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1afd5ea5da1e94d47f3a00d5747a719569" prot="public" static="no">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; float &gt;</type>
        <definition>typedef FcomplexT&lt;float&gt; Gambit::Fcomplex8</definition>
        <argsstring></argsstring>
        <name>Fcomplex8</name>
        <qualifiedname>Gambit::Fcomplex8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="648" column="22" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ae871ab8aee7f829c0665e177ce13c7c0" prot="public" static="no">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; double &gt;</type>
        <definition>typedef FcomplexT&lt;double&gt; Gambit::Fcomplex16</definition>
        <argsstring></argsstring>
        <name>Fcomplex16</name>
        <qualifiedname>Gambit::Fcomplex16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="649" column="21" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a9107f32ff19145cfe90f62477fb1e53a" prot="public" static="no">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; double &gt;</type>
        <definition>typedef FcomplexT&lt;double&gt; Gambit::Fdouble_complex</definition>
        <argsstring></argsstring>
        <name>Fdouble_complex</name>
        <qualifiedname>Gambit::Fdouble_complex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="650" column="21" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a98085bc8e584e613f4e040a1de82ef2f" prot="public" static="no">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; long double &gt;</type>
        <definition>typedef FcomplexT&lt;long double&gt; Gambit::Flongdouble_complex</definition>
        <argsstring></argsstring>
        <name>Flongdouble_complex</name>
        <qualifiedname>Gambit::Flongdouble_complex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="651" column="21" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ae68b92e6861f93b1c8a7afce161d1def" prot="public" static="no">
        <type>char</type>
        <definition>typedef char Gambit::Fcharacter</definition>
        <argsstring></argsstring>
        <name>Fcharacter</name>
        <qualifiedname>Gambit::Fcharacter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="652" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a66fc0ad43cbf22ebfce44de34d4bbbf9" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gambit::Fdouble</definition>
        <argsstring></argsstring>
        <name>Fdouble</name>
        <qualifiedname>Gambit::Fdouble</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="653" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a63f5cf98d1377bca5b0c09005640adaf" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gambit::Fdouble_precision</definition>
        <argsstring></argsstring>
        <name>Fdouble_precision</name>
        <qualifiedname>Gambit::Fdouble_precision</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="654" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ae168aa7a338802e1a6d2bdc1838f749e" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gambit::Fdoubleprecision</definition>
        <argsstring></argsstring>
        <name>Fdoubleprecision</name>
        <qualifiedname>Gambit::Fdoubleprecision</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="655" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a26beefcf13bd6395a1995ba0e64ce94e" prot="public" static="no">
        <type>int</type>
        <definition>typedef int Gambit::Finteger</definition>
        <argsstring></argsstring>
        <name>Finteger</name>
        <qualifiedname>Gambit::Finteger</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="656" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a19ff149a5458accc9e29925758ceedcc" prot="public" static="no">
        <type>short</type>
        <definition>typedef short Gambit::Finteger2</definition>
        <argsstring></argsstring>
        <name>Finteger2</name>
        <qualifiedname>Gambit::Finteger2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="657" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a86ca1e40098dd3f69f7254438af773f1" prot="public" static="no">
        <type>long int</type>
        <definition>typedef long int Gambit::Finteger4</definition>
        <argsstring></argsstring>
        <name>Finteger4</name>
        <qualifiedname>Gambit::Finteger4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="658" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1ad350d5c4981ae7e32c9133e945c75bf1" prot="public" static="no">
        <type>long long</type>
        <definition>typedef long long Gambit::Finteger8</definition>
        <argsstring></argsstring>
        <name>Finteger8</name>
        <qualifiedname>Gambit::Finteger8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="659" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a7c767fcb33ec614c97f11044019d6ade" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t Gambit::Flogical</definition>
        <argsstring></argsstring>
        <name>Flogical</name>
        <qualifiedname>Gambit::Flogical</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="660" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a9cba043143e74c246ac2905c72f61b57" prot="public" static="no">
        <type>bool</type>
        <definition>typedef bool Gambit::Flogical1</definition>
        <argsstring></argsstring>
        <name>Flogical1</name>
        <qualifiedname>Gambit::Flogical1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="661" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a1c305e2a7bfa29854b1bc18a3c670239" prot="public" static="no">
        <type>float</type>
        <definition>typedef float Gambit::Freal</definition>
        <argsstring></argsstring>
        <name>Freal</name>
        <qualifiedname>Gambit::Freal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="662" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a7af6215d45b218ddeed88b1424d38e21" prot="public" static="no">
        <type>float</type>
        <definition>typedef float Gambit::Freal4</definition>
        <argsstring></argsstring>
        <name>Freal4</name>
        <qualifiedname>Gambit::Freal4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="663" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a7793eace4d373ef21e2d67ee8a219550" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gambit::Freal8</definition>
        <argsstring></argsstring>
        <name>Freal8</name>
        <qualifiedname>Gambit::Freal8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="664" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1acee67a68e9f6a9a7ee2b9315000c9377" prot="public" static="no">
        <type>long double</type>
        <definition>typedef long double Gambit::Freal16</definition>
        <argsstring></argsstring>
        <name>Freal16</name>
        <qualifiedname>Gambit::Freal16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="665" column="29" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a217e19dce18efd21e75742ca576cb9e1" prot="public" static="no">
        <type>void</type>
        <definition>typedef void Gambit::MVoid</definition>
        <argsstring></argsstring>
        <name>MVoid</name>
        <qualifiedname>Gambit::MVoid</qualifiedname>
        <briefdescription>
<para>Types used for Mathematica backends. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="668" column="24" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1abc5d5ca48d62632e0022d9c5de132ad3" prot="public" static="no">
        <type>int</type>
        <definition>typedef int Gambit::MInteger</definition>
        <argsstring></argsstring>
        <name>MInteger</name>
        <qualifiedname>Gambit::MInteger</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="669" column="24" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1af07bb16a821f9dea3915b4f0591c9a5d" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gambit::MReal</definition>
        <argsstring></argsstring>
        <name>MReal</name>
        <qualifiedname>Gambit::MReal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="670" column="24" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a0956ac52fc3b312a24bf3a8cf96eec68" prot="public" static="no">
        <type>bool</type>
        <definition>typedef bool Gambit::MBool</definition>
        <argsstring></argsstring>
        <name>MBool</name>
        <qualifiedname>Gambit::MBool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="671" column="24" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a1694c1dbd3025b761580b8a9d10f0653" prot="public" static="no">
        <type>char</type>
        <definition>typedef char Gambit::MChar</definition>
        <argsstring></argsstring>
        <name>MChar</name>
        <qualifiedname>Gambit::MChar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="672" column="24" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a8663662bb6ee0c0e1b69ce615fb149d3" prot="public" static="no">
        <type>std::string</type>
        <definition>typedef std::string Gambit::MString</definition>
        <argsstring></argsstring>
        <name>MString</name>
        <qualifiedname>Gambit::MString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="673" column="24" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGambit_1a62b093810d82ecacb8c172f1dbcc03d8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>using Gambit::MList = typedef std::vector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>MList</name>
        <qualifiedname>Gambit::MList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="674" column="15" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="674" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceGambit_1a939c370a31dd13d6e45dca08c5aca9aa" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Gambit::gambit_registry</definition>
        <argsstring></argsstring>
        <name>gambit_registry</name>
        <qualifiedname>Gambit::gambit_registry</qualifiedname>
        <initializer>{
    typedef void* factory_type(const std::map&lt;<ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1primary__model__functor" kindref="compound">primary_model_functor</ref> *&gt; &amp;,
     <ref refid="classGambit_1_1DRes_1_1DependencyResolver" kindref="compound">DRes::DependencyResolver</ref> &amp;b, <ref refid="classGambit_1_1IniParser_1_1IniFile" kindref="compound">IniParser::IniFile</ref> &amp;c, const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;purpose, <ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">Printers::BaseBasePrinter</ref>&amp; p)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/container_factory.hpp" line="49" column="3" bodyfile="Core/include/gambit/Core/container_factory.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a4638eb67b744d0f3e30281efa3787e03" prot="public" static="no" mutable="no">
        <type><ref refid="classGambit_1_1reg__elem" kindref="compound">reg_elem</ref>&lt; factory_type &gt;</type>
        <definition>reg_elem&lt;factory_type&gt; Gambit::__scanner_factories__</definition>
        <argsstring></argsstring>
        <name>__scanner_factories__</name>
        <qualifiedname>Gambit::__scanner_factories__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/include/gambit/Core/container_factory.hpp" line="53" column="15" bodyfile="Core/include/gambit/Core/container_factory.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ad92f434eea0930ebb592a8d9033f6f69" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref></type>
        <definition>const SpecOverrideOptions Gambit::use_overrides(0)</definition>
        <argsstring>(0)</argsstring>
        <name>use_overrides</name>
        <qualifiedname>Gambit::use_overrides</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum_helpers.hpp" line="107" column="37"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ab4d1e59a8ba9030431517df37074133e" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref></type>
        <definition>const SpecOverrideOptions Gambit::overrides_only(1)</definition>
        <argsstring>(1)</argsstring>
        <name>overrides_only</name>
        <qualifiedname>Gambit::overrides_only</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum_helpers.hpp" line="108" column="37"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a23463940d65450e1a339342a7ee062c6" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref></type>
        <definition>const SpecOverrideOptions Gambit::ignore_overrides(2)</definition>
        <argsstring>(2)</argsstring>
        <name>ignore_overrides</name>
        <qualifiedname>Gambit::ignore_overrides</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum_helpers.hpp" line="109" column="37"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aed4726aee167bc7cf497e993d6318514" prot="public" static="no" mutable="no">
        <type>const <ref refid="structGambit_1_1Logging_1_1endofmessage" kindref="compound">Logging::endofmessage</ref></type>
        <definition>const Logging::endofmessage Gambit::EOM</definition>
        <argsstring></argsstring>
        <name>EOM</name>
        <qualifiedname>Gambit::EOM</qualifiedname>
        <initializer>= <ref refid="structGambit_1_1Logging_1_1endofmessage" kindref="compound">Logging::endofmessage</ref>()</initializer>
        <briefdescription>
<para>Explicit const instance of the end of message struct in <ref refid="namespaceGambit" kindref="compound">Gambit</ref> namespace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logs/include/gambit/Logs/logger.hpp" line="100" column="31" bodyfile="Logs/include/gambit/Logs/logger.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ad56b31fd6f7241eda388fc04845da462" prot="public" static="no" mutable="no">
        <type><ref refid="classGambit_1_1Printers_1_1PrinterManager" kindref="compound">Printers::PrinterManager</ref> *</type>
        <definition>Printers::PrinterManager* Gambit::global_printer_manager</definition>
        <argsstring></argsstring>
        <name>global_printer_manager</name>
        <qualifiedname>Gambit::global_printer_manager</qualifiedname>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/src/printermanager.cpp" line="42" column="28" bodyfile="Printers/src/printermanager.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1af4e14789b57a8a9bdd426ba50e38a3ce" prot="public" static="no" mutable="no">
        <type>const std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>const std::vector&lt;str&gt; Gambit::gambit_citation_keys</definition>
        <argsstring></argsstring>
        <name>gambit_citation_keys</name>
        <qualifiedname>Gambit::gambit_citation_keys</qualifiedname>
        <initializer>= 
  {
    &quot;GAMBIT:2017yxo&quot;, 
    &quot;Kvellestad:2019vxm&quot;, 
      
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/citation_keys.hpp" line="26" column="21" bodyfile="Utils/include/gambit/Utils/citation_keys.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a34d6cdb15152bb27ba8ee530ef614ba1" prot="public" static="no" mutable="no">
        <type><ref refid="classGambit_1_1Piped__invalid__point" kindref="compound">Piped_invalid_point</ref></type>
        <definition>Piped_invalid_point Gambit::piped_invalid_point</definition>
        <argsstring></argsstring>
        <name>piped_invalid_point</name>
        <qualifiedname>Gambit::piped_invalid_point</qualifiedname>
        <briefdescription>
<para>Global instance of piped invalid point class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/exceptions.cpp" line="544" column="25" bodyfile="Utils/src/exceptions.cpp" bodystart="544" bodyend="-1" declfile="Utils/include/gambit/Utils/exceptions.hpp" declline="300" declcolumn="30"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ad005964f6d504aba978cc901210b2e09" prot="public" static="no" mutable="no">
        <type><ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref></type>
        <definition>Piped_exceptions Gambit::piped_errors(1000)</definition>
        <argsstring></argsstring>
        <name>piped_errors</name>
        <qualifiedname>Gambit::piped_errors</qualifiedname>
        <briefdescription>
<para>Global instance of <ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref> class for errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/exceptions.cpp" line="622" column="22" declfile="Utils/include/gambit/Utils/exceptions.hpp" declline="330" declcolumn="27"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a2bdd46e135fa3189ef01b1089ea9a788" prot="public" static="no" mutable="no">
        <type><ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref></type>
        <definition>Piped_exceptions Gambit::piped_warnings(1000)</definition>
        <argsstring></argsstring>
        <name>piped_warnings</name>
        <qualifiedname>Gambit::piped_warnings</qualifiedname>
        <briefdescription>
<para>Global instance of <ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref> class for warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/exceptions.cpp" line="625" column="22" declfile="Utils/include/gambit/Utils/exceptions.hpp" declline="333" declcolumn="27"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a194acddf61a7f3cd23ce177c178ed8d7" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::pi</definition>
        <argsstring></argsstring>
        <name>pi</name>
        <qualifiedname>Gambit::pi</qualifiedname>
        <initializer>= 3.141592653589793238462643383279502884197</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="39" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ab83787acb92adb8122ba8253ac2c0306" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::root2</definition>
        <argsstring></argsstring>
        <name>root2</name>
        <qualifiedname>Gambit::root2</qualifiedname>
        <initializer>= sqrt(2.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="40" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ac0e4a486c5849872b9e86b849f3fe8ce" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::zeta3</definition>
        <argsstring></argsstring>
        <name>zeta3</name>
        <qualifiedname>Gambit::zeta3</qualifiedname>
        <initializer>= 1.2020569031595942855</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="41" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a8ec4c0c484692ed50f6998ceca9250ae" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::hbar</definition>
        <argsstring></argsstring>
        <name>hbar</name>
        <qualifiedname>Gambit::hbar</qualifiedname>
        <initializer>= 6.582119514e-25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="42" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ae0ca8ad41dd85dd329b23601863e422a" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::K2eV</definition>
        <argsstring></argsstring>
        <name>K2eV</name>
        <qualifiedname>Gambit::K2eV</qualifiedname>
        <initializer>= 8.6173303e-5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="43" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aac6f06e15e8c1936ee501f1b3bb111a4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::eV2g</definition>
        <argsstring></argsstring>
        <name>eV2g</name>
        <qualifiedname>Gambit::eV2g</qualifiedname>
        <initializer>= 1.782661907e-33</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="44" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a0dac1d6b978915d378d81a0da4262e8c" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::gev2cm</definition>
        <argsstring></argsstring>
        <name>gev2cm</name>
        <qualifiedname>Gambit::gev2cm</qualifiedname>
        <initializer>= 197.327053e-16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="45" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aefda3877646b5fe61f5f588f8df6f43f" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::gev2cm2</definition>
        <argsstring></argsstring>
        <name>gev2cm2</name>
        <qualifiedname>Gambit::gev2cm2</qualifiedname>
        <initializer>= pow(197.327053e-16, 2.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="46" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a356957820933e8a860b41898b40f08b6" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::gev2pb</definition>
        <argsstring></argsstring>
        <name>gev2pb</name>
        <qualifiedname>Gambit::gev2pb</qualifiedname>
        <initializer>= gev2cm2*1e36</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="47" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a53d5519097e862c4c9a8d08d38908968" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::gev2tocm3s1</definition>
        <argsstring></argsstring>
        <name>gev2tocm3s1</name>
        <qualifiedname>Gambit::gev2tocm3s1</qualifiedname>
        <initializer>= 1.16733e-17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="48" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a61bd2ac1a0ba2d4be2c2c10185cad2e8" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::s2cm</definition>
        <argsstring></argsstring>
        <name>s2cm</name>
        <qualifiedname>Gambit::s2cm</qualifiedname>
        <initializer>= 2.99792458e10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="49" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aef9586feae935ddb8b08d0a574d7807f" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_planck</definition>
        <argsstring></argsstring>
        <name>m_planck</name>
        <qualifiedname>Gambit::m_planck</qualifiedname>
        <initializer>= 1.220910e19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="50" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1adfc925f59a385402080929b040afb8a3" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_planck_red</definition>
        <argsstring></argsstring>
        <name>m_planck_red</name>
        <qualifiedname>Gambit::m_planck_red</qualifiedname>
        <initializer>= m_planck/sqrt(8.0*pi)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="51" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aba5017ddf2938c3485fdfb5dc0a81008" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::atomic_mass_unit</definition>
        <argsstring></argsstring>
        <name>atomic_mass_unit</name>
        <qualifiedname>Gambit::atomic_mass_unit</qualifiedname>
        <initializer>= 0.931494028</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="52" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ac1858f3f2cb51926c139d98a4906421e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_proton_amu</definition>
        <argsstring></argsstring>
        <name>m_proton_amu</name>
        <qualifiedname>Gambit::m_proton_amu</qualifiedname>
        <initializer>= 1.00727646688</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="53" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a6087bd4b42e3ccc77dbb96df370ccd71" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_neutron_amu</definition>
        <argsstring></argsstring>
        <name>m_neutron_amu</name>
        <qualifiedname>Gambit::m_neutron_amu</qualifiedname>
        <initializer>= 1.0086649156</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="54" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a9d5923bb17f607daa0f2446e37b7167e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_proton</definition>
        <argsstring></argsstring>
        <name>m_proton</name>
        <qualifiedname>Gambit::m_proton</qualifiedname>
        <initializer>= m_proton_amu * atomic_mass_unit</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="55" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a8c220f06717dd48e5ccf408c9c00119d" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_neutron</definition>
        <argsstring></argsstring>
        <name>m_neutron</name>
        <qualifiedname>Gambit::m_neutron</qualifiedname>
        <initializer>= m_neutron_amu * atomic_mass_unit</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="56" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a6874ccdb597088e014fe3a011dedc7df" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_deuteron</definition>
        <argsstring></argsstring>
        <name>m_deuteron</name>
        <qualifiedname>Gambit::m_deuteron</qualifiedname>
        <initializer>= 1.87561294257</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="57" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1af492075f5bd406c6dc37d45fcb387f49" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::m_electron</definition>
        <argsstring></argsstring>
        <name>m_electron</name>
        <qualifiedname>Gambit::m_electron</qualifiedname>
        <initializer>= 0.5109989461e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="58" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a10c2ea8e8d95b0dfcee72b03099253bf" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::alpha_EM</definition>
        <argsstring></argsstring>
        <name>alpha_EM</name>
        <qualifiedname>Gambit::alpha_EM</qualifiedname>
        <initializer>= 7.2973525664e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="59" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a67e7ab108aa8fea8cdb4946da9fc9a9d" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::c_SI</definition>
        <argsstring></argsstring>
        <name>c_SI</name>
        <qualifiedname>Gambit::c_SI</qualifiedname>
        <initializer>= s2cm/100</initializer>
        <briefdescription>
<para>Values from Particle Data Group 2018 (<ulink url="http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf">http://pdg.lbl.gov/2018/reviews/rpp2018-rev-phys-constants.pdf</ulink>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="62" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1adabb2e3b95c73ab87eb95d86785e56d0" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::eV_to_J</definition>
        <argsstring></argsstring>
        <name>eV_to_J</name>
        <qualifiedname>Gambit::eV_to_J</qualifiedname>
        <initializer>= 1.6021766208e-19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="63" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a172f3e09cb911c75c6f36d4373d7bbea" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::Mpc_SI</definition>
        <argsstring></argsstring>
        <name>Mpc_SI</name>
        <qualifiedname>Gambit::Mpc_SI</qualifiedname>
        <initializer>= 969394202136*pow(10,11)/pi</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="64" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a07614a8c9e046462ca1721e04bd36476" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::GN_cgs</definition>
        <argsstring></argsstring>
        <name>GN_cgs</name>
        <qualifiedname>Gambit::GN_cgs</qualifiedname>
        <initializer>= 6.67408e-8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="66" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a139c03a1136cef11524caeea3d77d666" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::GN_SI</definition>
        <argsstring></argsstring>
        <name>GN_SI</name>
        <qualifiedname>Gambit::GN_SI</qualifiedname>
        <initializer>= GN_cgs/1e3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="67" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1acd7efba980804061a0dcc3fcad07bc9e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::kB_SI</definition>
        <argsstring></argsstring>
        <name>kB_SI</name>
        <qualifiedname>Gambit::kB_SI</qualifiedname>
        <initializer>= 1.38064852e-23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="69" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ab8e0dbf636da5e4e307111096d89a1ba" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::kB_eV_over_K</definition>
        <argsstring></argsstring>
        <name>kB_eV_over_K</name>
        <qualifiedname>Gambit::kB_eV_over_K</qualifiedname>
        <initializer>= kB_SI/eV_to_J</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="70" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1af3997ef48b0aefe0e2ebf116c6ea1009" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::hP_SI</definition>
        <argsstring></argsstring>
        <name>hP_SI</name>
        <qualifiedname>Gambit::hP_SI</qualifiedname>
        <initializer>= 6.626070040e-34</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="72" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a39d84b2c71ec572033f75821c64f1eb4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::hP_eVs</definition>
        <argsstring></argsstring>
        <name>hP_eVs</name>
        <qualifiedname>Gambit::hP_eVs</qualifiedname>
        <initializer>= hP_SI/eV_to_J</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="73" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1afbf6d5cbec32c945651accd5abd51356" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::hc_eVcm</definition>
        <argsstring></argsstring>
        <name>hc_eVcm</name>
        <qualifiedname>Gambit::hc_eVcm</qualifiedname>
        <initializer>=hP_eVs*s2cm</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="74" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a01f6d6c31458f1d065dd852d62c50627" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::sigmaB_SI</definition>
        <argsstring></argsstring>
        <name>sigmaB_SI</name>
        <qualifiedname>Gambit::sigmaB_SI</qualifiedname>
        <initializer>= 2*pow(pi,5)*pow(kB_SI,4)/(15*pow(hP_SI,3)*<ref refid="namespaceGambit_1a67e7ab108aa8fea8cdb4946da9fc9a9d" kindref="member">c_SI</ref>*<ref refid="namespaceGambit_1a67e7ab108aa8fea8cdb4946da9fc9a9d" kindref="member">c_SI</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="76" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1ad09c50492b8b8554fa09deb5df71e38b" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Gambit::Neff_SM</definition>
        <argsstring></argsstring>
        <name>Neff_SM</name>
        <qualifiedname>Gambit::Neff_SM</qualifiedname>
        <initializer>= 3.045</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="78" column="16" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aacba88d84337f85102bda83082ae2c4c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double Gambit::alpha_e_OS_thomson_limit</definition>
        <argsstring></argsstring>
        <name>alpha_e_OS_thomson_limit</name>
        <qualifiedname>Gambit::alpha_e_OS_thomson_limit</qualifiedname>
        <initializer>= 0.0072973525664</initializer>
        <briefdescription>
<para>Thomson limit of <formula id="58">$\alpha_e$</formula> in OS scheme from <ulink url="http://pdg.lbl.gov/2017/reviews/rpp2017-rev-phys-constants.pdf">PDG 2017</ulink> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="86" column="20" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aebc3ed21de9d109dc2d6d37ce5a2d321" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double Gambit::alpha_e_OS_MZ</definition>
        <argsstring></argsstring>
        <name>alpha_e_OS_MZ</name>
        <qualifiedname>Gambit::alpha_e_OS_MZ</qualifiedname>
        <initializer>= 1. / 128.944</initializer>
        <briefdescription>
<para><formula id="59">$\alpha_e(M_Z)$</formula> in OS scheme from <ulink url="https://arxiv.org/pdf/1105.3149.pdf">1105.3149</ulink> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="92" column="20" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1abaae45327e7fd7cd617d88df7d91fde7" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double Gambit::delta_alpha_OS</definition>
        <argsstring></argsstring>
        <name>delta_alpha_OS</name>
        <qualifiedname>Gambit::delta_alpha_OS</qualifiedname>
        <initializer>= 1. - <ref refid="namespaceGambit_1aacba88d84337f85102bda83082ae2c4c" kindref="member">alpha_e_OS_thomson_limit</ref> / <ref refid="namespaceGambit_1aebc3ed21de9d109dc2d6d37ce5a2d321" kindref="member">alpha_e_OS_MZ</ref></initializer>
        <briefdescription>
<para><formula id="39">$\Delta\alpha$</formula> in OS scheme. </para>
        </briefdescription>
        <detaileddescription>
<para>Defined by <formula id="60">\[
\alpha(M_Z) = \frac{\alpha(0)}{1 - \Delta\alpha}
\]</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="102" column="20" bodyfile="Utils/include/gambit/Utils/numerical_constants.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1aa743a53c94ee9bf491d2ad3c5f736359" prot="public" static="yes" mutable="no">
        <type>const struct Gambit::Mesons_masses</type>
        <definition>const struct Gambit::Mesons_masses Gambit::meson_masses</definition>
        <argsstring></argsstring>
        <name>meson_masses</name>
        <qualifiedname>Gambit::meson_masses</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="129" column="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a9fa385eda9c80715806a1cc2640a7218" prot="public" static="yes" mutable="no">
        <type>const struct Gambit::Mesons_decay_constants</type>
        <definition>const struct Gambit::Mesons_decay_constants Gambit::meson_decay_constants</definition>
        <argsstring></argsstring>
        <name>meson_decay_constants</name>
        <qualifiedname>Gambit::meson_decay_constants</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/numerical_constants.hpp" line="164" column="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a243cfd4fb3112388b0589f6daca72899" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gambit::gambit_version_major</definition>
        <argsstring></argsstring>
        <name>gambit_version_major</name>
        <qualifiedname>Gambit::gambit_version_major</qualifiedname>
        <initializer>=     0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/version.hpp" line="29" column="15" bodyfile="Utils/include/gambit/Utils/version.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a56083accde71fd35b537b8124397842a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gambit::gambit_version_minor</definition>
        <argsstring></argsstring>
        <name>gambit_version_minor</name>
        <qualifiedname>Gambit::gambit_version_minor</qualifiedname>
        <initializer>=     0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/version.hpp" line="35" column="15" bodyfile="Utils/include/gambit/Utils/version.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a931c6f8553a621002dde290d65949839" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gambit::gambit_version_revision</definition>
        <argsstring></argsstring>
        <name>gambit_version_revision</name>
        <qualifiedname>Gambit::gambit_version_revision</qualifiedname>
        <initializer>=  0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/version.hpp" line="41" column="15" bodyfile="Utils/include/gambit/Utils/version.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a7eede81e9675c7978bbebbf44894b103" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>const str Gambit::gambit_version_patch</definition>
        <argsstring></argsstring>
        <name>gambit_version_patch</name>
        <qualifiedname>Gambit::gambit_version_patch</qualifiedname>
        <initializer>=  &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/version.hpp" line="47" column="15" bodyfile="Utils/include/gambit/Utils/version.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGambit_1a556d6f9cf5e5c472e76ba1d6dcd6d74a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gambit::gambit_version_int</definition>
        <argsstring></argsstring>
        <name>gambit_version_int</name>
        <qualifiedname>Gambit::gambit_version_int</qualifiedname>
        <initializer>=  10000*gambit_version_major + 100*gambit_version_minor + gambit_version_revision</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/version.hpp" line="50" column="13" bodyfile="Utils/include/gambit/Utils/version.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceGambit_1a416cf87e00c4f96d7a0af90cb25ce296" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BBN_container &amp;bbn)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1BBN__container" kindref="compound">BBN_container</ref> &amp;</type>
          <declname>bbn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/include/gambit/Backends/backend_types/AlterBBN.hpp" line="128" column="10" bodyfile="Backends/include/gambit/Backends/backend_types/AlterBBN.hpp" bodystart="128" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a6f42d1a3433816f3bd4ea5f4eca0f1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::fixns</definition>
        <argsstring>(str)</argsstring>
        <name>fixns</name>
        <qualifiedname>Gambit::fixns</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Get back the &quot;::&quot; from things that use NS_SEP instead. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="47" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="47" bodyend="57" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="43" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1afb7737f8e62cb2b4506c45e8bc482f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::vectorstr_push_back</definition>
        <argsstring>(std::vector&lt; str &gt; &amp;, str)</argsstring>
        <name>vectorstr_push_back</name>
        <qualifiedname>Gambit::vectorstr_push_back</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <defname>vec</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Call push back on a vector of strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="60" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="60" bodyend="68" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="46" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ad55d40a914779bca0bff3420e1c2f65b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::set_allowed_models</definition>
        <argsstring>(functor &amp;, std::vector&lt; str &gt; &amp;, str)</argsstring>
        <name>set_allowed_models</name>
        <qualifiedname>Gambit::set_allowed_models</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> &amp;</type>
          <defname>be_functor</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <defname>allowed_at_be_level</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>models_string</defname>
        </param>
        <briefdescription>
<para>Notify a backend functor of which models it can be used with. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="71" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="71" bodyend="125" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="49" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a0e8dac62916d6eb153c36e2d55e6ea7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_backend_with_log</definition>
        <argsstring>(str)</argsstring>
        <name>register_backend_with_log</name>
        <qualifiedname>Gambit::register_backend_with_log</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s</defname>
        </param>
        <briefdescription>
<para>Register a backend with the logging system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="128" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="128" bodyend="138" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="52" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac69f2d4e09cbf69a7e7b0348c9fd7dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_type</definition>
        <argsstring>(str bever, str classname)</argsstring>
        <name>register_type</name>
        <qualifiedname>Gambit::register_type</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>bever</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>classname</declname>
        </param>
        <briefdescription>
<para>Register a BOSSed type with the rollcall system. </para>
        </briefdescription>
        <detaileddescription>
<para>Register a bossed type with the rollcall system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="141" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="141" bodyend="150" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="55" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ad25344246a2b148067e6b372a6c6e426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::set_backend_functor_status</definition>
        <argsstring>(functor &amp;, const std::vector&lt; str &gt; &amp;)</argsstring>
        <name>set_backend_functor_status</name>
        <qualifiedname>Gambit::set_backend_functor_status</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> &amp;</type>
          <defname>be_functor</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <defname>symbol_names</defname>
        </param>
        <briefdescription>
<para>Disable a backend functor if its library is missing or the symbol cannot be found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="255" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="255" bodyend="300" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="58" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a77169abaa240815026a334b3063049ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::set_BackendIniBit_functor_status</definition>
        <argsstring>(functor &amp;, str, str)</argsstring>
        <name>set_BackendIniBit_functor_status</name>
        <qualifiedname>Gambit::set_BackendIniBit_functor_status</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> &amp;</type>
          <defname>ini_functor</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>v</defname>
        </param>
        <briefdescription>
<para>Disable a backend initialisation function if the backend is missing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="304" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="304" bodyend="316" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="61" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a65b29deadc55ebfd33fe18db7e5fda89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::get_ctor_status</definition>
        <argsstring>(str, str, str, str, str, const std::vector&lt; str &gt; &amp;)</argsstring>
        <name>get_ctor_status</name>
        <qualifiedname>Gambit::get_ctor_status</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>ver</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>name</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>barename</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>args</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <defname>symbol_names</defname>
        </param>
        <briefdescription>
<para>Get the status of a factory pointer to a BOSSed type&apos;s wrapper constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="319" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="319" bodyend="356" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="64" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a35400a7e8b3b2c240b47973d8cee6fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::set_backend_rule_for_model</definition>
        <argsstring>(module_functor_common &amp;, str, str)</argsstring>
        <name>set_backend_rule_for_model</name>
        <qualifiedname>Gambit::set_backend_rule_for_model</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>models</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>tags</defname>
        </param>
        <briefdescription>
<para>Set a backend rule for one or more models. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="360" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="360" bodyend="368" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="67" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1af1123f2311e870d536364ed95bfe0c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::set_classload_requirements</definition>
        <argsstring>(module_functor_common &amp;, str, str, str)</argsstring>
        <name>set_classload_requirements</name>
        <qualifiedname>Gambit::set_classload_requirements</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>verstr</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>default_ver</defname>
        </param>
        <briefdescription>
<para>Set the classloading requirements of a given functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="372" column="7" bodyfile="Backends/src/ini_functions.cpp" bodystart="372" bodyend="391" declfile="Backends/include/gambit/Backends/ini_functions.hpp" declline="70" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac1dc5d9c017ee40e62ffd9dfccd51580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::set_backend_functor_status_C_CXX_Fortran</definition>
        <argsstring>(functor &amp;be_functor, const std::vector&lt; str &gt; &amp;symbol_names)</argsstring>
        <name>set_backend_functor_status_C_CXX_Fortran</name>
        <qualifiedname>Gambit::set_backend_functor_status_C_CXX_Fortran</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> &amp;</type>
          <declname>be_functor</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &amp;</type>
          <declname>symbol_names</declname>
        </param>
        <briefdescription>
<para>Disable a C, C++ or Fortran backend functor if its library is missing or the symbol cannot be found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Backends/src/ini_functions.cpp" line="153" column="8" bodyfile="Backends/src/ini_functions.cpp" bodystart="153" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ab339e52a152de706593c6e1758140b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1gambit__core" kindref="compound">gambit_core</ref> &amp;</type>
        <definition>gambit_core &amp; Gambit::Core</definition>
        <argsstring>()</argsstring>
        <name>Core</name>
        <qualifiedname>Gambit::Core</qualifiedname>
        <briefdescription>
<para>Core accessor function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/core_singleton.cpp" line="24" column="15" bodyfile="Core/src/core_singleton.cpp" bodystart="24" bodyend="28" declfile="Core/include/gambit/Core/core_singleton.hpp" declline="26" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1abbe80443e7044737d5d4658b968ff7f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::core_error</definition>
        <argsstring>()</argsstring>
        <name>core_error</name>
        <qualifiedname>Gambit::core_error</qualifiedname>
        <briefdescription>
<para>Core errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/error_handlers.cpp" line="25" column="9" bodyfile="Core/src/error_handlers.cpp" bodystart="25" bodyend="29" declfile="Core/include/gambit/Core/error_handlers.hpp" declline="27" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a93a04abc5d812b62e646a945f27e35a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::core_warning</definition>
        <argsstring>()</argsstring>
        <name>core_warning</name>
        <qualifiedname>Gambit::core_warning</qualifiedname>
        <briefdescription>
<para>Core warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/error_handlers.cpp" line="32" column="11" bodyfile="Core/src/error_handlers.cpp" bodystart="32" bodyend="36" declfile="Core/include/gambit/Core/error_handlers.hpp" declline="29" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a2a718d03d940d605e25b106eb35e6650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_module</definition>
        <argsstring>(str, str)</argsstring>
        <name>register_module</name>
        <qualifiedname>Gambit::register_module</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>module</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>ref</defname>
        </param>
        <briefdescription>
<para>Register a module with the Core. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/ini_functions.cpp" line="33" column="7" bodyfile="Core/src/ini_functions.cpp" bodystart="33" bodyend="41" declfile="Core/include/gambit/Core/ini_functions.hpp" declline="38" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aa6c42e9faf734495e78c0c67b0e9e0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_module_functor_core</definition>
        <argsstring>(module_functor_common &amp;)</argsstring>
        <name>register_module_functor_core</name>
        <qualifiedname>Gambit::register_module_functor_core</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <briefdescription>
<para>Register a module functor with the Core. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/ini_functions.cpp" line="44" column="7" bodyfile="Core/src/ini_functions.cpp" bodystart="44" bodyend="52" declfile="Core/include/gambit/Core/ini_functions.hpp" declline="41" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1af4bd16bc37b902883763eaa237792fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_model_functor_core</definition>
        <argsstring>(primary_model_functor &amp;)</argsstring>
        <name>register_model_functor_core</name>
        <qualifiedname>Gambit::register_model_functor_core</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1primary__model__functor" kindref="compound">primary_model_functor</ref> &amp;</type>
          <defname>primary_parameters</defname>
        </param>
        <briefdescription>
<para>Register a model functor with the Core. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/ini_functions.cpp" line="55" column="7" bodyfile="Core/src/ini_functions.cpp" bodystart="55" bodyend="63" declfile="Core/include/gambit/Core/ini_functions.hpp" declline="44" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aec88c34fe6927edc3d750fcdd488f55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_backend</definition>
        <argsstring>(str, str, str)</argsstring>
        <name>register_backend</name>
        <qualifiedname>Gambit::register_backend</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>ver</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>ref</defname>
        </param>
        <briefdescription>
<para>Register a backend with the Core. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/ini_functions.cpp" line="66" column="7" bodyfile="Core/src/ini_functions.cpp" bodystart="66" bodyend="74" declfile="Core/include/gambit/Core/ini_functions.hpp" declline="47" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a0e822ebd27ea0a32fdea6cabcc2045e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_backend_functor</definition>
        <argsstring>(functor &amp;)</argsstring>
        <name>register_backend_functor</name>
        <qualifiedname>Gambit::register_backend_functor</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <briefdescription>
<para>Register a backend functor with the Core. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/ini_functions.cpp" line="77" column="7" bodyfile="Core/src/ini_functions.cpp" bodystart="77" bodyend="85" declfile="Core/include/gambit/Core/ini_functions.hpp" declline="50" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a1fd7879b3844fef54128ccef38973734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_management_req</definition>
        <argsstring>(module_functor_common &amp;)</argsstring>
        <name>register_management_req</name>
        <qualifiedname>Gambit::register_management_req</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <briefdescription>
<para>Register a loop management requirement with the Core. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/ini_functions.cpp" line="88" column="7" bodyfile="Core/src/ini_functions.cpp" bodystart="88" bodyend="96" declfile="Core/include/gambit/Core/ini_functions.hpp" declline="53" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a4201711400efcb2dcb380aab8e908299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAML::Emitter &amp;</type>
        <definition>YAML::Emitter &amp; Gambit::operator&lt;&lt;</definition>
        <argsstring>(YAML::Emitter &amp;, const capability_info &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>YAML::Emitter &amp;</type>
          <defname>out</defname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1capability__info" kindref="compound">capability_info</ref> &amp;</type>
          <defname>info</defname>
        </param>
        <briefdescription>
<para>Emitter for the <ref refid="structGambit_1_1capability__info" kindref="compound">capability_info</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/yaml_description_database.cpp" line="37" column="3" bodyfile="Core/src/yaml_description_database.cpp" bodystart="37" bodyend="63" declfile="Core/include/gambit/Core/yaml_description_database.hpp" declline="76" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a602b9b20823e0b21cde614fb47a48ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>YAML::Emitter &amp;</type>
        <definition>YAML::Emitter &amp; Gambit::operator&lt;&lt;</definition>
        <argsstring>(YAML::Emitter &amp;, const model_info &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>YAML::Emitter &amp;</type>
          <defname>out</defname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1model__info" kindref="compound">model_info</ref> &amp;</type>
          <defname>info</defname>
        </param>
        <briefdescription>
<para>Emitter for the <ref refid="structGambit_1_1model__info" kindref="compound">model_info</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/src/yaml_description_database.cpp" line="66" column="3" bodyfile="Core/src/yaml_description_database.cpp" bodystart="66" bodyend="95" declfile="Core/include/gambit/Core/yaml_description_database.hpp" declline="79" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a4ae203c31e880f8dc24caba978956555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::ini_catch</definition>
        <argsstring>(std::exception &amp;)</argsstring>
        <name>ini_catch</name>
        <qualifiedname>Gambit::ini_catch</qualifiedname>
        <param>
          <type>std::exception &amp;</type>
          <defname>e</defname>
        </param>
        <briefdescription>
<para>Catch initialisation exceptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_catch.cpp" line="29" column="8" bodyfile="Elements/src/ini_catch.cpp" bodystart="29" bodyend="33" declfile="Elements/include/gambit/Elements/ini_catch.hpp" declline="27" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a582df32493393e5c5a14f7d64131cbbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::add_equivrelation</definition>
        <argsstring>(str, str)</argsstring>
        <name>add_equivrelation</name>
        <qualifiedname>Gambit::add_equivrelation</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s1</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>s2</defname>
        </param>
        <briefdescription>
<para>Helper function for adding a type equivalency at initialisation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="44" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="44" bodyend="52" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="43" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a2b32cf7ddc654f2d4a8cfe250ccb74f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::pass_default_to_backendinfo</definition>
        <argsstring>(str, str)</argsstring>
        <name>pass_default_to_backendinfo</name>
        <qualifiedname>Gambit::pass_default_to_backendinfo</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>def</defname>
        </param>
        <briefdescription>
<para>Helper function for passing default backend information at initialisation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="55" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="55" bodyend="63" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="46" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a2b4e1ea4c0602d28d8d87a1ef51d00bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::add_model</definition>
        <argsstring>(str, str)</argsstring>
        <name>add_model</name>
        <qualifiedname>Gambit::add_model</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>parent</defname>
        </param>
        <briefdescription>
<para>Runtime addition of model to GAMBIT model database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="66" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="66" bodyend="74" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="49" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aad155d8146087ec0f7b176b1b961cf0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::add_parameter</definition>
        <argsstring>(model_functor &amp;, str)</argsstring>
        <name>add_parameter</name>
        <qualifiedname>Gambit::add_parameter</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1model__functor" kindref="compound">model_functor</ref> &amp;</type>
          <defname>primary_parameters</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>param</defname>
        </param>
        <briefdescription>
<para>Add a new parameter to a primary model functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="77" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="77" bodyend="85" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="52" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ad081b37eac94f086abb8e2fa818f1394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::set_model_name</definition>
        <argsstring>(model_functor &amp;, str)</argsstring>
        <name>set_model_name</name>
        <qualifiedname>Gambit::set_model_name</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1model__functor" kindref="compound">model_functor</ref> &amp;</type>
          <defname>primary_parameters</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model_name</defname>
        </param>
        <briefdescription>
<para>Set the model name in a primary model functor. </para>
        </briefdescription>
        <detaileddescription>
<para>Set model name string in a primary model functor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="88" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="88" bodyend="96" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="55" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a7ad47ef01ccf52dec72fcef1cc03ef34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::copy_parameters</definition>
        <argsstring>(model_functor &amp;, model_functor &amp;, bool, str=&quot;&quot;, str=&quot;&quot;)</argsstring>
        <name>copy_parameters</name>
        <qualifiedname>Gambit::copy_parameters</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1model__functor" kindref="compound">model_functor</ref> &amp;</type>
          <defname>donor</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1model__functor" kindref="compound">model_functor</ref> &amp;</type>
          <defname>donee</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>add_friend</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model</defname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model_x</defname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Tell a model functor to take its parameter definition from another model functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="99" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="99" bodyend="108" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="58" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a8e25c9781fd44fc6fd5c41d2f9b381fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_model_functor</definition>
        <argsstring>(std::map&lt; str, bool(*)()&gt;, std::map&lt; str, str &gt;, bool(*)(), const str &amp;, const str &amp;)</argsstring>
        <name>register_model_functor</name>
        <qualifiedname>Gambit::register_model_functor</qualifiedname>
        <param>
          <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, bool(*)()&gt;</type>
        </param>
        <param>
          <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        </param>
        <param>
          <type>bool(*)()</type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Register a model functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/ini_functions.hpp" line="61" column="7" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="61" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a1191fc24dcb64db06bb338f872c86f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_module_with_log</definition>
        <argsstring>(str)</argsstring>
        <name>register_module_with_log</name>
        <qualifiedname>Gambit::register_module_with_log</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>module</defname>
        </param>
        <briefdescription>
<para>Create a log tag for a new module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="111" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="111" bodyend="122" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="64" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a13f769ff48058ee7907ceef8362e1cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_function</definition>
        <argsstring>(module_functor_common &amp;, bool, safe_ptr&lt; bool &gt; *, safe_ptr&lt; Options &gt; &amp;, safe_ptr&lt; std::set&lt; sspair &gt; &gt; &amp;, safe_ptr&lt; Options &gt; &amp;)</argsstring>
        <name>register_function</name>
        <qualifiedname>Gambit::register_function</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>can_manage</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; bool &gt; *</type>
          <defname>done</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &gt; &amp;</type>
          <defname>opts</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &gt; &amp;</type>
          <defname>dependees</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &gt; &amp;</type>
          <defname>subcaps</defname>
        </param>
        <briefdescription>
<para>Register a function with a module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="125" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="125" bodyend="141" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="67" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac0af463f99cf94f7031edf01c00567f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_function_nesting</definition>
        <argsstring>(module_functor_common &amp;, omp_safe_ptr&lt; long long &gt; &amp;, const str &amp;, const str &amp;)</argsstring>
        <name>register_function_nesting</name>
        <qualifiedname>Gambit::register_function_nesting</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1omp__safe__ptr" kindref="compound">omp_safe_ptr</ref>&lt; long long &gt; &amp;</type>
          <defname>iteration</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>loopmanager_capability</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>loopmanager_type</defname>
        </param>
        <briefdescription>
<para>Register the fact that a module function needs to run nested. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="144" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="144" bodyend="154" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="71" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1afe79d6f5ae97aafc17cdeb7c7123ba10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_model_singly</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;)</argsstring>
        <name>register_model_singly</name>
        <qualifiedname>Gambit::register_model_singly</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>model</defname>
        </param>
        <briefdescription>
<para>Register that a module function is compatible with a single model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="157" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="157" bodyend="165" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a7b28bc19fdc1b365e38057b551e31ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_model_group</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;)</argsstring>
        <name>register_model_group</name>
        <qualifiedname>Gambit::register_model_group</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>group_name</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>group</defname>
        </param>
        <briefdescription>
<para>Register a model group with a functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="237" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="237" bodyend="245" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="77" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1adb92c5bae3f37d5ef41330000b0aac89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_backend_requirement</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;, const str &amp;, bool, const str &amp;, const str &amp;, void(*)(functor *))</argsstring>
        <name>register_backend_requirement</name>
        <qualifiedname>Gambit::register_backend_requirement</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>group</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>req</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>tags</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>is_variable</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>req_type1</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>req_type2</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Register a backend requirement for a module function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="168" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="168" bodyend="179" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="80" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ab7746d989ab7116134034cf4734b15d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_model_combination</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;)</argsstring>
        <name>register_model_combination</name>
        <qualifiedname>Gambit::register_model_combination</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>combo</defname>
        </param>
        <briefdescription>
<para>Register a combination of models as allowed with a functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="248" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="248" bodyend="256" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="84" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a68c91a85d23d8614a46f658e4f506c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_dependency</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;, void(*)(functor *, module_functor_common *))</argsstring>
        <name>register_dependency</name>
        <qualifiedname>Gambit::register_dependency</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>dep</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>dep_type</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Register a dependency of a module function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="182" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="182" bodyend="191" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="87" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ad10912f63f7aaf426d82da8f399b9482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_conditional_dependency</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;)</argsstring>
        <name>register_conditional_dependency</name>
        <qualifiedname>Gambit::register_conditional_dependency</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>dep</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>dep_type</defname>
        </param>
        <briefdescription>
<para>Register a conditional dependency of a module function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="194" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="194" bodyend="202" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="91" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a4d7f20c689e7cc9e23761bcb2c582199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_model_parameter_dependency</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;, void(*resolver)(functor *, module_functor_common *))</argsstring>
        <name>register_model_parameter_dependency</name>
        <qualifiedname>Gambit::register_model_parameter_dependency</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>model</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>dep</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <declname>resolver</declname>
        </param>
        <briefdescription>
<para>Register a model parameters dependency of a module function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="205" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="205" bodyend="210" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="94" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a8ad07692725311cd166ad5ca485e0202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_model_conditional_dependency</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;, void(*)(functor *, module_functor_common *))</argsstring>
        <name>register_model_conditional_dependency</name>
        <qualifiedname>Gambit::register_model_conditional_dependency</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>model</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>dep</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Register a model-conditional dependency of a module function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="213" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="213" bodyend="222" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="98" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a74484fe5684440c139a6cecf165dd23c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::register_backend_conditional_dependency</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;, const str &amp;, const str &amp;, void(*)(functor *, module_functor_common *))</argsstring>
        <name>register_backend_conditional_dependency</name>
        <qualifiedname>Gambit::register_backend_conditional_dependency</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>req</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>be</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>versions</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>dep</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Register a backend-conditional dependency of a module function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="225" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="225" bodyend="234" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="102" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac7e076479f2c71cd91b638340449fcca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::apply_backend_matching_rule</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;)</argsstring>
        <name>apply_backend_matching_rule</name>
        <qualifiedname>Gambit::apply_backend_matching_rule</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>rule</defname>
        </param>
        <briefdescription>
<para>Apply a backend-matching rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="259" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="259" bodyend="267" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="106" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a17c3ce0893730ccc8c28454b03cc458f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::apply_backend_option_rule</definition>
        <argsstring>(module_functor_common &amp;, const str &amp;, const str &amp;)</argsstring>
        <name>apply_backend_option_rule</name>
        <qualifiedname>Gambit::apply_backend_option_rule</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>be_and_ver</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>tags</defname>
        </param>
        <briefdescription>
<para>Apply a backend option rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="270" column="7" bodyfile="Elements/src/ini_functions.cpp" bodystart="270" bodyend="278" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="109" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a118e1a1a69132ec0187ae6da8c865850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add_from_subspec</definition>
        <argsstring>(SLHAstruct &amp;slha, const str local_info, const SubSpectrum &amp;subspec, const Par::Tags partype, const std::pair&lt; int, int &gt; &amp;pdg_pair, const str &amp;block, const str &amp;comment, const bool error_if_missing=true, const double rescale=1.0)</argsstring>
        <name>SLHAea_add_from_subspec</name>
        <qualifiedname>Gambit::SLHAea_add_from_subspec</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>local_info</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>subspec</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt; &amp;</type>
          <declname>pdg_pair</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>error_if_missing</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rescale</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add an entry from a subspectrum getter to an SLHAea object; SLHA index given by pdg code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/slhaea_spec_helpers.cpp" line="36" column="8" bodyfile="Elements/src/slhaea_spec_helpers.cpp" bodystart="36" bodyend="53" declfile="Elements/include/gambit/Elements/slhaea_spec_helpers.hpp" declline="44" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a0f3d5b28af54e89271cf39e62371692b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add_from_subspec</definition>
        <argsstring>(SLHAstruct &amp;slha, const str local_info, const SubSpectrum &amp;subspec, const Par::Tags partype, const str &amp;name, const str &amp;block, const int slha_index, const str &amp;comment, const bool error_if_missing=true, const double rescale=1.0)</argsstring>
        <name>SLHAea_add_from_subspec</name>
        <qualifiedname>Gambit::SLHAea_add_from_subspec</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>local_info</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>subspec</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>slha_index</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>error_if_missing</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rescale</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add an entry from a subspectrum getter to an SLHAea object; 1 SLHA index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/slhaea_spec_helpers.cpp" line="56" column="8" bodyfile="Elements/src/slhaea_spec_helpers.cpp" bodystart="56" bodyend="72" declfile="Elements/include/gambit/Elements/slhaea_spec_helpers.hpp" declline="49" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a843b7bd2b21b230d9faea52fde72c95c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add_from_subspec</definition>
        <argsstring>(SLHAstruct &amp;slha, const str local_info, const SubSpectrum &amp;subspec, const Par::Tags partype, const str &amp;name, const int index1, const int index2, const str &amp;block, const int slha_index1, const int slha_index2, const str &amp;comment, const bool error_if_missing=true, const double rescale=1.0)</argsstring>
        <name>SLHAea_add_from_subspec</name>
        <qualifiedname>Gambit::SLHAea_add_from_subspec</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>local_info</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>subspec</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>slha_index1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>slha_index2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>error_if_missing</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rescale</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Add an entry from a subspectrum getter to an SLHAea object; two <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> getter indices, two SLHA indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/slhaea_spec_helpers.cpp" line="75" column="8" bodyfile="Elements/src/slhaea_spec_helpers.cpp" bodystart="75" bodyend="91" declfile="Elements/include/gambit/Elements/slhaea_spec_helpers.hpp" declline="54" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a2b1784799b76c3c950d2a92510426cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::add_SimpleSpec_to_SLHAea</definition>
        <argsstring>(const SubSpectrum &amp;, SLHAstruct &amp;, const SubSpectrumContents &amp;)</argsstring>
        <name>add_SimpleSpec_to_SLHAea</name>
        <qualifiedname>Gambit::add_SimpleSpec_to_SLHAea</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <defname>subspec</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <defname>slha</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrumContents" kindref="compound">SubSpectrumContents</ref> &amp;</type>
          <defname>contents</defname>
        </param>
        <briefdescription>
<para>Write a SimpleSpectrum to an SLHAea object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/slhaea_spec_helpers.cpp" line="123" column="8" bodyfile="Elements/src/slhaea_spec_helpers.cpp" bodystart="123" bodyend="177" declfile="Elements/include/gambit/Elements/slhaea_spec_helpers.hpp" declline="59" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a2c35d744ef2374d5daf02f20d9fc3921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::SMlike_higgs_PDG_code</definition>
        <argsstring>(const SubSpectrum &amp;)</argsstring>
        <name>SMlike_higgs_PDG_code</name>
        <qualifiedname>Gambit::SMlike_higgs_PDG_code</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <defname>spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine which MSSM higgs is most SM-like. Needs expansion to work with non-MSSM (e.g. *HDM) models</para>
<para>Determine which higgs is most SM-like. Works only for 2 and 3 higgses (e.g. MSSM and NMSSM) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/smlike_higgs.cpp" line="38" column="7" bodyfile="Elements/src/smlike_higgs.cpp" bodystart="38" bodyend="113" declfile="Elements/include/gambit/Elements/smlike_higgs.hpp" declline="30" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a0aafd3a13d950796ee75829ab5977658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename HE</type>
          </param>
          <param>
            <type>typename HEmod</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref></type>
        <definition>Spectrum Gambit::spectrum_from_SLHAea</definition>
        <argsstring>(HEmod hemod, SLHAstruct slhaea, const Spectrum::mc_info &amp;mci, const Spectrum::mr_info &amp;mri)</argsstring>
        <name>spectrum_from_SLHAea</name>
        <qualifiedname>Gambit::spectrum_from_SLHAea</qualifiedname>
        <param>
          <type>HEmod</type>
          <declname>hemod</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref></type>
          <declname>slhaea</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" kindref="member">Spectrum::mc_info</ref> &amp;</type>
          <declname>mci</declname>
        </param>
        <param>
          <type>const Spectrum::mr_info &amp;</type>
          <declname>mri</declname>
        </param>
        <briefdescription>
<para>Create a simple spectrum object from an SLHAea object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum_factories.hpp" line="27" column="13" bodyfile="Elements/include/gambit/Elements/spectrum_factories.hpp" bodystart="27" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a1198f300ed7fa8d01a5c5411f5777080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename HE</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref></type>
        <definition>Spectrum Gambit::spectrum_from_SLHA</definition>
        <argsstring>(str slha, const Spectrum::mc_info &amp;mci, const Spectrum::mr_info &amp;mri)</argsstring>
        <name>spectrum_from_SLHA</name>
        <qualifiedname>Gambit::spectrum_from_SLHA</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" kindref="member">Spectrum::mc_info</ref> &amp;</type>
          <declname>mci</declname>
        </param>
        <param>
          <type>const Spectrum::mr_info &amp;</type>
          <declname>mri</declname>
        </param>
        <briefdescription>
<para>Create a simple spectrum object from an SLHA file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum_factories.hpp" line="75" column="13" bodyfile="Elements/include/gambit/Elements/spectrum_factories.hpp" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ad1c0b7c5cdd24987f35a2139f253ad81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::within_bounds</definition>
        <argsstring>(const int i, const std::set&lt; int &gt; allowed)</argsstring>
        <name>within_bounds</name>
        <qualifiedname>Gambit::within_bounds</qualifiedname>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::set&lt; int &gt;</type>
          <declname>allowed</declname>
        </param>
        <briefdescription>
<para>Helper function for checking if indices are valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum_helpers.hpp" line="36" column="16" bodyfile="Elements/include/gambit/Elements/spectrum_helpers.hpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1add4be3a6e47c57d5c268eacc38488f2a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Gambit::operator==</definition>
        <argsstring>(const SpecOverrideOptions &amp;lhs, const SpecOverrideOptions &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>Gambit::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum_helpers.hpp" line="105" column="23" bodyfile="Elements/include/gambit/Elements/spectrum_helpers.hpp" bodystart="105" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a1449a1c44cb5ae22f731c560a9d9f37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::terminator</definition>
        <argsstring>()</argsstring>
        <name>terminator</name>
        <qualifiedname>Gambit::terminator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Christoph Weniger </para>
</simplesect>
<simplesect kind="date"><para>2016 Feb</para>
</simplesect>
<hruler/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/terminator.hpp" line="23" column="8" bodyfile="Elements/src/terminator.cpp" bodystart="21" bodyend="41" declfile="Elements/include/gambit/Elements/terminator.hpp" declline="23" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a71a3677e90be4381e9ab7064daacf6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::virtual_SMHiggs_widths</definition>
        <argsstring>(str, double)</argsstring>
        <name>virtual_SMHiggs_widths</name>
        <qualifiedname>Gambit::virtual_SMHiggs_widths</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>channel</defname>
        </param>
        <param>
          <type>double</type>
          <defname>mh</defname>
        </param>
        <briefdescription>
<para>Higgs branching ratios and total width Gamma [GeV], as function of mass [GeV] (90 - 300 GeV) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/virtual_higgs.cpp" line="36" column="10" bodyfile="Elements/src/virtual_higgs.cpp" bodystart="36" bodyend="127" declfile="Elements/include/gambit/Elements/virtual_higgs.hpp" declline="33" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a0a779a9c159db86be089894a715a7624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::get_calculator_info</definition>
        <argsstring>(const SLHAstruct &amp;slha, str &amp;calculator, str &amp;calculator_version)</argsstring>
        <name>get_calculator_info</name>
        <qualifiedname>Gambit::get_calculator_info</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>calculator</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>calculator_version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/decay_table.cpp" line="33" column="8" bodyfile="Elements/src/decay_table.cpp" bodystart="33" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a2069170788af5a0c328592e428dfef20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add_QNumbers_from_subspec</definition>
        <argsstring>(SLHAstruct &amp;slha, const SubSpectrum &amp;subspec, const std::pair&lt; int, int &gt; pdg_pair)</argsstring>
        <name>SLHAea_add_QNumbers_from_subspec</name>
        <qualifiedname>Gambit::SLHAea_add_QNumbers_from_subspec</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>subspec</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <declname>pdg_pair</declname>
        </param>
        <briefdescription>
<para>Adds QNUMBERS entry for a particle, SLHA index given by the PDG code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/slhaea_spec_helpers.cpp" line="94" column="8" bodyfile="Elements/src/slhaea_spec_helpers.cpp" bodystart="94" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a54f578b856d88fa39b5af11b146d2522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::is_abs</definition>
        <argsstring>(str &amp;s)</argsstring>
        <name>is_abs</name>
        <qualifiedname>Gambit::is_abs</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Helper function for checking if a particle or ratio has been requested as an absolute value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/spectrum.cpp" line="160" column="9" bodyfile="Elements/src/spectrum.cpp" bodystart="160" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1adc186dd8542984ac7c777296f545f7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1Logging_1_1LogMaster" kindref="compound">Logging::LogMaster</ref> &amp;</type>
        <definition>Logging::LogMaster &amp; Gambit::logger</definition>
        <argsstring>()</argsstring>
        <name>logger</name>
        <qualifiedname>Gambit::logger</qualifiedname>
        <briefdescription>
<para>Function to retrieve a reference to the <ref refid="namespaceGambit" kindref="compound">Gambit</ref> global log object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logs/src/logger.cpp" line="95" column="22" bodyfile="Logs/src/logger.cpp" bodystart="95" bodyend="102" declfile="Logs/include/gambit/Logs/logger.hpp" declline="103" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1af7e254d36404611fec2d4e99440b898a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::MSSM_mA_to_MSSM_mhud</definition>
        <argsstring>(const ModelParameters &amp;myP, ModelParameters &amp;targetP, const SubSpectrum &amp;HE)</argsstring>
        <name>MSSM_mA_to_MSSM_mhud</name>
        <qualifiedname>Gambit::MSSM_mA_to_MSSM_mhud</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>myP</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>targetP</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>HE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/models/MSSM63atX_mA.cpp" line="48" column="8" bodyfile="Models/src/models/MSSM63atX_mA.cpp" bodystart="48" bodyend="70" declfile="Models/include/gambit/Models/models/MSSM63atQ_mA.hpp" declline="37" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a9e9854fff961f15384f963feaf4b2488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::MSSMatX_to_MSSMatQ</definition>
        <argsstring>(const ModelParameters &amp;myP, ModelParameters &amp;targetP, const SubSpectrum &amp;HE)</argsstring>
        <name>MSSMatX_to_MSSMatQ</name>
        <qualifiedname>Gambit::MSSMatX_to_MSSMatQ</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>myP</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>targetP</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>HE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/models/MSSM63atX.cpp" line="44" column="8" bodyfile="Models/src/models/MSSM63atX.cpp" bodystart="44" bodyend="60" declfile="Models/include/gambit/Models/models/MSSM63atQ_mA.hpp" declline="40" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a6ef5686aba26d591f95254604c20c2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::MSSM20atX_to_MSSM25atX</definition>
        <argsstring>(const ModelParameters &amp;myP, ModelParameters &amp;targetP)</argsstring>
        <name>MSSM20atX_to_MSSM25atX</name>
        <qualifiedname>Gambit::MSSM20atX_to_MSSM25atX</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>myP</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>targetP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/models/MSSM20atX.cpp" line="61" column="8" bodyfile="Models/src/models/MSSM20atX.cpp" bodystart="61" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a89315facb2f73ea3472ddce1dbc40186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::MSSM25atX_to_MSSM30atX</definition>
        <argsstring>(const ModelParameters &amp;myP, ModelParameters &amp;targetP)</argsstring>
        <name>MSSM25atX_to_MSSM30atX</name>
        <qualifiedname>Gambit::MSSM25atX_to_MSSM30atX</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>myP</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>targetP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/models/MSSM25atX.cpp" line="46" column="8" bodyfile="Models/src/models/MSSM25atX.cpp" bodystart="46" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ae05dec1681ef2cc0dde292d69f0f8db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::MSSM30atX_to_MSSM63atX</definition>
        <argsstring>(const ModelParameters &amp;myP, ModelParameters &amp;targetP)</argsstring>
        <name>MSSM30atX_to_MSSM63atX</name>
        <qualifiedname>Gambit::MSSM30atX_to_MSSM63atX</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>myP</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1ModelParameters" kindref="compound">ModelParameters</ref> &amp;</type>
          <declname>targetP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/models/MSSM30atX.cpp" line="66" column="8" bodyfile="Models/src/models/MSSM30atX.cpp" bodystart="66" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a70b0281899cca99ceee2ad05e729fb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::orderer</definition>
        <argsstring>(std::pair&lt; int, double &gt; a, std::pair&lt; int, double &gt; b)</argsstring>
        <name>orderer</name>
        <qualifiedname>Gambit::orderer</qualifiedname>
        <param>
          <type>std::pair&lt; int, double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::pair&lt; int, double &gt;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Helper function for sorting int, double pairs according to the double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/SimpleSpectra/MSSMSimpleSpec.cpp" line="36" column="12" bodyfile="Models/src/SimpleSpectra/MSSMSimpleSpec.cpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a307175148ab55ec1da158a08e15acafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1Printers_1_1BaseReader" kindref="compound">Printers::BaseReader</ref> &amp;</type>
        <definition>Printers::BaseReader &amp; Gambit::get_pp_reader</definition>
        <argsstring>()</argsstring>
        <name>get_pp_reader</name>
        <qualifiedname>Gambit::get_pp_reader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/src/printermanager.cpp" line="50" column="24" bodyfile="Printers/src/printermanager.cpp" bodystart="50" bodyend="67" declfile="Printers/include/gambit/Printers/printermanager.hpp" declline="42" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aca3342b2951194a5075bf43cbeb67ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::set_global_printer_manager</definition>
        <argsstring>(Printers::PrinterManager *pm)</argsstring>
        <name>set_global_printer_manager</name>
        <qualifiedname>Gambit::set_global_printer_manager</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Printers_1_1PrinterManager" kindref="compound">Printers::PrinterManager</ref> *</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/src/printermanager.cpp" line="69" column="8" bodyfile="Printers/src/printermanager.cpp" bodystart="69" bodyend="72" declfile="Printers/include/gambit/Printers/printermanager.hpp" declline="43" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a82c015a3d07d5c4d23950329f85d7372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1Printers_1_1PrinterManager" kindref="compound">Printers::PrinterManager</ref> *</type>
        <definition>Printers::PrinterManager * Gambit::get_global_printer_manager</definition>
        <argsstring>()</argsstring>
        <name>get_global_printer_manager</name>
        <qualifiedname>Gambit::get_global_printer_manager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/src/printermanager.cpp" line="45" column="28" bodyfile="Printers/src/printermanager.cpp" bodystart="45" bodyend="48" declfile="Printers/include/gambit/Printers/printermanager.hpp" declline="44" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aa80bf71438e63d7f499a9a98f9a4ebcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::format_for_screen</definition>
        <argsstring>(const std::string &amp;input_string)</argsstring>
        <name>format_for_screen</name>
        <qualifiedname>Gambit::format_for_screen</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>input_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/screen_print_utils.cpp" line="100" column="17" bodyfile="Utils/src/screen_print_utils.cpp" bodystart="100" bodyend="199" declfile="Utils/include/gambit/Utils/screen_print_utils.hpp" declline="60" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1addd316c28a44f43b243332d55604a1b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::print_to_screen</definition>
        <argsstring>(const std::string &amp;file_in, const std::string &amp;name)</argsstring>
        <name>print_to_screen</name>
        <qualifiedname>Gambit::print_to_screen</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/screen_print_utils.cpp" line="205" column="10" bodyfile="Utils/src/screen_print_utils.cpp" bodystart="205" bodyend="227" declfile="Utils/include/gambit/Utils/screen_print_utils.hpp" declline="66" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac4efce31c65feb60c2d1f8c8c34eb64c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::get_screen_cols</definition>
        <argsstring>()</argsstring>
        <name>get_screen_cols</name>
        <qualifiedname>Gambit::get_screen_cols</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/screen_print_utils.hpp" line="72" column="16" bodyfile="Utils/include/gambit/Utils/screen_print_utils.hpp" bodystart="72" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac74ee7ca8dbdc346833644a102a1c4eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::separate_line</definition>
        <argsstring>(std::string &amp;line, std::string::size_type indent, std::string::size_type cols_pos)</argsstring>
        <name>separate_line</name>
        <qualifiedname>Gambit::separate_line</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>cols_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/screen_print_utils.hpp" line="99" column="24" bodyfile="Utils/include/gambit/Utils/screen_print_utils.hpp" bodystart="99" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a5e5901d91b250789f6fcd40d5682b437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::signal_name</definition>
        <argsstring>(int sig)</argsstring>
        <name>signal_name</name>
        <qualifiedname>Gambit::signal_name</qualifiedname>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Translate signal codes to strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/signal_handling.cpp" line="35" column="16" bodyfile="Utils/src/signal_handling.cpp" bodystart="35" bodyend="46" declfile="Utils/include/gambit/Utils/signal_handling.hpp" declline="46" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a75e921ef024de52dc7497aa65d44320e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1SignalData" kindref="compound">SignalData</ref> &amp;</type>
        <definition>SignalData &amp; Gambit::signaldata</definition>
        <argsstring>()</argsstring>
        <name>signaldata</name>
        <qualifiedname>Gambit::signaldata</qualifiedname>
        <briefdescription>
<para>Retrieve global instance of signal handler options struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/signal_handling.cpp" line="633" column="15" bodyfile="Utils/src/signal_handling.cpp" bodystart="633" bodyend="653" declfile="Utils/include/gambit/Utils/signal_handling.hpp" declline="235" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a155518850e2843f1868a65356698766c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::set_signal_handler</definition>
        <argsstring>(const YAML::Node &amp;keyvalnode, const int sig, const std::string &amp;def_mode)</argsstring>
        <name>set_signal_handler</name>
        <qualifiedname>Gambit::set_signal_handler</qualifiedname>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>keyvalnode</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>def_mode</declname>
        </param>
        <briefdescription>
<para>Choose signal handler for a given signal via yaml file option. </para>
        </briefdescription>
        <detaileddescription>
<para>TODO: Mostly obsolete Choose signal handler for a given signal via yaml file option </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/signal_handling.cpp" line="675" column="9" bodyfile="Utils/src/signal_handling.cpp" bodystart="675" bodyend="708" declfile="Utils/include/gambit/Utils/signal_handling.hpp" declline="255" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a4dd69f06ef89c647418dd3826349847a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sigset_t *</type>
        <definition>sigset_t * Gambit::signal_mask</definition>
        <argsstring>()</argsstring>
        <name>signal_mask</name>
        <qualifiedname>Gambit::signal_mask</qualifiedname>
        <briefdescription>
<para>Getter for global signal set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/signal_helpers.cpp" line="24" column="13" bodyfile="Utils/src/signal_helpers.cpp" bodystart="24" bodyend="28" declfile="Utils/include/gambit/Utils/signal_helpers.hpp" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a8caf7bacd0a4f6cc4e059b0ea0bfcef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref></type>
        <definition>SLHAstruct Gambit::read_SLHA</definition>
        <argsstring>(str slha)</argsstring>
        <name>read_SLHA</name>
        <qualifiedname>Gambit::read_SLHA</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>slha</declname>
        </param>
        <briefdescription>
<para>Read an SLHA file in to an SLHAea object with some error-checking. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a strong typedef (different classes underneath, but can be assigned to each other etc.) that lets us create e.g. different print/retrieve functions for different sorts of spectrum information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="32" column="14" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="32" bodyend="45" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="50" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1af4208f4dcce77db90e8b4025bdfdca0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SLHAea_get</definition>
        <argsstring>(const SLHAstruct &amp;slha, const str &amp;block, const int index)</argsstring>
        <name>SLHAea_get</name>
        <qualifiedname>Gambit::SLHAea_get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get an entry from an SLHAea object as a double, with some error checking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="48" column="10" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="48" bodyend="64" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a61f41d9f63a2ddab55b79e5c79399169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::SLHAea_get</definition>
        <argsstring>(const SLHAstruct &amp;slha, const str &amp;block, const int index, const double defvalue)</argsstring>
        <name>SLHAea_get</name>
        <qualifiedname>Gambit::SLHAea_get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>defvalue</declname>
        </param>
        <briefdescription>
<para>Get an entry from an SLHAea object as a double; raise a warning and use a default value if the entry is missing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="67" column="10" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="67" bodyend="82" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1afa79cfbed52e42869789f7c0848411a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add_block</definition>
        <argsstring>(SLHAstruct &amp;, const str &amp;name, const double scale=-1)</argsstring>
        <name>SLHAea_add_block</name>
        <qualifiedname>Gambit::SLHAea_add_block</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <defname>slha</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scale</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Add a new block to an SLHAea object, with or without a scale. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="85" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="85" bodyend="95" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="59" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aebbaa4e89edf5319e71ad824b7a679b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_delete_block</definition>
        <argsstring>(SLHAstruct &amp;slha, const std::string &amp;block)</argsstring>
        <name>SLHAea_delete_block</name>
        <qualifiedname>Gambit::SLHAea_delete_block</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>Delete an entire block from an SLHAea object, if it exists (actually just the first block matching the given name) </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a block entirely if it exists (TODO: actually only deletes first instance of the block found!) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="168" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="168" bodyend="172" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="62" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a021e3fd434eb3b1e0391110395209de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SLHAea_block_exists</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block)</argsstring>
        <name>SLHAea_block_exists</name>
        <qualifiedname>Gambit::SLHAea_block_exists</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>Check if a block exists in an SLHAea object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="97" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="97" bodyend="103" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="65" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aae31de64c8868ea47a466b1c9e900b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SLHAea_check_block</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block)</argsstring>
        <name>SLHAea_check_block</name>
        <qualifiedname>Gambit::SLHAea_check_block</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>Check if a block exists in an SLHAea object, add it if not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="105" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="105" bodyend="118" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="67" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a81db8590bfbb66f9804d8078f9ce5341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SLHAea_check_block</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, const int index)</argsstring>
        <name>SLHAea_check_block</name>
        <qualifiedname>Gambit::SLHAea_check_block</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Check if a block exists in an SLHAea object, add it if not, and check if it has an entry at a given index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="123" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="123" bodyend="142" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="69" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a08773de73da10bda817051f558a8e647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::SLHAea_check_block</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, const int index1, const int index2)</argsstring>
        <name>SLHAea_check_block</name>
        <qualifiedname>Gambit::SLHAea_check_block</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="144" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="144" bodyend="164" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="70" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a51fbf4904bea9b7dfa8e0159d3a800c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::SLHAea_add_GAMBIT_SPINFO</definition>
        <argsstring>(SLHAstruct &amp;slha)</argsstring>
        <name>SLHAea_add_GAMBIT_SPINFO</name>
        <qualifiedname>Gambit::SLHAea_add_GAMBIT_SPINFO</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <briefdescription>
<para>Write the SPINFO block with GAMBIT name and version number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/slhaea_helpers.cpp" line="174" column="8" bodyfile="Utils/src/slhaea_helpers.cpp" bodystart="174" bodyend="184" declfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" declline="73" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac204b4578cf43929b116a78575f6b143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SLHAea_add_matrix</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, const std::vector&lt; T &gt; &amp;matrix, const int rows, const int cols, const str &amp;comment=&quot;&quot;, const bool overwrite=false)</argsstring>
        <name>SLHAea_add_matrix</name>
        <qualifiedname>Gambit::SLHAea_add_matrix</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>overwrite</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a whole matrix to an SLHAea object if it doesn&apos;t already exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/slhaea_helpers.hpp" line="90" column="8" bodyfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" bodystart="90" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a269b63d64e41a85a70d9ab89a91b29e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SLHAea_overwrite_block</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, int index, T value, const str &amp;comment)</argsstring>
        <name>SLHAea_overwrite_block</name>
        <qualifiedname>Gambit::SLHAea_overwrite_block</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
<para>Check if a line exists in an SLHAea block, then overwrite it if it does. Otherwise add the line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/slhaea_helpers.hpp" line="106" column="8" bodyfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" bodystart="106" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aaf62c95f0579f3f851d60d31c772cbc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::SLHAea_overwrite_block</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;block, int index1, int index2, T value, const str &amp;comment)</argsstring>
        <name>SLHAea_overwrite_block</name>
        <qualifiedname>Gambit::SLHAea_overwrite_block</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index2</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
<para>Check if a line exists in an SLHAea block, then overwrite it if it does. Otherwise add the line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/slhaea_helpers.hpp" line="126" column="8" bodyfile="Utils/include/gambit/Utils/slhaea_helpers.hpp" bodystart="126" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ab8f36a16d614ad49a62f810ef8ce8c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::utils_error</definition>
        <argsstring>()</argsstring>
        <name>utils_error</name>
        <qualifiedname>Gambit::utils_error</qualifiedname>
        <briefdescription>
<para>Utility errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="27" column="9" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="27" bodyend="31" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="28" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a3cf18331d1bc341247938faa5b8e5afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::utils_warning</definition>
        <argsstring>()</argsstring>
        <name>utils_warning</name>
        <qualifiedname>Gambit::utils_warning</qualifiedname>
        <briefdescription>
<para>Utility warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="34" column="11" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="34" bodyend="38" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="30" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a22f9590f97f034945dfabd86a0345ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::backend_error</definition>
        <argsstring>()</argsstring>
        <name>backend_error</name>
        <qualifiedname>Gambit::backend_error</qualifiedname>
        <briefdescription>
<para>Backend errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="41" column="9" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="41" bodyend="45" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="33" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ab55562f6137959f0cd7670148cac3ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::backend_warning</definition>
        <argsstring>()</argsstring>
        <name>backend_warning</name>
        <qualifiedname>Gambit::backend_warning</qualifiedname>
        <briefdescription>
<para>Backend warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="48" column="11" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="48" bodyend="52" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="35" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1af714e87b98581575adaccd69d7d05e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::logging_error</definition>
        <argsstring>()</argsstring>
        <name>logging_error</name>
        <qualifiedname>Gambit::logging_error</qualifiedname>
        <briefdescription>
<para><ref refid="namespaceGambit_1_1Logging" kindref="compound">Logging</ref> errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="55" column="9" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="55" bodyend="59" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="38" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a7ada9bc67a23cb45fda83d07dc7465db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::logging_warning</definition>
        <argsstring>()</argsstring>
        <name>logging_warning</name>
        <qualifiedname>Gambit::logging_warning</qualifiedname>
        <briefdescription>
<para><ref refid="namespaceGambit_1_1Logging" kindref="compound">Logging</ref> warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="62" column="11" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="62" bodyend="66" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="40" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a9be3518a06d0f57d9cefa017aa706854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::model_error</definition>
        <argsstring>()</argsstring>
        <name>model_error</name>
        <qualifiedname>Gambit::model_error</qualifiedname>
        <briefdescription>
<para>Model errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="69" column="9" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="69" bodyend="73" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="43" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ada818142c4558469ff2553280e4d09f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::model_warning</definition>
        <argsstring>()</argsstring>
        <name>model_warning</name>
        <qualifiedname>Gambit::model_warning</qualifiedname>
        <briefdescription>
<para>Model warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="76" column="11" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="76" bodyend="80" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="45" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a4a90fbd9fb34f189fff41ab409eb3c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1invalid__point__exception" kindref="compound">invalid_point_exception</ref> &amp;</type>
        <definition>invalid_point_exception &amp; Gambit::invalid_point</definition>
        <argsstring>()</argsstring>
        <name>invalid_point</name>
        <qualifiedname>Gambit::invalid_point</qualifiedname>
        <briefdescription>
<para>Invalid point exceptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_error_handlers.cpp" line="83" column="27" bodyfile="Utils/src/standalone_error_handlers.cpp" bodystart="83" bodyend="87" declfile="Utils/include/gambit/Utils/standalone_error_handlers.hpp" declline="48" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a6afc90c5723abe5408be8b03d495bf4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::initialise_standalone_logs</definition>
        <argsstring>(str)</argsstring>
        <name>initialise_standalone_logs</name>
        <qualifiedname>Gambit::initialise_standalone_logs</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>prefix</defname>
        </param>
        <briefdescription>
<para>Logger setup standalone utility function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/standalone_utils.cpp" line="26" column="8" bodyfile="Utils/src/standalone_utils.cpp" bodystart="26" bodyend="42" declfile="Utils/include/gambit/Utils/standalone_utils.hpp" declline="27" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aa8e03fe74a42941a47332bcd6b1c4475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::spacing</definition>
        <argsstring>(int, int)</argsstring>
        <name>spacing</name>
        <qualifiedname>Gambit::spacing</qualifiedname>
        <param>
          <type>int</type>
          <defname>len</defname>
        </param>
        <param>
          <type>int</type>
          <defname>maxlen</defname>
        </param>
        <briefdescription>
<para>Spacing utility for stream overloads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/stream_overloads.cpp" line="29" column="15" bodyfile="Utils/src/stream_overloads.cpp" bodystart="29" bodyend="34" declfile="Utils/include/gambit/Utils/stream_overloads.hpp" declline="36" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a186ab7c6cba69e211388f66db36b6ae1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type1</type>
          </param>
          <param>
            <type>class Type2</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::pair&lt; Type1, Type2 &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::pair&lt; Type1, Type2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Stream overload for pairs of any type that already has &lt;&lt; defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/stream_overloads.hpp" line="40" column="10" bodyfile="Utils/include/gambit/Utils/stream_overloads.hpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ae39b49fa09bc8f1ad4d54d5d464e8a4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::set&lt; Type &gt; &amp;set)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::set&lt; Type &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Stream overload for sets of any type that already has &lt;&lt; defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/stream_overloads.hpp" line="48" column="10" bodyfile="Utils/include/gambit/Utils/stream_overloads.hpp" bodystart="48" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac417e1c707285700440a861cdd9f5d8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::vector&lt; Type &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::vector&lt; Type &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Stream overload for vectors of any type that already has &lt;&lt; defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/stream_overloads.hpp" line="69" column="10" bodyfile="Utils/include/gambit/Utils/stream_overloads.hpp" bodystart="69" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a6a2ca50b5af7c6a86bda91b97e256826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Gambit::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::map&lt; std::string, Type &gt; &amp;map)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, Type &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Stream overload for map from string to any type that already has &lt;&lt; defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/stream_overloads.hpp" line="90" column="3" bodyfile="Utils/include/gambit/Utils/stream_overloads.hpp" bodystart="90" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a54ab4050202c92d10ba74af78318281e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Gambit::byVal</definition>
        <argsstring>(T t)</argsstring>
        <name>byVal</name>
        <qualifiedname>Gambit::byVal</qualifiedname>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Redirection function to turn an lvalue into an rvalue, so that it is correctly passed by value when doing perfect forwarding with functor typecasting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="49" column="5" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac888bf6f175ddb20d4d6abf5fe73d4fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::sgn</definition>
        <argsstring>(T val)</argsstring>
        <name>sgn</name>
        <qualifiedname>Gambit::sgn</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="52" column="7" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a8e04348647a06e16d0d526b2348c7e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uintptr_t</type>
        <definition>uintptr_t Gambit::memaddress_to_uint</definition>
        <argsstring>(T *ptr)</argsstring>
        <name>memaddress_to_uint</name>
        <qualifiedname>Gambit::memaddress_to_uint</qualifiedname>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the memory address a pointer points to to an unsigned integer (The size of uintptr_t depends on system &amp; ensures it is big enough to store memory addresses of the underlying setup) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_functions.hpp" line="61" column="13" bodyfile="Utils/include/gambit/Utils/util_functions.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1af2cd4975ff8422e6fff85a5714fc78d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Gambit::initVector</definition>
        <argsstring>(std::vector&lt; T &gt; vector)</argsstring>
        <name>initVector</name>
        <qualifiedname>Gambit::initVector</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="52" column="21" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a3d17738f1f3857a4563f4d1eac588b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Gambit::initVector</definition>
        <argsstring>(std::vector&lt; T &gt; vector, T value, Args... args)</argsstring>
        <name>initVector</name>
        <qualifiedname>Gambit::initVector</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="58" column="21" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a49df2e66992a45fcfe01962ecd1d3cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Gambit::initVector</definition>
        <argsstring>(std::vector&lt; T &gt; vector, U value, Args... args)</argsstring>
        <name>initVector</name>
        <qualifiedname>Gambit::initVector</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>U</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="67" column="21" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a2d267880591c9985f77dea513f3e1e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Gambit::initVector</definition>
        <argsstring>(T value, Args... args)</argsstring>
        <name>initVector</name>
        <qualifiedname>Gambit::initVector</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="75" column="21" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ae7d3d58e3993d8b49ba43d4ddd4be803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::set&lt; T &gt;</type>
        <definition>std::set&lt; T &gt; Gambit::initSet</definition>
        <argsstring>(std::set&lt; T &gt; set)</argsstring>
        <name>initSet</name>
        <qualifiedname>Gambit::initSet</qualifiedname>
        <param>
          <type>std::set&lt; T &gt;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Same as above, but for sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="86" column="18" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a138597169e7bd716d54a0e8b154e97ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::set&lt; T &gt;</type>
        <definition>std::set&lt; T &gt; Gambit::initSet</definition>
        <argsstring>(std::set&lt; T &gt; set, T value, Args... args)</argsstring>
        <name>initSet</name>
        <qualifiedname>Gambit::initSet</qualifiedname>
        <param>
          <type>std::set&lt; T &gt;</type>
          <declname>set</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="92" column="18" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a97cf129831f738598409de667346a3d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::set&lt; T &gt;</type>
        <definition>std::set&lt; T &gt; Gambit::initSet</definition>
        <argsstring>(std::set&lt; T &gt; set, U value, Args... args)</argsstring>
        <name>initSet</name>
        <qualifiedname>Gambit::initSet</qualifiedname>
        <param>
          <type>std::set&lt; T &gt;</type>
          <declname>set</declname>
        </param>
        <param>
          <type>U</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="101" column="18" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a1f221af0773498687abcaafb8369ca44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::set&lt; T &gt;</type>
        <definition>std::set&lt; T &gt; Gambit::initSet</definition>
        <argsstring>(T value, Args... args)</argsstring>
        <name>initSet</name>
        <qualifiedname>Gambit::initSet</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="109" column="18" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ae1fbcf8efcce125e07050956e655217b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string Gambit::stringifyVariadic</definition>
        <argsstring>()</argsstring>
        <name>stringifyVariadic</name>
        <qualifiedname>Gambit::stringifyVariadic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="316" column="34" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1ac41eb963f2c312cc3309e6cd54c8143c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string Gambit::stringifyVariadic</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>stringifyVariadic</name>
        <qualifiedname>Gambit::stringifyVariadic</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="318" column="34" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1aeb24a1c6b7a30968067da803547ab30d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>args</declname>
            <defname>args</defname>
          </param>
        </templateparamlist>
        <type>const std::string</type>
        <definition>const std::string Gambit::stringifyVariadic</definition>
        <argsstring>(const std::string &amp;str, const args &amp;... strs)</argsstring>
        <name>stringifyVariadic</name>
        <qualifiedname>Gambit::stringifyVariadic</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const args &amp;...</type>
          <declname>strs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/variadic_functions.hpp" line="321" column="34" bodyfile="Utils/include/gambit/Utils/variadic_functions.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a3f17d4944314a836ac554e596e5ba09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
        <definition>str &amp; Gambit::gambit_version</definition>
        <argsstring>()</argsstring>
        <name>gambit_version</name>
        <qualifiedname>Gambit::gambit_version</qualifiedname>
        <briefdescription>
<para>Statically construct a string containing the full GAMBIT version information and return a reference to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/version.cpp" line="32" column="7" bodyfile="Utils/src/version.cpp" bodystart="32" bodyend="36" declfile="Utils/include/gambit/Utils/version.hpp" declline="52" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a284c4d45f0e1381e6373b85459968358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const YAML::Node</type>
        <definition>const YAML::Node Gambit::getVariadicNode</definition>
        <argsstring>(const YAML::Node &amp;node)</argsstring>
        <name>getVariadicNode</name>
        <qualifiedname>Gambit::getVariadicNode</qualifiedname>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/yaml_variadic_functions.hpp" line="43" column="33" bodyfile="Utils/include/gambit/Utils/yaml_variadic_functions.hpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a926c5aa707d38195b677eb7b4a7260e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const YAML::Node</type>
        <definition>const YAML::Node Gambit::getVariadicNode</definition>
        <argsstring>(const YAML::Node &amp;node, std::string key)</argsstring>
        <name>getVariadicNode</name>
        <qualifiedname>Gambit::getVariadicNode</qualifiedname>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/yaml_variadic_functions.hpp" line="48" column="33" bodyfile="Utils/include/gambit/Utils/yaml_variadic_functions.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1af6060cf97966747aaeae4ba8da5a3c6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>args</declname>
            <defname>args</defname>
          </param>
        </templateparamlist>
        <type>const YAML::Node</type>
        <definition>const YAML::Node Gambit::getVariadicNode</definition>
        <argsstring>(const YAML::Node &amp;node, const std::string &amp;key, const args &amp;... keys)</argsstring>
        <name>getVariadicNode</name>
        <qualifiedname>Gambit::getVariadicNode</qualifiedname>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const args &amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/yaml_variadic_functions.hpp" line="54" column="33" bodyfile="Utils/include/gambit/Utils/yaml_variadic_functions.hpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a5e96e343bcae1ca7b35cc947e873aad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref></type>
        <definition>Piped_exceptions Gambit::piped_errors</definition>
        <argsstring>(1000)</argsstring>
        <name>piped_errors</name>
        <qualifiedname>Gambit::piped_errors</qualifiedname>
        <param>
          <type>1000</type>
        </param>
        <briefdescription>
<para>Global instance of <ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref> class for errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/exceptions.cpp" line="622" column="22" declfile="Utils/src/exceptions.cpp" declline="622" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a3cc1cd9aaca0cc55f827cf053f9cad53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref></type>
        <definition>Piped_exceptions Gambit::piped_warnings</definition>
        <argsstring>(1000)</argsstring>
        <name>piped_warnings</name>
        <qualifiedname>Gambit::piped_warnings</qualifiedname>
        <param>
          <type>1000</type>
        </param>
        <briefdescription>
<para>Global instance of <ref refid="classGambit_1_1Piped__exceptions" kindref="compound">Piped_exceptions</ref> class for warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/exceptions.cpp" line="625" column="22" declfile="Utils/src/exceptions.cpp" declline="625" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a11d8fadb24862393530aa4e7384aa576" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::add_screen_spaces</definition>
        <argsstring>(std::string &amp;str, std::string::size_type size, std::string::size_type indent)</argsstring>
        <name>add_screen_spaces</name>
        <qualifiedname>Gambit::add_screen_spaces</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/screen_print_utils.cpp" line="46" column="17" bodyfile="Utils/src/screen_print_utils.cpp" bodystart="46" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a0532307dbde069a47b872c06fd255b6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::wrap_lines</definition>
        <argsstring>(std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;data_in, const std::vector&lt; int &gt; &amp;widths, const std::vector&lt; int &gt; &amp;minWidths, double pad, std::vector&lt; unsigned char &gt; *row_flags=0)</argsstring>
        <name>wrap_lines</name>
        <qualifiedname>Gambit::wrap_lines</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>data_in</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>widths</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>minWidths</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pad</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt; *</type>
          <declname>row_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/table_formatter.cpp" line="34" column="17" bodyfile="Utils/src/table_formatter.cpp" bodystart="34" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGambit_1a38b4deb6bd2ae342b3bdc4b58573e55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::get_gambit_version</definition>
        <argsstring>()</argsstring>
        <name>get_gambit_version</name>
        <qualifiedname>Gambit::get_gambit_version</qualifiedname>
        <briefdescription>
<para>Construct a string containing the full GAMBIT version information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/src/version.cpp" line="23" column="7" bodyfile="Utils/src/version.cpp" bodystart="23" bodyend="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>TODO: see if we can use this one: </para>
    </briefdescription>
    <detaileddescription>
<para>Standard libraries.</para>
<para>Just declare the classes here; should be defined in source files.</para>
<para>TODO: wrap using BOSS at some point, i.e. get this from FlexibleSUSY or SoftSUSY.</para>
<para>Map in which to keep factory functions for the priors.</para>
<para>Map in which to keep factory functions for the priors (prior_creators)</para>
<para>Simulation of &quot;Search for photonic signatures of gauge-mediated supersymmetry in 13 TeV pp collisions with the ATLAS detector&quot;.</para>
<para><simplesect kind="author"><para>Anders Kvellestad </para>
</simplesect>
<simplesect kind="date"><para>2020 June <hruler/>
</para>
</simplesect>
Based on:<itemizedlist>
<listitem><para><ulink url="https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/PAPERS/SUSY-2016-27/">https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/PAPERS/SUSY-2016-27/</ulink></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="author"><para>Martin White</para>
</simplesect>
Known issues:</para>
<para>1) Photon isolation requirement is missing 2) They use a bizarre HT definition where they don&apos;t apply overlap removal between photons and jets. This might not work for us, since jets won&apos;t be made by photons in our events.</para>
<para><simplesect kind="author"><para>Gregory Martinez (<ulink url="mailto:gregory.david.martinez@gmail.com">gregory.david.martinez@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>Feb 2014</para>
</simplesect>
<hruler/>
</para>
<para><simplesect kind="author"><para>Gregory Martinez (<ulink url="mailto:gregory.david.martinez@gmail.com">gregory.david.martinez@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 August </para>
</simplesect>
<simplesect kind="date"><para>2014 Feb</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) <linebreak/>
 </para>
</simplesect>
<simplesect kind="date"><para>2014 Dec</para>
</simplesect>
<hruler/>
</para>
<para><simplesect kind="author"><para>Gregory Martinez (<ulink url="mailto:gregory.david.martinez@gmail.com">gregory.david.martinez@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 August 2013 Feb 2014</para>
</simplesect>
<hruler/>
</para>
<para>Registry of priors Here we specify mappings from strings to prior objects. We need this so that strings in the inifile can be used to choose which prior objects and which combinations of them we want.</para>
<para><simplesect kind="author"><para>Gregory Martinez (<ulink url="mailto:gregory.david.martinez@gmail.com">gregory.david.martinez@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 July 2013/Feb 2014</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:patscott@physics.mcgill.ca">patscott@physics.mcgill.ca</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 Aug</para>
</simplesect>
<hruler/>
</para>
<para><simplesect kind="author"><para>Gregory Martinez (<ulink url="mailto:gregory.david.martinez@gmail.com">gregory.david.martinez@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 August </para>
</simplesect>
<simplesect kind="date"><para>2014 Feb</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2014 Dec</para>
</simplesect>
<hruler/>
</para>
<para><simplesect kind="author"><para>Gregory Martinez (<ulink url="mailto:gregory.david.martinez@gmail.com">gregory.david.martinez@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 August </para>
</simplesect>
<simplesect kind="date"><para>2014 Feb</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2014 Dec </para>
</simplesect>
<simplesect kind="date"><para>2017 Jun</para>
</simplesect>
<simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2016 Aug</para>
</simplesect>
<hruler/>
</para>
<para>================================================= </para>
<sect1 id="namespaceGambit_1autotoc_md12">
<title>Function definitions</title>
<para>================================================= </para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md14">
<title>Function definitions</title>
<para>================================================= </para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md16">
<title>Function definitions</title>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:ben.farmer@gmail.com">ben.farmer@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>October 2013 - Aug 2016</para>
</simplesect>
<hruler/>
</para>
<para>================================================= </para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md19">
<title>Function definitions</title>
<para>================================================= </para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md21">
<title>Function definitions</title>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:ben.farmer@gmail.com">ben.farmer@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>October 2013 - Aug 2016</para>
</simplesect>
<simplesect kind="author"><para>Will Handley (<ulink url="mailto:wh260@cam.ac.uk">wh260@cam.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>May 2018</para>
</simplesect>
<simplesect kind="author"><para>Patrick Stoecker (<ulink url="mailto:stoecker@physik.rwth-aachen.de">stoecker@physik.rwth-aachen.de</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>May 2020</para>
</simplesect>
<hruler/>
</para>
<para>================================================= </para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md23">
<title>Function definitions</title>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:ben.farmer@gmail.com">ben.farmer@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>October 2013 - Aug 2016</para>
</simplesect>
<simplesect kind="author"><para>Will Handley (<ulink url="mailto:wh260@cam.ac.uk">wh260@cam.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>May 2018</para>
</simplesect>
<simplesect kind="author"><para>Patrick Stoecker (<ulink url="mailto:stoecker@physik.rwth-aachen.de">stoecker@physik.rwth-aachen.de</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>May 2020 </para>
</simplesect>
<simplesect kind="date"><para>Jan 2021</para>
</simplesect>
<hruler/>
</para>
<para>================================================= </para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md25">
<title>Function definitions</title>
<para>GAMBIT: Global and Modular BSM Inference Tool <hruler/>
</para>
<para>MSSM input parameter definition, with A pole mass and mu as explicit input parameters instead of mHu2 and mHd2 (GUT scale version)</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md44">
<title>Authors</title>
<para>(add name and date if you modify)</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Sep</para>
</simplesect>
<hruler/>
</para>
<para>GAMBIT: Global and Modular BSM Inference Tool <hruler/>
</para>
<para>MSSM63 model declaration (version with boundary conditions at SUSY scale)</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md45">
<title>Authors</title>
<para>(add name and date if you modify)</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Sep</para>
</simplesect>
<hruler/>
</para>
<para>GAMBIT: Global and Modular BSM Inference Tool <hruler/>
</para>
<para>MSSM input parameter definition, with A pole mass and mu as explicit input parameters instead of mHu2 and mHd2 (SUSY scale version)</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md46">
<title>Authors</title>
<para>(add name and date if you modify)</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Sep</para>
</simplesect>
<hruler/>
</para>
<para>GAMBIT: Global and Modular BSM Inference Tool <hruler/>
</para>
<para>MSSM input parameter definition, with A pole mass and mu as explicit input parameters instead of mHu2 and mHd2.</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md48">
<title>Authors</title>
<para>(add name and date if you modify)</para>
<para><simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Aug</para>
</simplesect>
<hruler/>
</para>
<para>GAMBIT: Global and Modular BSM Inference Tool <hruler/>
</para>
<para>Nuclear parameters model definitions</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md49">
<title>Authors</title>
<para>(add name and date if you modify)</para>
<para><simplesect kind="author"><para>Jonathan Cornell </para>
</simplesect>
<simplesect kind="date"><para>2015 March</para>
</simplesect>
<simplesect kind="author"><para>Sebastian Wild </para>
</simplesect>
<simplesect kind="date"><para>2018 Oct</para>
</simplesect>
<simplesect kind="author"><para>Janina Renk </para>
</simplesect>
<simplesect kind="date"><para>2020 May</para>
</simplesect>
<simplesect kind="author"><para>Tomas Gonzalo (<ulink url="mailto:tomas.gonzalo@monash.edu">tomas.gonzalo@monash.edu</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2020 Sep</para>
</simplesect>
<simplesect kind="author"><para>Felix Kahlhoefer </para>
</simplesect>
<simplesect kind="date"><para>2020 Dec</para>
</simplesect>
<simplesect kind="author"><para>Ankit Beniwal </para>
</simplesect>
<simplesect kind="date"><para>2020 Dec</para>
</simplesect>
<hruler/>
</para>
<para><hruler/>
</para>
<para>Authors:</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Apr</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2016 Oct</para>
</simplesect>
<hruler/>
</para>
<para><hruler/>
</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Apr</para>
</simplesect>
<hruler/>
</para>
<para>GAMBIT: Global and Modular BSM Inference Tool <hruler/>
</para>
<para>Translation function definitions for all &apos;mA&apos; versions of 63 parameter MSSM, back to the corresponding mhu2 mhd2 parameterisations</para>
<para>Contains translation functions for: MSSM63atQ_mA --&gt; MSSM63atQ MSSM63atMGUT_mA --&gt; MSSM63atMGUT MSSM63atMSUSY_mA --&gt; MSSM63atMSUSY</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="namespaceGambit_1autotoc_md64">
<title>Authors</title>
<para>(add name and date if you modify)</para>
<para><simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Aug</para>
</simplesect>
<simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 Sep, Oct</para>
</simplesect>
<hruler/>
</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:b.farmer@imperial.ac.uk">b.farmer@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 Jan</para>
</simplesect>
<hruler/>
</para>
<para><simplesect kind="author"><para>Janina Renk <ulink url="mailto:janina.renk@fysik.su.se">janina.renk@fysik.su.se</ulink> </para>
</simplesect>
<simplesect kind="date"><para>Oct 2018</para>
</simplesect>
<hruler/>
</para>
<para><simplesect kind="author"><para>Christoph Weniger <ulink url="mailto:c.weniger@uva.nl">c.weniger@uva.nl</ulink> </para>
</simplesect>
<simplesect kind="date"><para>Dec 2014</para>
</simplesect>
<hruler/>
</para>
<para><hruler/>
</para>
<para><simplesect kind="author"><para>Christoph Weniger <ulink url="mailto:c.weniger@uva.nl">c.weniger@uva.nl</ulink> </para>
</simplesect>
<simplesect kind="date"><para>Dec 2014</para>
</simplesect>
<simplesect kind="author"><para>Ben Farmer <ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink> </para>
</simplesect>
<simplesect kind="date"><para>Jan 2016</para>
</simplesect>
<hruler/>
</para>
<para>POSIX filesystem libraries <ref refid="namespaceGambit" kindref="compound">Gambit</ref> Boost </para>
</sect1>
    </detaileddescription>
    <location file="ColliderBit/include/gambit/ColliderBit/analyses/Analysis.hpp" line="33" column="1"/>
  </compounddef>
</doxygen>
