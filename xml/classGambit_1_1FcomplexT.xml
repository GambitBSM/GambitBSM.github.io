<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1FcomplexT" kind="class" language="C++" prot="public">
    <compoundname>Gambit::FcomplexT</compoundname>
    <includes refid="util__types_8hpp" local="no">util_types.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGambit_1_1FcomplexT_1afaa78cf27352e4713a3f067c64e8ca92" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T Gambit::FcomplexT&lt; T &gt;::re</definition>
        <argsstring></argsstring>
        <name>re</name>
        <qualifiedname>Gambit::FcomplexT::re</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="550" column="9" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1FcomplexT_1acd9caa5d3d8042fd03b2ad7dd4632a44" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T Gambit::FcomplexT&lt; T &gt;::im</definition>
        <argsstring></argsstring>
        <name>im</name>
        <qualifiedname>Gambit::FcomplexT::im</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="551" column="9" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="551" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a5b32c54a8ba3cb3d050bec09c253827c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::FcomplexT&lt; T &gt;::FcomplexT</definition>
        <argsstring>()</argsstring>
        <name>FcomplexT</name>
        <qualifiedname>Gambit::FcomplexT::FcomplexT</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="553" column="7" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="553" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a095cbb861750fd484cfe2ff18355ec31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::FcomplexT&lt; T &gt;::~FcomplexT</definition>
        <argsstring>()</argsstring>
        <name>~FcomplexT</name>
        <qualifiedname>Gambit::FcomplexT::~FcomplexT</qualifiedname>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="555" column="7" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="555" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a8916c856bba60a7e635a9359038a1679" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Gambit::FcomplexT&lt; T &gt;::FcomplexT</definition>
        <argsstring>(const FcomplexT&lt; T2 &gt; &amp;in)</argsstring>
        <name>FcomplexT</name>
        <qualifiedname>Gambit::FcomplexT::FcomplexT</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; T2 &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Default copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="558" column="7" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="558" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a324df00b0db940e0f16df99e80215d8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::FcomplexT&lt; T &gt;::FcomplexT</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;in)</argsstring>
        <name>FcomplexT</name>
        <qualifiedname>Gambit::FcomplexT::FcomplexT</qualifiedname>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Constructor from a C++ complex type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="564" column="7" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="564" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a5856a533b3e41dcff2991632ea9d229f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::FcomplexT&lt; T &gt;::FcomplexT</definition>
        <argsstring>(const T &amp;in)</argsstring>
        <name>FcomplexT</name>
        <qualifiedname>Gambit::FcomplexT::FcomplexT</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Constructor from a single instance of some type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="570" column="7" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="570" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a20cdff91cf7689881e2b81bd4567d732" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref> &amp;</type>
        <definition>FcomplexT &amp; Gambit::FcomplexT&lt; T &gt;::operator=</definition>
        <argsstring>(const FcomplexT&lt; T2 &gt; &amp;in)</argsstring>
        <name>operator=</name>
        <qualifiedname>Gambit::FcomplexT::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; T2 &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Assignment from another Fortran complex type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="577" column="17" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="577" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1ac8d6b49c46806aa5cb26c3a483572340" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref> &amp;</type>
        <definition>FcomplexT &amp; Gambit::FcomplexT&lt; T &gt;::operator=</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;in)</argsstring>
        <name>operator=</name>
        <qualifiedname>Gambit::FcomplexT::operator=</qualifiedname>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Assignment from a C++ complex type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="584" column="17" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="584" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a669e8204d621aae27cdff2861ccb82dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref> &amp;</type>
        <definition>FcomplexT &amp; Gambit::FcomplexT&lt; T &gt;::operator=</definition>
        <argsstring>(const T &amp;in)</argsstring>
        <name>operator=</name>
        <qualifiedname>Gambit::FcomplexT::operator=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Assignment from a single instance of some type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="591" column="17" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="591" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1af61152cce4eb820a455c13681929d0c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Gambit::FcomplexT&lt; T &gt;::operator FcomplexT&lt; T2 &gt;</definition>
        <argsstring>()</argsstring>
        <name>operator FcomplexT&lt; T2 &gt;</name>
        <qualifiedname>Gambit::FcomplexT::operator FcomplexT&lt; T2 &gt;</qualifiedname>
        <briefdescription>
<para>Type casting to another Fortran complex type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="599" column="7" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="599" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a13c54cccae09c62d28147ca28a985bab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::FcomplexT&lt; T &gt;::operator std::complex&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>operator std::complex&lt; T &gt;</name>
        <qualifiedname>Gambit::FcomplexT::complex&lt; T &gt;</qualifiedname>
        <briefdescription>
<para>Type casting to a C++ complex type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="604" column="7" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1af604d9553acf5e73ff1ef4f20ab2c539" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T Gambit::FcomplexT&lt; T &gt;::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <qualifiedname>Gambit::FcomplexT::abs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="609" column="9" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="609" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a5e33f35c5224ac2a87e04a06955fabdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref></type>
        <definition>FcomplexT Gambit::FcomplexT&lt; T &gt;::operator*</definition>
        <argsstring>(const FcomplexT&lt; T2 &gt; &amp;in)</argsstring>
        <name>operator*</name>
        <qualifiedname>Gambit::FcomplexT::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; T2 &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="615" column="17" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="615" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1FcomplexT_1a89f26033de80d9db20f37eeaa1015390" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref></type>
        <definition>FcomplexT Gambit::FcomplexT&lt; T &gt;::operator/</definition>
        <argsstring>(const FcomplexT&lt; T2 &gt; &amp;in)</argsstring>
        <name>operator/</name>
        <qualifiedname>Gambit::FcomplexT::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1FcomplexT" kindref="compound">FcomplexT</ref>&lt; T2 &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/util_types.hpp" line="626" column="17" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="626" bodyend="642"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Fortran complex type. Use typdef versions instead of the DO NOT UNDER ANY CIRCUMSTANCE add new member variables to this class! </para>
    </detaileddescription>
    <location file="Utils/include/gambit/Utils/util_types.hpp" line="547" column="3" bodyfile="Utils/include/gambit/Utils/util_types.hpp" bodystart="548" bodyend="643"/>
    <listofallmembers>
      <member refid="classGambit_1_1FcomplexT_1af604d9553acf5e73ff1ef4f20ab2c539" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>abs</name></member>
      <member refid="classGambit_1_1FcomplexT_1a5b32c54a8ba3cb3d050bec09c253827c" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>FcomplexT</name></member>
      <member refid="classGambit_1_1FcomplexT_1a8916c856bba60a7e635a9359038a1679" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>FcomplexT</name></member>
      <member refid="classGambit_1_1FcomplexT_1a324df00b0db940e0f16df99e80215d8d" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>FcomplexT</name></member>
      <member refid="classGambit_1_1FcomplexT_1a5856a533b3e41dcff2991632ea9d229f" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>FcomplexT</name></member>
      <member refid="classGambit_1_1FcomplexT_1acd9caa5d3d8042fd03b2ad7dd4632a44" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>im</name></member>
      <member refid="classGambit_1_1FcomplexT_1af61152cce4eb820a455c13681929d0c9" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>operator FcomplexT&lt; T2 &gt;</name></member>
      <member refid="classGambit_1_1FcomplexT_1a13c54cccae09c62d28147ca28a985bab" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>operator std::complex&lt; T &gt;</name></member>
      <member refid="classGambit_1_1FcomplexT_1a5e33f35c5224ac2a87e04a06955fabdc" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>operator*</name></member>
      <member refid="classGambit_1_1FcomplexT_1a89f26033de80d9db20f37eeaa1015390" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>operator/</name></member>
      <member refid="classGambit_1_1FcomplexT_1a20cdff91cf7689881e2b81bd4567d732" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>operator=</name></member>
      <member refid="classGambit_1_1FcomplexT_1ac8d6b49c46806aa5cb26c3a483572340" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>operator=</name></member>
      <member refid="classGambit_1_1FcomplexT_1a669e8204d621aae27cdff2861ccb82dd" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>operator=</name></member>
      <member refid="classGambit_1_1FcomplexT_1afaa78cf27352e4713a3f067c64e8ca92" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>re</name></member>
      <member refid="classGambit_1_1FcomplexT_1a095cbb861750fd484cfe2ff18355ec31" prot="public" virt="non-virtual"><scope>Gambit::FcomplexT</scope><name>~FcomplexT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
