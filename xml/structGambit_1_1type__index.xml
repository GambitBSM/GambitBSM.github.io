<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="structGambit_1_1type__index" kind="struct" language="C++" prot="public">
    <compoundname>Gambit::type_index</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structGambit_1_1type__index_1a4adc9c3a5942d36e72d31b004786ba2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct type_equal_to</definition>
        <argsstring></argsstring>
        <name>type_equal_to</name>
        <qualifiedname>Gambit::type_index::type_equal_to</qualifiedname>
        <param>
          <type><ref refid="structGambit_1_1type__equal__to" kindref="compound">type_equal_to</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="29" column="31" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structGambit_1_1type__index_1a14f9b23a8a2cf0d396483ed2e6143464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct std::equal_to&lt; Gambit::type_index &gt;</definition>
        <argsstring></argsstring>
        <name>std::equal_to&lt; Gambit::type_index &gt;</name>
        <qualifiedname>Gambit::type_index::equal_to&lt; Gambit::type_index &gt;</qualifiedname>
        <param>
          <type>std::equal_to&lt; <ref refid="structGambit_1_1type__index" kindref="compound">Gambit::type_index</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="29" column="31" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structGambit_1_1type__index_1afdb40200299d5bfc05204d9e3da81ef7" prot="private" static="no" mutable="no">
        <type>const std::type_info *</type>
        <definition>const std::type_info* Gambit::type_index::_M_target</definition>
        <argsstring></argsstring>
        <name>_M_target</name>
        <qualifiedname>Gambit::type_index::_M_target</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="66" column="38" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structGambit_1_1type__index_1abe55f1e0ab1d3263c795c88eded0523d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::type_index::type_index</definition>
        <argsstring>(const std::type_info &amp;__rhs)</argsstring>
        <name>type_index</name>
        <qualifiedname>Gambit::type_index::type_index</qualifiedname>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="32" column="17" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="32" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1ae529d713f8e0e220c485dc1d266d3f96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::type_index::type_index</definition>
        <argsstring>()</argsstring>
        <name>type_index</name>
        <qualifiedname>Gambit::type_index::type_index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="35" column="17" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1ac70ff2ea129d7972930105bb2f82d393" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::type_info &amp;</type>
        <definition>const std::type_info &amp; Gambit::type_index::operator=</definition>
        <argsstring>(const std::type_info &amp;__rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>Gambit::type_index::operator=</qualifiedname>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="37" column="38" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="37" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1a7f92993a4edd974aa15bead3959a9218" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::type_index::operator==</definition>
        <argsstring>(const Gambit::type_index &amp;__rhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Gambit::type_index::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1type__index" kindref="compound">Gambit::type_index</ref> &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="40" column="22" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="40" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1ad6354b7738b758eb3a25d268c5c5b92d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::type_index::operator!=</definition>
        <argsstring>(const Gambit::type_index &amp;__rhs) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Gambit::type_index::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1type__index" kindref="compound">Gambit::type_index</ref> &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="43" column="22" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="43" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1a58ff60efde15258338ea918885bc0b61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::type_index::operator&lt;</definition>
        <argsstring>(const Gambit::type_index &amp;__rhs) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>Gambit::type_index::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1type__index" kindref="compound">Gambit::type_index</ref> &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="46" column="17" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="46" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1ae0bd4e38b91ca4878f8beb9daa5628b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::type_index::operator&lt;=</definition>
        <argsstring>(const Gambit::type_index &amp;__rhs) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Gambit::type_index::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1type__index" kindref="compound">Gambit::type_index</ref> &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="49" column="17" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="49" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1a62658519fa9d14bb7844c4f9cfd789a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::type_index::operator&gt;</definition>
        <argsstring>(const Gambit::type_index &amp;__rhs) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>Gambit::type_index::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1type__index" kindref="compound">Gambit::type_index</ref> &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="52" column="22" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1a4615573e5fbb1f5f1791b9ba57101c3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::type_index::operator&gt;=</definition>
        <argsstring>(const Gambit::type_index &amp;__rhs) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Gambit::type_index::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structGambit_1_1type__index" kindref="compound">Gambit::type_index</ref> &amp;</type>
          <declname>__rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="55" column="22" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="55" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1ade5f3cfafb0092758522743a5a97b05c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Gambit::type_index::hash_code</definition>
        <argsstring>() const</argsstring>
        <name>hash_code</name>
        <qualifiedname>Gambit::type_index::hash_code</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="58" column="24" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structGambit_1_1type__index_1afd9e2cc915628168f2d04138a3ca3682" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Gambit::type_index::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>Gambit::type_index::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/type_index.hpp" line="62" column="28" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="62" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Utils/include/gambit/Utils/type_index.hpp" line="26" column="9" bodyfile="Utils/include/gambit/Utils/type_index.hpp" bodystart="27" bodyend="67"/>
    <listofallmembers>
      <member refid="structGambit_1_1type__index_1afdb40200299d5bfc05204d9e3da81ef7" prot="private" virt="non-virtual"><scope>Gambit::type_index</scope><name>_M_target</name></member>
      <member refid="structGambit_1_1type__index_1ade5f3cfafb0092758522743a5a97b05c" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>hash_code</name></member>
      <member refid="structGambit_1_1type__index_1afd9e2cc915628168f2d04138a3ca3682" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>name</name></member>
      <member refid="structGambit_1_1type__index_1ad6354b7738b758eb3a25d268c5c5b92d" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>operator!=</name></member>
      <member refid="structGambit_1_1type__index_1a58ff60efde15258338ea918885bc0b61" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>operator&lt;</name></member>
      <member refid="structGambit_1_1type__index_1ae0bd4e38b91ca4878f8beb9daa5628b5" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>operator&lt;=</name></member>
      <member refid="structGambit_1_1type__index_1ac70ff2ea129d7972930105bb2f82d393" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>operator=</name></member>
      <member refid="structGambit_1_1type__index_1a7f92993a4edd974aa15bead3959a9218" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>operator==</name></member>
      <member refid="structGambit_1_1type__index_1a62658519fa9d14bb7844c4f9cfd789a0" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>operator&gt;</name></member>
      <member refid="structGambit_1_1type__index_1a4615573e5fbb1f5f1791b9ba57101c3b" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>operator&gt;=</name></member>
      <member refid="structGambit_1_1type__index_1a14f9b23a8a2cf0d396483ed2e6143464" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>std::equal_to&lt; Gambit::type_index &gt;</name></member>
      <member refid="structGambit_1_1type__index_1a4adc9c3a5942d36e72d31b004786ba2f" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>type_equal_to</name></member>
      <member refid="structGambit_1_1type__index_1abe55f1e0ab1d3263c795c88eded0523d" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>type_index</name></member>
      <member refid="structGambit_1_1type__index_1ae529d713f8e0e220c485dc1d266d3f96" prot="public" virt="non-virtual"><scope>Gambit::type_index</scope><name>type_index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
