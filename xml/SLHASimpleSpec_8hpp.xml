<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="SLHASimpleSpec_8hpp" kind="file" language="C++">
    <compoundname>SLHASimpleSpec.hpp</compoundname>
    <includes refid="spec_8hpp" local="yes">gambit/Elements/spec.hpp</includes>
    <includedby refid="MSSMSimpleSpec_8hpp" local="yes">MSSMSimpleSpec.hpp</includedby>
    <includedby refid="SLHASimpleSpec_8cpp" local="yes">SLHASimpleSpec.cpp</includedby>
    <includedby refid="SMSimpleSpec_8hpp" local="yes">SMSimpleSpec.hpp</includedby>
    <incdepgraph>
      <node id="58">
        <label>gambit/Elements/slhaea_spec_helpers.hpp</label>
        <link refid="slhaea__spec__helpers_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gambit/Elements/spec.hpp</label>
        <link refid="spec_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gambit/Elements/spec_fptrfinder.hpp</label>
        <link refid="spec__fptrfinder_8hpp"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gambit/Elements/spec_head.hpp</label>
        <link refid="spec__head_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>gambit/Elements/spectrum_helpers.hpp</label>
        <link refid="spectrum__helpers_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gambit/Elements/subspectrum.hpp</label>
        <link refid="subspectrum_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gambit/Logs/log_tags.hpp</label>
        <link refid="log__tags_8hpp"/>
      </node>
      <node id="1">
        <label>SLHASimpleSpec.hpp</label>
        <link refid="SLHASimpleSpec_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gambit/Models/SpectrumContents/subspectrum_contents.hpp</label>
        <link refid="subspectrum__contents_8hpp"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gambit/Models/partmap.hpp</label>
        <link refid="partmap_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>gambit/Utils/boost_fallbacks.hpp</label>
        <link refid="boost__fallbacks_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>gambit/Utils/cats.hpp</label>
        <link refid="Utils_2include_2gambit_2Utils_2cats_8hpp"/>
      </node>
      <node id="31">
        <label>gambit/Utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>gambit/Utils/export_symbols.hpp</label>
        <link refid="export__symbols_8hpp"/>
      </node>
      <node id="20">
        <label>gambit/Utils/local_info.hpp</label>
        <link refid="local__info_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gambit/Utils/safebool.hpp</label>
        <link refid="safebool_8hpp"/>
      </node>
      <node id="59">
        <label>gambit/Utils/slhaea_helpers.hpp</label>
        <link refid="slhaea__helpers_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
        <link refid="standalone__error__handlers_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>gambit/Utils/stringify.hpp</label>
        <link refid="stringify_8hpp"/>
      </node>
      <node id="36">
        <label>gambit/Utils/util_functions.hpp</label>
        <link refid="util__functions_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gambit/Utils/util_macros.hpp</label>
        <link refid="util__macros_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>gambit/Utils/util_types.hpp</label>
        <link refid="util__types_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>gambit/Utils/variadic_functions.hpp</label>
        <link refid="variadic__functions_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>SLHAea/slhaea.h</label>
      </node>
      <node id="53">
        <label>array</label>
      </node>
      <node id="56">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="55">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="22">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="17">
        <label>boost/detail/workaround.hpp</label>
      </node>
      <node id="28">
        <label>boost/preprocessor/arithmetic/sub.hpp</label>
      </node>
      <node id="18">
        <label>boost/preprocessor/cat.hpp</label>
      </node>
      <node id="27">
        <label>boost/preprocessor/comparison/equal.hpp</label>
      </node>
      <node id="16">
        <label>boost/preprocessor/config/config.hpp</label>
      </node>
      <node id="26">
        <label>boost/preprocessor/control/if.hpp</label>
      </node>
      <node id="29">
        <label>boost/preprocessor/punctuation/comma.hpp</label>
      </node>
      <node id="30">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="24">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="25">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="61">
        <label>boost/serialization/strong_typedef.hpp</label>
      </node>
      <node id="15">
        <label>boost/version.hpp</label>
      </node>
      <node id="47">
        <label>cassert</label>
      </node>
      <node id="8">
        <label>cfloat</label>
      </node>
      <node id="37">
        <label>chrono</label>
      </node>
      <node id="38">
        <label>cmath</label>
      </node>
      <node id="42">
        <label>complex</label>
      </node>
      <node id="41">
        <label>cstring</label>
      </node>
      <node id="52">
        <label>deque</label>
      </node>
      <node id="32">
        <label>exception</label>
      </node>
      <node id="51">
        <label>forward_list</label>
      </node>
      <node id="45">
        <label>fstream</label>
      </node>
      <node id="54">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="44">
        <label>iostream</label>
      </node>
      <node id="50">
        <label>list</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="57">
        <label>mkpath/mkpath.h</label>
      </node>
      <node id="40">
        <label>omp.h</label>
      </node>
      <node id="7">
        <label>set</label>
      </node>
      <node id="9">
        <label>sstream</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="46">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>unistd.h</label>
      </node>
      <node id="48">
        <label>unordered_map</label>
      </node>
      <node id="49">
        <label>unordered_set</label>
      </node>
      <node id="34">
        <label>utility</label>
      </node>
      <node id="33">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>SPheno_3_3_8.cpp</label>
        <link refid="SPheno__3__3__8_8cpp"/>
      </node>
      <node id="7">
        <label>SPheno_4_0_3.cpp</label>
        <link refid="SPheno__4__0__3_8cpp"/>
      </node>
      <node id="3">
        <label>DarkBit_standalone_MSSM.cpp</label>
        <link refid="DarkBit__standalone__MSSM_8cpp"/>
      </node>
      <node id="4">
        <label>DarkBit_standalone_ScalarSingletDM_Z2.cpp</label>
        <link refid="DarkBit__standalone__ScalarSingletDM__Z2_8cpp"/>
      </node>
      <node id="14">
        <label>DarkBit_standalone_WIMP.cpp</label>
        <link refid="DarkBit__standalone__WIMP_8cpp"/>
      </node>
      <node id="13">
        <label>spectrum_factories.hpp</label>
        <link refid="spectrum__factories_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>spectrum.cpp</label>
        <link refid="spectrum_8cpp"/>
      </node>
      <node id="2">
        <label>MSSMSimpleSpec.hpp</label>
        <link refid="MSSMSimpleSpec_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>SLHASimpleSpec.hpp</label>
        <link refid="SLHASimpleSpec_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SMSimpleSpec.hpp</label>
        <link refid="SMSimpleSpec_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>MSSMSimpleSpec.cpp</label>
        <link refid="MSSMSimpleSpec_8cpp"/>
      </node>
      <node id="9">
        <label>SLHASimpleSpec.cpp</label>
        <link refid="SLHASimpleSpec_8cpp"/>
      </node>
      <node id="11">
        <label>SMSimpleSpec.cpp</label>
        <link refid="SMSimpleSpec_8cpp"/>
      </node>
      <node id="8">
        <label>SpecBit_MSSM.cpp</label>
        <link refid="SpecBit__MSSM_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classGambit_1_1SLHAeaModel" prot="public">Gambit::SLHAeaModel</innerclass>
    <innerclass refid="classGambit_1_1SLHASimpleSpec" prot="public">Gambit::SLHASimpleSpec</innerclass>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Helper base class for simple subspectrum wrappers that want to use SLHAea features</para>
<para><hruler/>
</para>
<para>Authors:</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Apr</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2016 Oct</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>Helper<sp/>base<sp/>class<sp/>for<sp/>simple<sp/>subspectrum</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///<sp/><sp/>wrappers<sp/>that<sp/>want<sp/>to<sp/>use<sp/>SLHAea<sp/>features</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///<sp/><sp/>Authors:</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///<sp/><sp/>&lt;!--<sp/>add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify<sp/>--&gt;</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/>\author<sp/>Ben<sp/>Farmer</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(benjamin.farmer@fysik.su.se)</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/><sp/>\date<sp/>2015<sp/>Apr</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/><sp/>\author<sp/>Pat<sp/>Scott</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p.scott@imperial.ac.uk)</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///<sp/><sp/>\date<sp/>2016<sp/>Oct</highlight></codeline>
<codeline lineno="20"><highlight class="comment">///</highlight></codeline>
<codeline lineno="21"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SLHASimpleSpec_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SLHASimpleSpec_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spec_8hpp" kindref="compound">gambit/Elements/spec.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Skeleton<sp/>&quot;model&quot;<sp/>class<sp/>which<sp/>interacts<sp/>with<sp/>an<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="32" refid="classGambit_1_1SLHAeaModel" refkind="compound"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1SLHAeaModel" kindref="compound">SLHAeaModel</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="36" refid="classGambit_1_1SLHAeaModel_1ad92225e677bbb1355da004cab4647175" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea::Coll<sp/><ref refid="classGambit_1_1SLHAeaModel_1ad92225e677bbb1355da004cab4647175" kindref="member">data</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>SLHA<sp/>version<sp/>of<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="38" refid="classGambit_1_1SLHAeaModel_1a45046321377d3c209ecaddbef0d8a747" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHAeaModel_1a45046321377d3c209ecaddbef0d8a747" kindref="member">wrapped_slha_version</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>PDG<sp/>translation<sp/>map<sp/>(e.g.<sp/>from<sp/>SLHA1<sp/>to<sp/>SLHA2<sp/>for<sp/>MSSMskeleton)</highlight></codeline>
<codeline lineno="40" refid="classGambit_1_1SLHAeaModel_1adb4978147f85098395997ab2ffd9885e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>int&gt;<sp/><ref refid="classGambit_1_1SLHAeaModel_1adb4978147f85098395997ab2ffd9885e" kindref="member">PDG_translation_map</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Constructors</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1SLHAeaModel_1ab9e5626476dd8ced7f1d4761e013eed0" kindref="member">SLHAeaModel</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1SLHAeaModel_1ab9e5626476dd8ced7f1d4761e013eed0" kindref="member">SLHAeaModel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SLHAea::Coll&amp;<sp/>input);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>the<sp/>SLHA<sp/>version<sp/>of<sp/>the<sp/>internal<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHAeaModel_1a44596fe182c61ecffd749827b78f74d3" kindref="member">slha_version</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>the<sp/>internal<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SLHAea::Coll&amp;<sp/><ref refid="classGambit_1_1SLHAeaModel_1a2895274ac7c78786488cd9975d853064" kindref="member">get_slhaea</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>PDG<sp/>code<sp/>translation<sp/>map,<sp/>for<sp/>special<sp/>cases<sp/>where<sp/>an<sp/>SLHA<sp/>file<sp/>has<sp/>been<sp/>read<sp/>in<sp/>and<sp/>the<sp/>PDG<sp/>codes<sp/>changed.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>int&gt;&amp;<sp/><ref refid="classGambit_1_1SLHAeaModel_1a82da4bab3116d664d0ec4670d6653cd7" kindref="member">PDG_translator</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Helper<sp/>functions<sp/>to<sp/>do<sp/>error<sp/>checking<sp/>for<sp/>SLHAea<sp/>object<sp/>contents</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHAeaModel_1a3718c7cd45bcf7719bd30b730271084b" kindref="member">getdata</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHAeaModel_1a3718c7cd45bcf7719bd30b730271084b" kindref="member">getdata</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkdata(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="64" refid="classGambit_1_1SLHASimpleSpec" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1SLHASimpleSpec" kindref="compound">SLHASimpleSpec</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec" kindref="compound">Spec</ref>&lt;Derived&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>typedefs<sp/>from<sp/>derived<sp/>wrapper<sp/>traits<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(only<sp/>needed<sp/>because<sp/>this<sp/>is<sp/>a<sp/>template<sp/>class,<sp/>and<sp/>would<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>qualify<sp/>the<sp/>name<sp/>all<sp/>over<sp/>the<sp/>place<sp/>in<sp/>order<sp/>to<sp/>use<sp/>the<sp/>equivalent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>which<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits&lt;Derived&gt;::Model</ref><sp/>Model;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits&lt;Derived&gt;::Input</ref><sp/>Input;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>SLHAea<sp/>object<sp/>internally<sp/>(via<sp/>wrapper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Model<sp/>slhawrap;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dummy<sp/>placeholder<sp/>for<sp/>potential<sp/>Inputs<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>dummyinput;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes&lt;Derived,MapTag::Get&gt;</ref><sp/><ref refid="structGambit_1_1MapTypes" kindref="compound">MTget</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructors/destructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1SLHASimpleSpec" kindref="compound">SLHASimpleSpec</ref>()</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>slhawrap()</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1SLHASimpleSpec" kindref="compound">SLHASimpleSpec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SLHAea::Coll&amp;<sp/>input_slha)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>slhawrap(input_slha)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHASimpleSpec" kindref="compound">~SLHASimpleSpec</ref>()<sp/>{};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions<sp/>to<sp/>interface<sp/>Model<sp/>and<sp/>Input<sp/>objects<sp/>with<sp/>the<sp/>base<sp/>&apos;Spec&apos;<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>both<sp/>const<sp/>and<sp/>non-const<sp/>versions<sp/>of<sp/>it,<sp/>so<sp/>that<sp/>wrapped<sp/>objects<sp/>cannot<sp/>be<sp/>modified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>wrapper<sp/>is<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Model&amp;<sp/>get_Model()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slhawrap;<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input&amp;<sp/>get_Input()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummyinput;<sp/></highlight><highlight class="comment">/*unused,<sp/>but<sp/>needs<sp/>to<sp/>be<sp/>defined<sp/>for<sp/>the<sp/>interface*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Model&amp;<sp/>get_Model()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slhawrap;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Input&amp;<sp/>get_Input()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummyinput;<sp/></highlight><highlight class="comment">/*unused,<sp/>but<sp/>needs<sp/>to<sp/>be<sp/>defined<sp/>for<sp/>the<sp/>interface*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Add<sp/>spectrum<sp/>information<sp/>to<sp/>an<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="104" refid="classGambit_1_1SLHASimpleSpec_1a15fe903b184181a76efac1f1d55a2104" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHASimpleSpec_1a15fe903b184181a76efac1f1d55a2104" kindref="member">add_to_SLHAea</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>SLHAea::Coll&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>(using<sp/>bass<sp/>class<sp/>version<sp/>of<sp/>getSLHAea)</highlight></codeline>
<codeline lineno="107"><highlight class="comment"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>RunningPars<sp/>interface<sp/>overrides</highlight></codeline>
<codeline lineno="109" refid="classGambit_1_1SLHASimpleSpec_1a508a7dd259a814114719094075205aae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHASimpleSpec_1a508a7dd259a814114719094075205aae" kindref="member">GetScale</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="110"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>TODO:<sp/>Currently<sp/>assumes<sp/>all<sp/>blocks<sp/>at<sp/>same<sp/>scale.<sp/>Should<sp/>at<sp/>least<sp/>check<sp/>if<sp/>this</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>is<sp/>true<sp/>in<sp/>constructor.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SLHAea::Coll&amp;<sp/>data(slhawrap.get_slhaea());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>SLHAea::to&lt;double&gt;(data.at(</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">).find_block_def()-&gt;at(3));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range&amp;<sp/>e)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>errmsg;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errmsg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>block<sp/>\&quot;GAUGE\&quot;<sp/>in<sp/>SLHAea<sp/>object.<sp/>Received<sp/>out_of_range<sp/>error<sp/>with<sp/>message:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1ab8f36a16d614ad49a62f810ef8ce8c84" kindref="member">utils_error</ref>().<ref refid="classGambit_1_1exception_1ab12c6189c744fdc119c6377d288ae961" kindref="member">raise</ref>(LOCAL_INFO,errmsg.str());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classGambit_1_1SLHASimpleSpec_1aa76069404bc7b1277019f7a879d7ff42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHASimpleSpec_1aa76069404bc7b1277019f7a879d7ff42" kindref="member">SetScale</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>actually<sp/>a<sp/>bit<sp/>of<sp/>a<sp/>drag<sp/>since<sp/>one<sp/>should<sp/>go<sp/>through<sp/>all<sp/>the<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>have<sp/>Q<sp/>defined<sp/>and<sp/>set<sp/>them<sp/>accordingly.<sp/>Leave<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1ab8f36a16d614ad49a62f810ef8ce8c84" kindref="member">utils_error</ref>().<ref refid="classGambit_1_1exception_1ab12c6189c744fdc119c6377d288ae961" kindref="member">raise</ref>(LOCAL_INFO,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Call<sp/>made<sp/>to<sp/>SetScale<sp/>function<sp/>of<sp/>SLHASimpleSpec!<sp/>This<sp/>is<sp/>currently<sp/>not<sp/>implemented!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classGambit_1_1SLHASimpleSpec_1a2f4b1f8700e79592c3823f7f31d4ebeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHASimpleSpec_1a2f4b1f8700e79592c3823f7f31d4ebeb" kindref="member">RunToScaleOverride</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1ab8f36a16d614ad49a62f810ef8ce8c84" kindref="member">utils_error</ref>().<ref refid="classGambit_1_1exception_1ab12c6189c744fdc119c6377d288ae961" kindref="member">raise</ref>(LOCAL_INFO,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Call<sp/>made<sp/>to<sp/>RunToScale<sp/>function<sp/>of<sp/>SLHASimpleSpec!<sp/><sp/>This<sp/>is<sp/>not<sp/>allowed;<sp/>this\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;version<sp/>of<sp/>the<sp/>SubSpectrum<sp/>wrapper<sp/>cannot<sp/>perform<sp/>RGE<sp/><sp/><sp/>It<sp/>is<sp/>just<sp/>a\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>box<sp/>containing<sp/>SLHA<sp/>information<sp/>read<sp/>from<sp/>a<sp/>file<sp/>or<sp/>SLHAea<sp/>object.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="144"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Map<sp/>fillers<sp/>go<sp/>in<sp/>derived<sp/>class</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Member<sp/>functions<sp/>for<sp/>SLHASimpleSpec<sp/>class</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Add<sp/>spectrum<sp/>information<sp/>to<sp/>an<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="153"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE!<sp/>This<sp/>is<sp/>just<sp/>a<sp/>kind<sp/>of<sp/>catch-all<sp/>default!<sp/>Wrappers<sp/>for<sp/>particular<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>more<sp/>carefully<sp/>extract<sp/>the<sp/>model<sp/>information<sp/>and<sp/>perform<sp/>SLHA2-&gt;SLHA1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversions<sp/>if<sp/>required.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="157" refid="classGambit_1_1SLHASimpleSpec_1a15fe903b184181a76efac1f1d55a2104" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SLHASimpleSpec_1a15fe903b184181a76efac1f1d55a2104" kindref="member">SLHASimpleSpec&lt;Derived&gt;::add_to_SLHAea</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*slha_version*/</highlight><highlight class="normal">,<sp/>SLHAea::Coll&amp;<sp/>slha)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="158"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>internal<sp/>SLHAea<sp/>data<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SLHAea::Coll&amp;<sp/>data<sp/>=<sp/>get_Model().get_slhaea();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NO<sp/>version<sp/>check.<sp/>Cannot<sp/>assume<sp/>that<sp/>this<sp/>is<sp/>required<sp/>or<sp/>makes<sp/>sense<sp/>for<sp/>whatever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>model<sp/>this<sp/>might<sp/>be.<sp/>If<sp/>it<sp/>does<sp/>matter,<sp/>then<sp/>the<sp/>wrapper<sp/>for<sp/>that<sp/>model<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>this<sp/>function<sp/>and<sp/>do<sp/>the<sp/>check<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>wrapped_slha_version<sp/>=<sp/>get_Model().slha_version();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(slha_version<sp/>!=<sp/>wrapped_slha_version)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::stringstream<sp/>x;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>x<sp/>&lt;&lt;<sp/>&quot;Wrapped<sp/>SLHA<sp/>file<sp/>is<sp/>in<sp/>SLHA&quot;<sp/>&lt;&lt;<sp/>wrapped_slha_version<sp/>&lt;&lt;<sp/>&quot;,<sp/>but<sp/>something<sp/>requested<sp/>to<sp/>add<sp/>it<sp/>to<sp/>an<sp/>SLHAea<sp/>object<sp/>in<sp/>SLHA&quot;<sp/>&lt;&lt;<sp/>slha_version<sp/>&lt;&lt;<sp/>&quot;<sp/>format.&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>model_error().raise(LOCAL_INFO,<sp/>x.str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>internal<sp/>SLHAea<sp/>object,<sp/>remove<sp/>any<sp/>SM<sp/>info<sp/>from<sp/>it<sp/>and<sp/>add<sp/>the<sp/>rest<sp/>to<sp/>the<sp/>slhaea<sp/>object.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(we<sp/>will<sp/>assume<sp/>that<sp/>if<sp/>SM<sp/>is<sp/>wanted<sp/>then<sp/>it<sp/>is<sp/>provided<sp/>by<sp/>the<sp/>SMSimpleSpec<sp/>wrapper,<sp/>or<sp/>similar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea::Coll<sp/>data_copy<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea::Coll::key_matches<sp/>target_blocks[4]<sp/>=<sp/>{<sp/>SLHAea::Coll::key_matches(</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">),<sp/>SLHAea::Coll::key_matches(</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">),<sp/>SLHAea::Coll::key_matches(</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">),<sp/>SLHAea::Coll::key_matches(</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">)<sp/>};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SLHAea::Coll::iterator<sp/>sblock<sp/>=<sp/>slha.begin();<sp/>sblock<sp/>!=<sp/>slha.end();<sp/>++sblock)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SLHAea::Coll::iterator<sp/>dblock<sp/>=<sp/>data_copy.begin();<sp/>dblock<sp/>!=<sp/>data_copy.end();)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delete_dblock<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_blocks[i](*sblock)<sp/>and<sp/>target_blocks[i](*dblock))<sp/>delete_dblock<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delete_dblock)<sp/>dblock<sp/>=<sp/>data_copy.erase(dblock);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>++dblock;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SLHAea::Coll::iterator<sp/>sblock<sp/>=<sp/>slha.begin();<sp/>sblock<sp/>!=<sp/>slha.end();)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_blocks[3](*sblock))</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][24].is_data_line())<sp/>data_copy[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][24]<sp/>=<sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][24];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sblock<sp/>=<sp/>slha.erase(sblock);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++sblock;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha.insert(slha.end(),<sp/>data_copy.cbegin(),<sp/>data_copy.cend());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>Gambit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="Models/include/gambit/Models/SimpleSpectra/SLHASimpleSpec.hpp"/>
  </compounddef>
</doxygen>
