<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="AnalysisLogLikes_8hpp" kind="file" language="C++">
    <compoundname>AnalysisLogLikes.hpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includedby refid="ColliderBit__types_8hpp" local="yes">ColliderBit_types.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>AnalysisLogLikes.hpp</label>
        <link refid="AnalysisLogLikes_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>ColliderBit_eventloop.hpp</label>
        <link refid="ColliderBit__eventloop_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ColliderBit_rollcall.hpp</label>
        <link refid="ColliderBit__rollcall_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ColliderBit_types.hpp</label>
        <link refid="ColliderBit__types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>AnalysisLogLikes.hpp</label>
        <link refid="AnalysisLogLikes_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>complete_process_PID_pair_multimaps.hpp</label>
        <link refid="complete__process__PID__pair__multimaps_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>generateEventPy8Collider.hpp</label>
        <link refid="generateEventPy8Collider_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>getPy8Collider.hpp</label>
        <link refid="getPy8Collider_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ColliderBit_Bfactories.cpp</label>
        <link refid="ColliderBit__Bfactories_8cpp"/>
      </node>
      <node id="5">
        <label>ColliderBit_Higgs.cpp</label>
        <link refid="ColliderBit__Higgs_8cpp"/>
      </node>
      <node id="6">
        <label>ColliderBit_InterpolatedYields.cpp</label>
        <link refid="ColliderBit__InterpolatedYields_8cpp"/>
      </node>
      <node id="7">
        <label>ColliderBit_LEP.cpp</label>
        <link refid="ColliderBit__LEP_8cpp"/>
      </node>
      <node id="8">
        <label>ColliderBit_dummy.cpp</label>
        <link refid="ColliderBit__dummy_8cpp"/>
      </node>
      <node id="10">
        <label>ColliderBit_eventloop.cpp</label>
        <link refid="ColliderBit__eventloop_8cpp"/>
      </node>
      <node id="11">
        <label>ColliderBit_measurements.cpp</label>
        <link refid="ColliderBit__measurements_8cpp"/>
      </node>
      <node id="27">
        <label>LHC_likelihoods.cpp</label>
        <link refid="LHC__likelihoods_8cpp"/>
      </node>
      <node id="12">
        <label>Utils.cpp</label>
        <link refid="Utils_8cpp"/>
      </node>
      <node id="13">
        <label>collider_event_weights.cpp</label>
        <link refid="collider__event__weights_8cpp"/>
      </node>
      <node id="30">
        <label>complete_process_PID_pair_multimaps.cpp</label>
        <link refid="complete__process__PID__pair__multimaps_8cpp"/>
      </node>
      <node id="17">
        <label>getActiveProcessCodes.cpp</label>
        <link refid="getActiveProcessCodes_8cpp"/>
      </node>
      <node id="18">
        <label>getAnalysisContainer.cpp</label>
        <link refid="getAnalysisContainer_8cpp"/>
      </node>
      <node id="19">
        <label>getBuckFast.cpp</label>
        <link refid="getBuckFast_8cpp"/>
      </node>
      <node id="20">
        <label>getHepMCEvent.cpp</label>
        <link refid="getHepMCEvent_8cpp"/>
      </node>
      <node id="21">
        <label>getLHEvent.cpp</label>
        <link refid="getLHEvent_8cpp"/>
      </node>
      <node id="23">
        <label>getxsec.cpp</label>
        <link refid="getxsec_8cpp"/>
      </node>
      <node id="28">
        <label>lep_mssm_xsecs.cpp</label>
        <link refid="lep__mssm__xsecs_8cpp"/>
      </node>
      <node id="15">
        <label>SUSY.cpp</label>
        <link refid="SUSY_8cpp"/>
      </node>
      <node id="16">
        <label>SUSY_extras.cpp</label>
        <link refid="SUSY__extras_8cpp"/>
      </node>
      <node id="24">
        <label>process_code_PID_pair_mapping.cpp</label>
        <link refid="process__code__PID__pair__mapping_8cpp"/>
      </node>
      <node id="25">
        <label>runAnalyses.cpp</label>
        <link refid="runAnalyses_8cpp"/>
      </node>
      <node id="26">
        <label>smearEvent.cpp</label>
        <link refid="smearEvent_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" prot="public">Gambit::ColliderBit::AnalysisLogLikes</innerclass>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1ColliderBit">Gambit::ColliderBit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>AnalysisLogLikes struct.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Anders Kvellestad (<ulink url="mailto:anders.kvellestad@fys.uio.no">anders.kvellestad@fys.uio.no</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2021 Jun</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>AnalysisLogLikes<sp/>struct.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///<sp/><sp/>Authors<sp/>(add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify):</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///<sp/><sp/>\author<sp/>Anders<sp/>Kvellestad</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(anders.kvellestad@fys.uio.no)</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/>\date<sp/>2021<sp/>Jun</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>ANALYSISLOGLIKES_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ANALYSISLOGLIKES_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ColliderBit</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>@brief<sp/>Container<sp/>for<sp/>loglike<sp/>information<sp/>for<sp/>an<sp/>analysis</highlight></codeline>
<codeline lineno="36" refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" refkind="compound"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" kindref="compound">AnalysisLogLikes</ref></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>region<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>sr_labels;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;observed&quot;<sp/>log-likelihood<sp/>(per<sp/>SR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sr_loglikes;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>vectors<sp/>of<sp/>alternative<sp/>log-likelihoods<sp/>(per<sp/>SR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::vector&lt;double&gt;&gt;<sp/>alt_sr_loglikes;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>combination_sr_label;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>combination_sr_index;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>combination_loglike;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>double&gt;<sp/>alt_combination_loglikes;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structGambit_1_1ColliderBit_1_1AnalysisLogLikes" kindref="compound">AnalysisLogLikes</ref>()<sp/>:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combination_sr_label(</highlight><highlight class="stringliteral">&quot;undefined&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combination_sr_index(-2),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combination_loglike(0.0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>SRs<sp/>and<sp/>the<sp/>correponding<sp/>SR<sp/>labels<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>AnalysisData<sp/>instance.<sp/>Use<sp/>this<sp/>to<sp/>initialize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1ColliderBit_1_1AnalysisData" kindref="compound">AnalysisData</ref>&amp;<sp/>adata_in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>alt_loglike_keys<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_sr<sp/>=<sp/>adata_in.<ref refid="structGambit_1_1ColliderBit_1_1AnalysisData_1a2e008d78f65df55af79ad0749f772e29" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sr_index<sp/>=<sp/>0;<sp/>sr_index<sp/>&lt;<sp/>n_sr;<sp/>++sr_index)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sr_label<sp/>=<sp/>adata_in.<ref refid="structGambit_1_1ColliderBit_1_1AnalysisData_1a80a0482d32918b99d77214d26d71b273" kindref="member">srdata</ref>[sr_index].sr_label;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr_labels.push_back(sr_label);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr_loglikes.push_back(0.0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>map<sp/>of<sp/>alternative<sp/>SR<sp/>loglikes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>vector<sp/>of<sp/>alternative<sp/>combined<sp/>loglikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key<sp/>:<sp/>alt_loglike_keys)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alt_sr_loglikes[key]<sp/>=<sp/>std::vector&lt;double&gt;(n_sr,<sp/>0.0);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alt_combination_loglikes[key]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_no_signal_result_combination(std::string<sp/>combination_sr_label_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>combination_sr_index_in)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>variables<sp/>for<sp/>the<sp/>combined<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combination_sr_index<sp/>=<sp/>combination_sr_index_in;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combination_sr_label<sp/>=<sp/>combination_sr_label_in;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combination_loglike<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>map_element<sp/>:<sp/>alt_combination_loglikes)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_element.second<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_no_signal_result_all_SRs(std::string<sp/>combination_sr_label_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>combination_sr_index_in)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>variables<sp/>for<sp/>the<sp/>combined<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_no_signal_result_combination(combination_sr_label_in,<sp/>combination_sr_index_in);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>vectors<sp/>of<sp/>per-SR<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(sr_loglikes.begin(),<sp/>sr_loglikes.end(),<sp/>0);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>map_element<sp/>:<sp/>alt_sr_loglikes)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(map_element.second.begin(),<sp/>map_element.second.end(),<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="ColliderBit/include/gambit/ColliderBit/analyses/AnalysisLogLikes.hpp"/>
  </compounddef>
</doxygen>
