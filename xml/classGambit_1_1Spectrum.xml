<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1Spectrum" kind="class" language="C++" prot="public">
    <compoundname>Gambit::Spectrum</compoundname>
    <includes refid="spectrum_8hpp" local="no">spectrum.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" prot="public" static="no">
        <type>std::vector&lt; YAML::sdd &gt;</type>
        <definition>typedef std::vector&lt;YAML::sdd&gt; Gambit::Spectrum::mc_info</definition>
        <argsstring></argsstring>
        <name>mc_info</name>
        <qualifiedname>Gambit::Spectrum::mc_info</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Typedefs for making it easier to manipulate mass cut and mass ratio cut info. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="119" column="31" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spectrum_1a080f30d4b72c827383a41c4d2d77a0cc" prot="public" static="no">
        <type>std::vector&lt; YAML::ssdd &gt;</type>
        <definition>typedef std::vector&lt;YAML::ssdd&gt; Gambit::Spectrum::mr_info</definition>
        <argsstring></argsstring>
        <name>mr_info</name>
        <qualifiedname>Gambit::Spectrum::mr_info</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="120" column="30" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1a892e87598cb3edc64619d40713354ec0" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &gt;</type>
        <definition>std::unique_ptr&lt;SubSpectrum&gt; Gambit::Spectrum::LE_new</definition>
        <argsstring></argsstring>
        <name>LE_new</name>
        <qualifiedname>Gambit::Spectrum::LE_new</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variables </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="127" column="26" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1af277b85b7e9622af95094652f428e1f7" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &gt;</type>
        <definition>std::unique_ptr&lt;SubSpectrum&gt; Gambit::Spectrum::HE_new</definition>
        <argsstring></argsstring>
        <name>HE_new</name>
        <qualifiedname>Gambit::Spectrum::HE_new</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="128" column="26" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1a07d7b3265392357641937cc7c0ccacc9" prot="private" static="no" mutable="no">
        <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
        <definition>SubSpectrum* Gambit::Spectrum::LE</definition>
        <argsstring></argsstring>
        <name>LE</name>
        <qualifiedname>Gambit::Spectrum::LE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="129" column="22" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1a2f85551365a87f70822e0c02a9a1d858" prot="private" static="no" mutable="no">
        <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *</type>
        <definition>SubSpectrum* Gambit::Spectrum::HE</definition>
        <argsstring></argsstring>
        <name>HE</name>
        <qualifiedname>Gambit::Spectrum::HE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="130" column="22" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1ae4d59ce7d02528b7447cbc9e493424a7" prot="private" static="no" mutable="no">
        <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref></type>
        <definition>SMInputs Gambit::Spectrum::SMINPUTS</definition>
        <argsstring></argsstring>
        <name>SMINPUTS</name>
        <qualifiedname>Gambit::Spectrum::SMINPUTS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="131" column="19" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1aa5d3beac07ef3aaed9e68f7e77675cf3" prot="private" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; *</type>
        <definition>const std::map&lt;str, safe_ptr&lt;const double&gt; &gt;* Gambit::Spectrum::input_Param</definition>
        <argsstring></argsstring>
        <name>input_Param</name>
        <qualifiedname>Gambit::Spectrum::input_Param</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="132" column="25" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1a7046b669d61e5a5408294119bc33f292" prot="private" static="no" mutable="no">
        <type>const <ref refid="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" kindref="member">mc_info</ref> *</type>
        <definition>const mc_info* Gambit::Spectrum::mass_cuts</definition>
        <argsstring></argsstring>
        <name>mass_cuts</name>
        <qualifiedname>Gambit::Spectrum::mass_cuts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="133" column="24" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1ac2b73e929fe5f916fe3ff9fafd89b942" prot="private" static="no" mutable="no">
        <type>const mr_info *</type>
        <definition>const mr_info* Gambit::Spectrum::mass_ratio_cuts</definition>
        <argsstring></argsstring>
        <name>mass_ratio_cuts</name>
        <qualifiedname>Gambit::Spectrum::mass_ratio_cuts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="134" column="24" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spectrum_1a4f785d036b943e4064cb42ad09a12684" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::Spectrum::initialised</definition>
        <argsstring></argsstring>
        <name>initialised</name>
        <qualifiedname>Gambit::Spectrum::initialised</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="135" column="15" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a9054c1d821f4deff42a678d11e337118" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Spectrum::check_init</definition>
        <argsstring>() const</argsstring>
        <name>check_init</name>
        <qualifiedname>Gambit::Spectrum::check_init</qualifiedname>
        <briefdescription>
<para>Check if object has been fully initialised. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> class member function definitions.</para>
<para>Check if object has been fully initialised </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="139" column="15" bodyfile="Elements/src/spectrum.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a3dbdfab59debd33249d75bbb34005e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Spectrum::Spectrum</definition>
        <argsstring>()</argsstring>
        <name>Spectrum</name>
        <qualifiedname>Gambit::Spectrum::Spectrum</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructors/destructors.</para>
<para>Constructors/Destructors Need custom copy and move constructors plus copy-assignment operator in order to manage the unique_ptrs properly.</para>
<para>Default constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="151" column="10" bodyfile="Elements/src/spectrum.cpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1aa629dcc41050dd5333c378e90d9b5168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Spectrum::Spectrum</definition>
        <argsstring>(const SubSpectrum &amp;le, const SubSpectrum &amp;he, const SMInputs &amp;smi, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; *input_Param, const mc_info &amp;, const mr_info &amp;)</argsstring>
        <name>Spectrum</name>
        <qualifiedname>Gambit::Spectrum::Spectrum</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>le</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>he</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>smi</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; *</type>
          <declname>input_Param</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" kindref="member">mc_info</ref> &amp;</type>
          <defname>mci</defname>
        </param>
        <param>
          <type>const mr_info &amp;</type>
          <defname>mri</defname>
        </param>
        <briefdescription>
<para>Construct new object, cloning the <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> objects supplied and taking possession of them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="153" column="10" bodyfile="Elements/src/spectrum.cpp" bodystart="77" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1af0374853d909389450762cba4db05cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Spectrum::Spectrum</definition>
        <argsstring>(SubSpectrum *const le, SubSpectrum *const he, const SMInputs &amp;smi, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; *input_Param, const mc_info &amp;, const mr_info &amp;)</argsstring>
        <name>Spectrum</name>
        <qualifiedname>Gambit::Spectrum::Spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *const</type>
          <declname>le</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> *const</type>
          <declname>he</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>smi</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; *</type>
          <declname>input_Param</declname>
          <defname>pars</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" kindref="member">mc_info</ref> &amp;</type>
          <defname>mci</defname>
        </param>
        <param>
          <type>const mr_info &amp;</type>
          <defname>mri</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct new object, wrapping existing <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> objects Make sure the original objects don&apos;t get deleted before this wrapper does! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="156" column="10" bodyfile="Elements/src/spectrum.cpp" bodystart="105" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a8790926707973a0bf7f7219ebffa7dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Spectrum::Spectrum</definition>
        <argsstring>(const SubSpectrum &amp;he, const SMInputs &amp;smi, const std::map&lt; str, safe_ptr&lt; const double &gt; &gt; *input_Param, const mc_info &amp;, const mr_info &amp;)</argsstring>
        <name>Spectrum</name>
        <qualifiedname>Gambit::Spectrum::Spectrum</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>he</declname>
        </param>
        <param>
          <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
          <declname>smi</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; const double &gt; &gt; *</type>
          <declname>input_Param</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" kindref="member">mc_info</ref> &amp;</type>
          <defname>mci</defname>
        </param>
        <param>
          <type>const mr_info &amp;</type>
          <defname>mri</defname>
        </param>
        <briefdescription>
<para>Construct new object, automatically creating an <ref refid="classGambit_1_1SMSimpleSpec" kindref="compound">SMSimpleSpec</ref> as the LE subspectrum, and cloning the HE <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> object supplied and taking possession of it. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct new object, automatically creating an <ref refid="classGambit_1_1SMSimpleSpec" kindref="compound">SMSimpleSpec</ref> as the LE subspectrum, and cloning the HE <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> object supplied and taking possession of it. (won&apos;t make a version of this taking a pointer, since this is an &quot;advanced&quot; task, let people use the full contructor to do it.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="160" column="10" bodyfile="Elements/src/spectrum.cpp" bodystart="91" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1ab2047b1e1189b588bb1a6e3b40ee69ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Spectrum::Spectrum</definition>
        <argsstring>(const Spectrum &amp;other)</argsstring>
        <name>Spectrum</name>
        <qualifiedname>Gambit::Spectrum::Spectrum</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor, clones <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> objects. Make a non-const copy in order to use e.g. RunBothToScale function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="164" column="10" bodyfile="Elements/src/spectrum.cpp" bodystart="118" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a3ae4c74067ac3958d6270b38e18d3426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
        <definition>Spectrum &amp; Gambit::Spectrum::operator=</definition>
        <argsstring>(const Spectrum &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>Gambit::Spectrum::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy-assignment Using &quot;copy-and-swap&quot; idiom </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="167" column="19" bodyfile="Elements/src/spectrum.cpp" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a0be0954d54afa1be6cb2739153985f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Spectrum::Spectrum</definition>
        <argsstring>(Spectrum &amp;&amp;other)</argsstring>
        <name>Spectrum</name>
        <qualifiedname>Gambit::Spectrum::Spectrum</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="169" column="10" bodyfile="Elements/src/spectrum.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a5866a4e046cb405c509bc5fdb647f654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
        <definition>SubSpectrum &amp; Gambit::Spectrum::get_LE</definition>
        <argsstring>()</argsstring>
        <name>get_LE</name>
        <qualifiedname>Gambit::Spectrum::get_LE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> getters Return references to internal data members. Make sure original <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object doesn&apos;t get destroyed before you finish using these or you will cause a segfault.</para>
<para>Standard getters Return references to internal data members. Make sure original <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object doesn&apos;t get destroyed before you finish using these or you will cause a segfault. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="183" column="22" bodyfile="Elements/src/spectrum.cpp" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1ab8638f9d03867df5ab544a5880b8b02f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
        <definition>SubSpectrum &amp; Gambit::Spectrum::get_HE</definition>
        <argsstring>()</argsstring>
        <name>get_HE</name>
        <qualifiedname>Gambit::Spectrum::get_HE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="184" column="22" bodyfile="Elements/src/spectrum.cpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1aad8977db3e13832cac6ba14785f208b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
        <definition>SMInputs &amp; Gambit::Spectrum::get_SMInputs</definition>
        <argsstring>()</argsstring>
        <name>get_SMInputs</name>
        <qualifiedname>Gambit::Spectrum::get_SMInputs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="185" column="22" bodyfile="Elements/src/spectrum.cpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1ac26b9f0d59cbc41541c22e70a295fdd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
        <definition>const SubSpectrum &amp; Gambit::Spectrum::get_LE</definition>
        <argsstring>() const</argsstring>
        <name>get_LE</name>
        <qualifiedname>Gambit::Spectrum::get_LE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="187" column="28" bodyfile="Elements/src/spectrum.cpp" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1aab54536a26ee495fae598b96108a6da0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
        <definition>const SubSpectrum &amp; Gambit::Spectrum::get_HE</definition>
        <argsstring>() const</argsstring>
        <name>get_HE</name>
        <qualifiedname>Gambit::Spectrum::get_HE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="188" column="28" bodyfile="Elements/src/spectrum.cpp" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a2d4906e2b81b551c23d401050e5ed30d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structGambit_1_1SMInputs" kindref="compound">SMInputs</ref> &amp;</type>
        <definition>const SMInputs &amp; Gambit::Spectrum::get_SMInputs</definition>
        <argsstring>() const</argsstring>
        <name>get_SMInputs</name>
        <qualifiedname>Gambit::Spectrum::get_SMInputs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="189" column="25" bodyfile="Elements/src/spectrum.cpp" bodystart="230" bodyend="230"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a6903b65bc4ef25b19623bd43d974ac43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &gt;</type>
        <definition>std::unique_ptr&lt; SubSpectrum &gt; Gambit::Spectrum::clone_LE</definition>
        <argsstring>() const</argsstring>
        <name>clone_LE</name>
        <qualifiedname>Gambit::Spectrum::clone_LE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> getters To clone whole object, just use copy constructor.</para>
<para>Clone getters Note: If you want to clone the whole <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object, just use copy constructor, not these. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="194" column="26" bodyfile="Elements/src/spectrum.cpp" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1afdb9e8e624eaedb4013f9ef5784802ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &gt;</type>
        <definition>std::unique_ptr&lt; SubSpectrum &gt; Gambit::Spectrum::clone_HE</definition>
        <argsstring>() const</argsstring>
        <name>clone_HE</name>
        <qualifiedname>Gambit::Spectrum::clone_HE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="195" column="26" bodyfile="Elements/src/spectrum.cpp" bodystart="235" bodyend="235"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1aff88e80feb03efe8fbd5d8c7f5a09716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Spectrum::has</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pole mass getters &quot;Shortcut&quot; getters to access pole masses in hosted <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> objects. HE object given higher priority; if no match found, LE object will be checked. If still no match, error is thrown.</para>
<para>Pole mass getters/checkers &quot;Shortcut&quot; getters/checkers to access pole masses in hosted <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> objects. HE object given higher priority; if no match found, LE object will be checked. If still no match, error is thrown. TODO: These currently work for anything! Need to restrict them to only allow access to pole masses and their estimated uncertainties Also need to change error messages etc, plus the PDG overloads </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="202" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a04ee5b470b76755ca613b98e0a813c95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::get</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="203" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="249" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1afcd9852905411ad91cb647d169e1f739" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Spectrum::has</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass, const int index) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="204" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a6a8447681093835b8bd7712ce2f9a54d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::get</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass, const int index) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="205" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="275" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a804d796929499b16e0402a5d17d3d6c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Spectrum::has</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass, const int index1, const int index2) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="206" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a4f5aa72bf8ce305003a818ea5084da38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::get</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass, const int index1, const int index2) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="207" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="298" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1afb0e3f5a2b5e86b50797016960398153" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Spectrum::has</definition>
        <argsstring>(const Par::Tags partype, const int pdg_code, const int context) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>pdg_code</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>PDB getter/checker overloads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="210" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="319" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1adb38ce6e1bf7feca196737b19ababefd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::get</definition>
        <argsstring>(const Par::Tags partype, const int pdg_code, const int context) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>pdg_code</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="211" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="326" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a0761f06904f4ac72ea080da2f1b1c875" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Spectrum::has</definition>
        <argsstring>(const Par::Tags partype, const std::pair&lt; int, int &gt; pdgpr) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <declname>pdgpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="212" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="333" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a5dcb216ebb5c9b85b12d357a071b5d15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::get</definition>
        <argsstring>(const Par::Tags partype, const std::pair&lt; int, int &gt; pdgpr) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <declname>pdgpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="213" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="348" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a175c203c03b94f82cec701b2fd7c619e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Spectrum::has</definition>
        <argsstring>(const Par::Tags partype, const std::pair&lt; str, int &gt; shortpr) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spectrum::has</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, int &gt;</type>
          <declname>shortpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="214" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="363" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a36f80da08f00a4dcf272f9f62ef3e10c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::get</definition>
        <argsstring>(const Par::Tags partype, const std::pair&lt; str, int &gt; shortpr) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spectrum::get</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, int &gt;</type>
          <declname>shortpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="215" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="370" bodyend="374"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1aad78a205abff192d8a579ec768610416" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::safeget</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::Spectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Getters which first check the sanity of the thing they are returning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="219" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="380" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1aa671702e7763d098ef4b9b609bb2cfe2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::safeget</definition>
        <argsstring>(const Par::Tags partype, const std::string &amp;mass, const int index) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::Spectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="220" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="389" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a2984d2093de39fba413d9399d1afa346" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::safeget</definition>
        <argsstring>(const Par::Tags partype, const int pdg_code, const int context) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::Spectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>pdg_code</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="221" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="398" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1ae2b341831919ddba8a40a1368ffee8f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::safeget</definition>
        <argsstring>(const Par::Tags partype, const std::pair&lt; int, int &gt; pdgpr) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::Spectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::pair&lt; int, int &gt;</type>
          <declname>pdgpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="222" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="407" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1ac0dc39de54b8fc9c8ada99f6f43c30ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::safeget</definition>
        <argsstring>(const Par::Tags partype, const std::pair&lt; str, int &gt; shortpr) const</argsstring>
        <name>safeget</name>
        <qualifiedname>Gambit::Spectrum::safeget</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <declname>partype</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, int &gt;</type>
          <declname>shortpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="223" column="17" bodyfile="Elements/src/spectrum.cpp" bodystart="416" bodyend="423"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a7e2ac06aec14321c7efb6daf2a5c57af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::Wolf2V_ud</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_ud</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_ud</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_ud standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
<para>CKM Wolfenstein (lambda, A, rhobar, etabar) --&gt; V_qq standard parameterisation convertors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="246" column="24" bodyfile="Elements/src/spectrum.cpp" bodystart="481" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a668d3020c356dbf9d42a444722231d18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::Wolf2V_us</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_us</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_us</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_us standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="247" column="24" bodyfile="Elements/src/spectrum.cpp" bodystart="489" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a123e2cd17b706f89bce8a6118c5323e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::Spectrum::Wolf2V_ub</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_ub</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_ub</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_ub standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="248" column="30" bodyfile="Elements/src/spectrum.cpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a0d4ec3ad9fd674a18ecb9d0fa80e2b71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::Spectrum::Wolf2V_cd</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_cd</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_cd</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_cd standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="249" column="30" bodyfile="Elements/src/spectrum.cpp" bodystart="502" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1af856761ab3d8b8973957b575fdfc89cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::Spectrum::Wolf2V_cs</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_cs</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_cs</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_cs standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="250" column="30" bodyfile="Elements/src/spectrum.cpp" bodystart="509" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a6525b04fb4d3aa2d3d9dfc52566aa597" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::Wolf2V_cb</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_cb</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_cb</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_cb standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="251" column="24" bodyfile="Elements/src/spectrum.cpp" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a5d0dc9f5284dd7c3fb7fb072921dc887" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::Spectrum::Wolf2V_td</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_td</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_td</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_td standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="252" column="30" bodyfile="Elements/src/spectrum.cpp" bodystart="525" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a2a3110308a1c77396e75a89900a25624" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::Spectrum::Wolf2V_ts</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_ts</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_ts</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_ts standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="253" column="30" bodyfile="Elements/src/spectrum.cpp" bodystart="532" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a684440c6baf90fb0e3bdd19fb413c9fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Spectrum::Wolf2V_tb</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>Wolf2V_tb</name>
        <qualifiedname>Gambit::Spectrum::Wolf2V_tb</qualifiedname>
        <param>
          <type>double</type>
          <defname>l</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>CKM Wolfenstein --&gt; V_tb standard parameterisation convertor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="254" column="24" bodyfile="Elements/src/spectrum.cpp" bodystart="539" bodyend="544"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGambit_1_1Spectrum_1af219d597666288914017b861c3572223" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(Spectrum &amp;first, Spectrum &amp;second)</argsstring>
        <name>swap</name>
        <qualifiedname>Gambit::Spectrum::swap</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Friend function: swap resources of two <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
<para>Swap resources of two <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> objects Note: Not a member function! This is an external function which is a friend of the <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="113" column="19" bodyfile="Elements/src/spectrum.cpp" bodystart="57" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1abff25accc407109f30a7fce9e3446fee" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; Gambit::Spectrum::rhoplusieta</definition>
        <argsstring>(double, double, double, double)</argsstring>
        <name>rhoplusieta</name>
        <qualifiedname>Gambit::Spectrum::rhoplusieta</qualifiedname>
        <param>
          <type>double</type>
          <defname>lambda</defname>
        </param>
        <param>
          <type>double</type>
          <defname>A</defname>
        </param>
        <param>
          <type>double</type>
          <defname>rhobar</defname>
        </param>
        <param>
          <type>double</type>
          <defname>etabar</defname>
        </param>
        <briefdescription>
<para>Calculate Wolfenstein rho+i*eta from rhobar and etabar. </para>
        </briefdescription>
        <detaileddescription>
<para>Helper function to calculate Wolfenstein rho+i*eta from rhobar and etabar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="142" column="30" bodyfile="Elements/src/spectrum.cpp" bodystart="473" bodyend="478"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a4c252ce17e0e78f491a16453bc42f625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Spectrum::RunBothToScale</definition>
        <argsstring>(double scale)</argsstring>
        <name>RunBothToScale</name>
        <qualifiedname>Gambit::Spectrum::RunBothToScale</qualifiedname>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linked running Only possible with non-const object</para>
<para>Overloads for PDG types These just convert the types and then call the properly defined functions Linked running Only possible with non-const object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="175" column="15" bodyfile="Elements/src/spectrum.cpp" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a49551e0844333a87497ce8d383763d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Spectrum::check_mass_cuts</definition>
        <argsstring>()</argsstring>
        <name>check_mass_cuts</name>
        <qualifiedname>Gambit::Spectrum::check_mass_cuts</qualifiedname>
        <briefdescription>
<para>Check the that the spectrum satisifies any mass cuts requested from the yaml file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="178" column="15" bodyfile="Elements/src/spectrum.cpp" bodystart="168" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1af316e339aa956ebf2f200d395cbf6cd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref></type>
        <definition>SLHAstruct Gambit::Spectrum::getSLHAea</definition>
        <argsstring>(int) const</argsstring>
        <name>getSLHAea</name>
        <qualifiedname>Gambit::Spectrum::getSLHAea</qualifiedname>
        <param>
          <type>int</type>
          <defname>slha_version</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SLHAea object getter First constructs an SLHAea object from the SMINPUTS object, then adds the info from the LE subspectrum (if possible), followed by the HE subspectrum (if possible). Any duplicate entries are overwritten at each step, so HE takes precendence over LE, and LE takes precedence over SMINPUTS. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="233" column="21" bodyfile="Elements/src/spectrum.cpp" bodystart="432" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a991793775a4ac069059c5423214138ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Spectrum::writeSLHAfile</definition>
        <argsstring>(int, const str &amp;) const</argsstring>
        <name>writeSLHAfile</name>
        <qualifiedname>Gambit::Spectrum::writeSLHAfile</qualifiedname>
        <param>
          <type>int</type>
          <defname>slha_version</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
<para>Output spectrum contents as an SLHA file, using getSLHAea. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="236" column="15" bodyfile="Elements/src/spectrum.cpp" bodystart="441" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1ac6dcb73fcfc2bf920e08ed9f50517496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Spectrum::drop_SLHAs_if_requested</definition>
        <argsstring>(const safe_ptr&lt; Options &gt; &amp;, const str &amp;)</argsstring>
        <name>drop_SLHAs_if_requested</name>
        <qualifiedname>Gambit::Spectrum::drop_SLHAs_if_requested</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; <ref refid="classGambit_1_1Options" kindref="compound">Options</ref> &gt; &amp;</type>
          <defname>runOptions</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>default_name</defname>
        </param>
        <briefdescription>
<para>Helper function to drop SLHA files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="239" column="15" bodyfile="Elements/src/spectrum.cpp" bodystart="452" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spectrum_1a4a0a1ef37af824a26cbb21f4473152e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::map&lt; int, int &gt; &amp;</type>
        <definition>const std::map&lt; int, int &gt; &amp; Gambit::Spectrum::PDG_translator</definition>
        <argsstring>() const</argsstring>
        <name>PDG_translator</name>
        <qualifiedname>Gambit::Spectrum::PDG_translator</qualifiedname>
        <briefdescription>
<para>PDG code translation map, for special cases where an SLHA file has been read in and the PDG codes changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spectrum.hpp" line="242" column="25" bodyfile="Elements/src/spectrum.cpp" bodystart="465" bodyend="468"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>&quot;Standard Model&quot; (low-energy) plus high-energy model container class </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Elements/include/gambit/Elements/spectrum.hpp" line="110" column="4" bodyfile="Elements/include/gambit/Elements/spectrum.hpp" bodystart="111" bodyend="256"/>
    <listofallmembers>
      <member refid="classGambit_1_1Spectrum_1a9054c1d821f4deff42a678d11e337118" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>check_init</name></member>
      <member refid="classGambit_1_1Spectrum_1a49551e0844333a87497ce8d383763d8a" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>check_mass_cuts</name></member>
      <member refid="classGambit_1_1Spectrum_1afdb9e8e624eaedb4013f9ef5784802ab" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>clone_HE</name></member>
      <member refid="classGambit_1_1Spectrum_1a6903b65bc4ef25b19623bd43d974ac43" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>clone_LE</name></member>
      <member refid="classGambit_1_1Spectrum_1ac6dcb73fcfc2bf920e08ed9f50517496" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>drop_SLHAs_if_requested</name></member>
      <member refid="classGambit_1_1Spectrum_1a04ee5b470b76755ca613b98e0a813c95" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1Spectrum_1a6a8447681093835b8bd7712ce2f9a54d" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1Spectrum_1a4f5aa72bf8ce305003a818ea5084da38" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1Spectrum_1adb38ce6e1bf7feca196737b19ababefd" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1Spectrum_1a5dcb216ebb5c9b85b12d357a071b5d15" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1Spectrum_1a36f80da08f00a4dcf272f9f62ef3e10c" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get</name></member>
      <member refid="classGambit_1_1Spectrum_1ab8638f9d03867df5ab544a5880b8b02f" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get_HE</name></member>
      <member refid="classGambit_1_1Spectrum_1aab54536a26ee495fae598b96108a6da0" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get_HE</name></member>
      <member refid="classGambit_1_1Spectrum_1a5866a4e046cb405c509bc5fdb647f654" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get_LE</name></member>
      <member refid="classGambit_1_1Spectrum_1ac26b9f0d59cbc41541c22e70a295fdd6" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get_LE</name></member>
      <member refid="classGambit_1_1Spectrum_1aad8977db3e13832cac6ba14785f208b1" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get_SMInputs</name></member>
      <member refid="classGambit_1_1Spectrum_1a2d4906e2b81b551c23d401050e5ed30d" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>get_SMInputs</name></member>
      <member refid="classGambit_1_1Spectrum_1af316e339aa956ebf2f200d395cbf6cd7" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>getSLHAea</name></member>
      <member refid="classGambit_1_1Spectrum_1aff88e80feb03efe8fbd5d8c7f5a09716" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1Spectrum_1afcd9852905411ad91cb647d169e1f739" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1Spectrum_1a804d796929499b16e0402a5d17d3d6c0" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1Spectrum_1afb0e3f5a2b5e86b50797016960398153" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1Spectrum_1a0761f06904f4ac72ea080da2f1b1c875" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1Spectrum_1a175c203c03b94f82cec701b2fd7c619e" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>has</name></member>
      <member refid="classGambit_1_1Spectrum_1a2f85551365a87f70822e0c02a9a1d858" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>HE</name></member>
      <member refid="classGambit_1_1Spectrum_1af277b85b7e9622af95094652f428e1f7" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>HE_new</name></member>
      <member refid="classGambit_1_1Spectrum_1a4f785d036b943e4064cb42ad09a12684" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>initialised</name></member>
      <member refid="classGambit_1_1Spectrum_1aa5d3beac07ef3aaed9e68f7e77675cf3" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>input_Param</name></member>
      <member refid="classGambit_1_1Spectrum_1a07d7b3265392357641937cc7c0ccacc9" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>LE</name></member>
      <member refid="classGambit_1_1Spectrum_1a892e87598cb3edc64619d40713354ec0" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>LE_new</name></member>
      <member refid="classGambit_1_1Spectrum_1a7046b669d61e5a5408294119bc33f292" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>mass_cuts</name></member>
      <member refid="classGambit_1_1Spectrum_1ac2b73e929fe5f916fe3ff9fafd89b942" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>mass_ratio_cuts</name></member>
      <member refid="classGambit_1_1Spectrum_1ac2c38b124941a26ba37eed9447c51e71" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>mc_info</name></member>
      <member refid="classGambit_1_1Spectrum_1a080f30d4b72c827383a41c4d2d77a0cc" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>mr_info</name></member>
      <member refid="classGambit_1_1Spectrum_1a3ae4c74067ac3958d6270b38e18d3426" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>operator=</name></member>
      <member refid="classGambit_1_1Spectrum_1a4a0a1ef37af824a26cbb21f4473152e2" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>PDG_translator</name></member>
      <member refid="classGambit_1_1Spectrum_1abff25accc407109f30a7fce9e3446fee" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>rhoplusieta</name></member>
      <member refid="classGambit_1_1Spectrum_1a4c252ce17e0e78f491a16453bc42f625" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>RunBothToScale</name></member>
      <member refid="classGambit_1_1Spectrum_1aad78a205abff192d8a579ec768610416" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1Spectrum_1aa671702e7763d098ef4b9b609bb2cfe2" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1Spectrum_1a2984d2093de39fba413d9399d1afa346" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1Spectrum_1ae2b341831919ddba8a40a1368ffee8f9" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1Spectrum_1ac0dc39de54b8fc9c8ada99f6f43c30ad" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>safeget</name></member>
      <member refid="classGambit_1_1Spectrum_1ae4d59ce7d02528b7447cbc9e493424a7" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>SMINPUTS</name></member>
      <member refid="classGambit_1_1Spectrum_1a3dbdfab59debd33249d75bbb34005e4f" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Spectrum</name></member>
      <member refid="classGambit_1_1Spectrum_1aa629dcc41050dd5333c378e90d9b5168" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Spectrum</name></member>
      <member refid="classGambit_1_1Spectrum_1af0374853d909389450762cba4db05cad" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Spectrum</name></member>
      <member refid="classGambit_1_1Spectrum_1a8790926707973a0bf7f7219ebffa7dcd" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Spectrum</name></member>
      <member refid="classGambit_1_1Spectrum_1ab2047b1e1189b588bb1a6e3b40ee69ea" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Spectrum</name></member>
      <member refid="classGambit_1_1Spectrum_1a0be0954d54afa1be6cb2739153985f8a" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Spectrum</name></member>
      <member refid="classGambit_1_1Spectrum_1af219d597666288914017b861c3572223" prot="private" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>swap</name></member>
      <member refid="classGambit_1_1Spectrum_1a6525b04fb4d3aa2d3d9dfc52566aa597" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_cb</name></member>
      <member refid="classGambit_1_1Spectrum_1a0d4ec3ad9fd674a18ecb9d0fa80e2b71" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_cd</name></member>
      <member refid="classGambit_1_1Spectrum_1af856761ab3d8b8973957b575fdfc89cc" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_cs</name></member>
      <member refid="classGambit_1_1Spectrum_1a684440c6baf90fb0e3bdd19fb413c9fb" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_tb</name></member>
      <member refid="classGambit_1_1Spectrum_1a5d0dc9f5284dd7c3fb7fb072921dc887" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_td</name></member>
      <member refid="classGambit_1_1Spectrum_1a2a3110308a1c77396e75a89900a25624" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_ts</name></member>
      <member refid="classGambit_1_1Spectrum_1a123e2cd17b706f89bce8a6118c5323e2" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_ub</name></member>
      <member refid="classGambit_1_1Spectrum_1a7e2ac06aec14321c7efb6daf2a5c57af" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_ud</name></member>
      <member refid="classGambit_1_1Spectrum_1a668d3020c356dbf9d42a444722231d18" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>Wolf2V_us</name></member>
      <member refid="classGambit_1_1Spectrum_1a991793775a4ac069059c5423214138ac" prot="public" virt="non-virtual"><scope>Gambit::Spectrum</scope><name>writeSLHAfile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
