<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="spec__head_8hpp" kind="file" language="C++">
    <compoundname>spec_head.hpp</compoundname>
    <includes refid="subspectrum_8hpp" local="yes">gambit/Elements/subspectrum.hpp</includes>
    <includes refid="subspectrum__contents_8hpp" local="yes">gambit/Models/SpectrumContents/subspectrum_contents.hpp</includes>
    <includedby refid="spec_8hpp" local="yes">spec.hpp</includedby>
    <incdepgraph>
      <node id="57">
        <label>gambit/Elements/slhaea_spec_helpers.hpp</label>
        <link refid="slhaea__spec__helpers_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>spec_head.hpp</label>
        <link refid="spec__head_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>gambit/Elements/spectrum_helpers.hpp</label>
        <link refid="spectrum__helpers_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gambit/Elements/subspectrum.hpp</label>
        <link refid="subspectrum_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>gambit/Logs/log_tags.hpp</label>
        <link refid="log__tags_8hpp"/>
      </node>
      <node id="62">
        <label>gambit/Models/SpectrumContents/subspectrum_contents.hpp</label>
        <link refid="subspectrum__contents_8hpp"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>gambit/Models/partmap.hpp</label>
        <link refid="partmap_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gambit/Utils/boost_fallbacks.hpp</label>
        <link refid="boost__fallbacks_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>gambit/Utils/cats.hpp</label>
        <link refid="Utils_2include_2gambit_2Utils_2cats_8hpp"/>
      </node>
      <node id="29">
        <label>gambit/Utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>gambit/Utils/export_symbols.hpp</label>
        <link refid="export__symbols_8hpp"/>
      </node>
      <node id="18">
        <label>gambit/Utils/local_info.hpp</label>
        <link refid="local__info_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>gambit/Utils/safebool.hpp</label>
        <link refid="safebool_8hpp"/>
      </node>
      <node id="58">
        <label>gambit/Utils/slhaea_helpers.hpp</label>
        <link refid="slhaea__helpers_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
        <link refid="standalone__error__handlers_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>gambit/Utils/stringify.hpp</label>
        <link refid="stringify_8hpp"/>
      </node>
      <node id="34">
        <label>gambit/Utils/util_functions.hpp</label>
        <link refid="util__functions_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>gambit/Utils/util_macros.hpp</label>
        <link refid="util__macros_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gambit/Utils/util_types.hpp</label>
        <link refid="util__types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>gambit/Utils/variadic_functions.hpp</label>
        <link refid="variadic__functions_8hpp"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>SLHAea/slhaea.h</label>
      </node>
      <node id="52">
        <label>array</label>
      </node>
      <node id="55">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="54">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="20">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="15">
        <label>boost/detail/workaround.hpp</label>
      </node>
      <node id="26">
        <label>boost/preprocessor/arithmetic/sub.hpp</label>
      </node>
      <node id="16">
        <label>boost/preprocessor/cat.hpp</label>
      </node>
      <node id="25">
        <label>boost/preprocessor/comparison/equal.hpp</label>
      </node>
      <node id="14">
        <label>boost/preprocessor/config/config.hpp</label>
      </node>
      <node id="24">
        <label>boost/preprocessor/control/if.hpp</label>
      </node>
      <node id="27">
        <label>boost/preprocessor/punctuation/comma.hpp</label>
      </node>
      <node id="28">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="22">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="23">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="60">
        <label>boost/serialization/strong_typedef.hpp</label>
      </node>
      <node id="13">
        <label>boost/version.hpp</label>
      </node>
      <node id="46">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>cfloat</label>
      </node>
      <node id="35">
        <label>chrono</label>
      </node>
      <node id="36">
        <label>cmath</label>
      </node>
      <node id="40">
        <label>complex</label>
      </node>
      <node id="39">
        <label>cstring</label>
      </node>
      <node id="51">
        <label>deque</label>
      </node>
      <node id="30">
        <label>exception</label>
      </node>
      <node id="50">
        <label>forward_list</label>
      </node>
      <node id="44">
        <label>fstream</label>
      </node>
      <node id="53">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="43">
        <label>iostream</label>
      </node>
      <node id="49">
        <label>list</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="41">
        <label>memory</label>
      </node>
      <node id="56">
        <label>mkpath/mkpath.h</label>
      </node>
      <node id="38">
        <label>omp.h</label>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="45">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>unistd.h</label>
      </node>
      <node id="47">
        <label>unordered_map</label>
      </node>
      <node id="48">
        <label>unordered_set</label>
      </node>
      <node id="32">
        <label>utility</label>
      </node>
      <node id="31">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22">
        <label>SPheno_3_3_8.cpp</label>
        <link refid="SPheno__3__3__8_8cpp"/>
      </node>
      <node id="23">
        <label>SPheno_4_0_3.cpp</label>
        <link refid="SPheno__4__0__3_8cpp"/>
      </node>
      <node id="19">
        <label>DarkBit_standalone_MSSM.cpp</label>
        <link refid="DarkBit__standalone__MSSM_8cpp"/>
      </node>
      <node id="20">
        <label>DarkBit_standalone_ScalarSingletDM_Z2.cpp</label>
        <link refid="DarkBit__standalone__ScalarSingletDM__Z2_8cpp"/>
      </node>
      <node id="45">
        <label>DarkBit_standalone_WIMP.cpp</label>
        <link refid="DarkBit__standalone__WIMP_8cpp"/>
      </node>
      <node id="2">
        <label>spec.hpp</label>
        <link refid="spec_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>spec_head.hpp</label>
        <link refid="spec__head_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>spectrum_factories.hpp</label>
        <link refid="spectrum__factories_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>spectrum.cpp</label>
        <link refid="spectrum_8cpp"/>
      </node>
      <node id="3">
        <label>DMEFTSimpleSpec.hpp</label>
        <link refid="DMEFTSimpleSpec_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>DMsimpVectorMedDiracDMSimpleSpec.hpp</label>
        <link refid="DMsimpVectorMedDiracDMSimpleSpec_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>DMsimpVectorMedMajoranaDMSimpleSpec.hpp</label>
        <link refid="DMsimpVectorMedMajoranaDMSimpleSpec_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>DMsimpVectorMedScalarDMSimpleSpec.hpp</label>
        <link refid="DMsimpVectorMedScalarDMSimpleSpec_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>DMsimpVectorMedVectorDMSimpleSpec.hpp</label>
        <link refid="DMsimpVectorMedVectorDMSimpleSpec_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>DiracSingletDM_Z2SimpleSpec.hpp</label>
        <link refid="DiracSingletDM__Z2SimpleSpec_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>MSSMSimpleSpec.hpp</label>
        <link refid="MSSMSimpleSpec_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>MajoranaSingletDM_Z2SimpleSpec.hpp</label>
        <link refid="MajoranaSingletDM__Z2SimpleSpec_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>SLHASimpleSpec.hpp</label>
        <link refid="SLHASimpleSpec_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>SMHiggsSimpleSpec.hpp</label>
        <link refid="SMHiggsSimpleSpec_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>SMSimpleSpec.hpp</label>
        <link refid="SMSimpleSpec_8hpp"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>ScalarSingletDMSimpleSpec.hpp</label>
        <link refid="ScalarSingletDMSimpleSpec_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>VectorSingletDM_Z2SimpleSpec.hpp</label>
        <link refid="VectorSingletDM__Z2SimpleSpec_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>MSSMSimpleSpec.cpp</label>
        <link refid="MSSMSimpleSpec_8cpp"/>
      </node>
      <node id="40">
        <label>SLHASimpleSpec.cpp</label>
        <link refid="SLHASimpleSpec_8cpp"/>
      </node>
      <node id="42">
        <label>SMSimpleSpec.cpp</label>
        <link refid="SMSimpleSpec_8cpp"/>
      </node>
      <node id="28">
        <label>SpecBit_tests.cpp</label>
        <link refid="examples_2SpecBit__tests_8cpp"/>
      </node>
      <node id="16">
        <label>MDMSpec.hpp</label>
        <link refid="MDMSpec_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>MDMSpec_head.hpp</label>
        <link refid="MDMSpec__head_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>MSSMSpec.hpp</label>
        <link refid="MSSMSpec_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>MSSMSpec_head.hpp</label>
        <link refid="MSSMSpec__head_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>QedQcdWrapper.hpp</label>
        <link refid="QedQcdWrapper_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>ScalarSingletDM_Z2Spec.hpp</label>
        <link refid="ScalarSingletDM__Z2Spec_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>ScalarSingletDM_Z2Spec_head.hpp</label>
        <link refid="ScalarSingletDM__Z2Spec__head_8hpp"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>ScalarSingletDM_Z3Spec.hpp</label>
        <link refid="ScalarSingletDM__Z3Spec_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>ScalarSingletDM_Z3Spec_head.hpp</label>
        <link refid="ScalarSingletDM__Z3Spec__head_8hpp"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>SpecBit_externaltests.hpp</label>
        <link refid="SpecBit__externaltests_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>external_examples.hpp</label>
        <link refid="external__examples_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>MSSMspec.cpp</label>
        <link refid="MSSMspec_8cpp"/>
      </node>
      <node id="34">
        <label>QedQcdWrapper.cpp</label>
        <link refid="QedQcdWrapper_8cpp"/>
      </node>
      <node id="4">
        <label>SpecBit_DMEFT.cpp</label>
        <link refid="SpecBit__DMEFT_8cpp"/>
      </node>
      <node id="6">
        <label>SpecBit_DMsimpVectorMedDiracDM.cpp</label>
        <link refid="SpecBit__DMsimpVectorMedDiracDM_8cpp"/>
      </node>
      <node id="8">
        <label>SpecBit_DMsimpVectorMedMajoranaDM.cpp</label>
        <link refid="SpecBit__DMsimpVectorMedMajoranaDM_8cpp"/>
      </node>
      <node id="10">
        <label>SpecBit_DMsimpVectorMedScalarDM.cpp</label>
        <link refid="SpecBit__DMsimpVectorMedScalarDM_8cpp"/>
      </node>
      <node id="12">
        <label>SpecBit_DMsimpVectorMedVectorDM.cpp</label>
        <link refid="SpecBit__DMsimpVectorMedVectorDM_8cpp"/>
      </node>
      <node id="14">
        <label>SpecBit_DiracSingletDM.cpp</label>
        <link refid="SpecBit__DiracSingletDM_8cpp"/>
      </node>
      <node id="17">
        <label>SpecBit_MDM.cpp</label>
        <link refid="SpecBit__MDM_8cpp"/>
      </node>
      <node id="24">
        <label>SpecBit_MSSM.cpp</label>
        <link refid="SpecBit__MSSM_8cpp"/>
      </node>
      <node id="32">
        <label>SpecBit_MajoranaSingletDM.cpp</label>
        <link refid="SpecBit__MajoranaSingletDM_8cpp"/>
      </node>
      <node id="35">
        <label>SpecBit_SM.cpp</label>
        <link refid="SpecBit__SM_8cpp"/>
      </node>
      <node id="36">
        <label>SpecBit_ScalarSingletDM.cpp</label>
        <link refid="SpecBit__ScalarSingletDM_8cpp"/>
      </node>
      <node id="37">
        <label>SpecBit_VS.cpp</label>
        <link refid="SpecBit__VS_8cpp"/>
      </node>
      <node id="38">
        <label>SpecBit_VectorSingletDM.cpp</label>
        <link refid="SpecBit__VectorSingletDM_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classGambit_1_1DummyModel" prot="public">Gambit::DummyModel</innerclass>
    <innerclass refid="classGambit_1_1DummyInput" prot="public">Gambit::DummyInput</innerclass>
    <innerclass refid="structGambit_1_1always__false" prot="public">Gambit::always_false</innerclass>
    <innerclass refid="structGambit_1_1SpecTraits" prot="public">Gambit::SpecTraits</innerclass>
    <innerclass refid="structGambit_1_1DefaultTraits" prot="public">Gambit::DefaultTraits</innerclass>
    <innerclass refid="classGambit_1_1VerifyContents" prot="public">Gambit::VerifyContents</innerclass>
    <innerclass refid="classGambit_1_1Spec" prot="public">Gambit::Spec</innerclass>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="spec__head_8hpp_1a167e21f83ddd717010e89d4a674d1c82" prot="public" static="no">
        <name>PDB</name>
        <initializer>Models::ParticleDB()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="32" column="9" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Implementation class &quot;behind the scenes&quot; of abstract SubSpectrum interface class. Sits between SubSpectrum and model-specific wrapper classes.</para>
<para><hruler/>
</para>
<para>Authors:</para>
<para><simplesect kind="author"><para>Peter Athron <linebreak/>
 (<ulink url="mailto:peter.athron@coepp.org.au">peter.athron@coepp.org.au</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2014, 2015 Jan, Feb, Mar</para>
</simplesect>
<simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2014, 2015 Jan - Jul</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>Implementation<sp/>class<sp/>&quot;behind<sp/>the<sp/>scenes&quot;<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///<sp/><sp/>abstract<sp/>SubSpectrum<sp/>interface<sp/>class.<sp/>Sits</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///<sp/><sp/>between<sp/>SubSpectrum<sp/>and<sp/>model-specific<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">///<sp/><sp/>wrapper<sp/>classes.</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/>Authors:<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/>&lt;!--<sp/>add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify<sp/>--&gt;</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/><sp/>\author<sp/>Peter<sp/>Athron<sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(peter.athron@coepp.org.au)</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/><sp/>\date<sp/>2014,<sp/>2015<sp/>Jan,<sp/>Feb,<sp/>Mar<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment">///</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///<sp/><sp/>\author<sp/>Ben<sp/>Farmer</highlight></codeline>
<codeline lineno="20"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(benjamin.farmer@fysik.su.se)</highlight></codeline>
<codeline lineno="21"><highlight class="comment">///<sp/><sp/>\date<sp/>2014,<sp/>2015<sp/>Jan<sp/>-<sp/>Jul</highlight></codeline>
<codeline lineno="22"><highlight class="comment">///</highlight></codeline>
<codeline lineno="23"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__spec_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__spec_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="subspectrum_8hpp" kindref="compound">gambit/Elements/subspectrum.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="subspectrum__contents_8hpp" kindref="compound">gambit/Models/SpectrumContents/subspectrum_contents.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Particle<sp/>database<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PDB<sp/>Models::ParticleDB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Need<sp/>to<sp/>forward<sp/>declare<sp/>Spec<sp/>class</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Spec;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Dummy<sp/>classes<sp/>to<sp/>satisfy<sp/>template<sp/>parameters<sp/>for<sp/>Spec<sp/>class<sp/>in<sp/>cases<sp/>when<sp/>those<sp/>objects</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>///<sp/>are<sp/>not<sp/>needed<sp/>by<sp/>the<sp/>getters.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>///<sp/>@{</highlight></codeline>
<codeline lineno="44" refid="classGambit_1_1DummyModel" refkind="compound"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1DummyModel" kindref="compound">DummyModel</ref><sp/>{};</highlight></codeline>
<codeline lineno="45" refid="classGambit_1_1DummyInput" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1DummyInput" kindref="compound">DummyInput</ref><sp/>{};</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Helper<sp/>for<sp/>the<sp/>static_assert<sp/>below</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="50" refid="structGambit_1_1always__false" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structGambit_1_1always__false" kindref="compound">always_false</ref><sp/>{<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};<sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Forward<sp/>declare<sp/>base<sp/>traits<sp/>class<sp/>which<sp/>communicates</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Model<sp/>and<sp/>Input<sp/>typedefs<sp/>from<sp/>the<sp/>wrapper<sp/>class</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Triggers<sp/>informative<sp/>compiler<sp/>error<sp/>if<sp/>an<sp/>appropriate<sp/>specialisation<sp/>is<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>///<sp/>for<sp/>whatever<sp/>SubSpectrum<sp/>wrapper<sp/>might<sp/>be<sp/>trying<sp/>to<sp/>instantiate<sp/>this.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="59" refid="structGambit_1_1SpecTraits" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits</ref></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="structGambit_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>appropriate<sp/>specialisation<sp/>of<sp/>SpecTraits!<sp/>Did<sp/>you<sp/>define<sp/>one<sp/>along<sp/>with<sp/>your<sp/>SubSpectrum<sp/>wrapper?<sp/>If<sp/>so,<sp/>please<sp/>be<sp/>sure<sp/>that<sp/>the<sp/>template<sp/>parameter<sp/>matches<sp/>the<sp/>name<sp/>of<sp/>your<sp/>wrapper<sp/>class.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Default<sp/>values<sp/>for<sp/>traits.<sp/>Specialisations<sp/>of<sp/>SpecTraits<sp/>should<sp/>inherit<sp/>from<sp/>this,<sp/>and<sp/>then<sp/>override<sp/>the<sp/>traits<sp/>that<sp/>they<sp/>want<sp/>to<sp/>customise.</highlight></codeline>
<codeline lineno="65" refid="structGambit_1_1DefaultTraits" refkind="compound"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structGambit_1_1DefaultTraits" kindref="compound">DefaultTraits</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1DummyModel" kindref="compound">DummyModel</ref><sp/><ref refid="classGambit_1_1DummyModel" kindref="compound">Model</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1DummyInput" kindref="compound">DummyInput</ref><sp/><ref refid="classGambit_1_1DummyInput" kindref="compound">Input</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Forward<sp/>declarations<sp/>related<sp/>to<sp/>FptrFinder<sp/>class</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1FptrFinder" kindref="compound">FptrFinder</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1CallFcn" kindref="compound">CallFcn</ref>;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Simpler<sp/>helper<sp/>class<sp/>to<sp/>run<sp/>the<sp/>verify_contents<sp/>function<sp/>only</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>///<sp/>once,<sp/>the<sp/>first<sp/>time<sp/>a<sp/>particular<sp/>wrapper<sp/>class<sp/>is<sp/>constructed.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Contents&gt;</highlight></codeline>
<codeline lineno="79" refid="classGambit_1_1VerifyContents" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1VerifyContents" kindref="compound">VerifyContents</ref></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1VerifyContents" kindref="compound">VerifyContents</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref>&amp;<sp/>spec)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Contents<sp/>contents;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents.verify_contents(spec);<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CRTP<sp/>used<sp/>to<sp/>allow<sp/>access<sp/>to<sp/>some<sp/>special<sp/>data<sp/>members<sp/>of<sp/>the<sp/>derived<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Various<sp/>inherited<sp/>classes<sp/>are<sp/>just<sp/>used<sp/>to<sp/>factor<sp/>out<sp/>code,<sp/>some<sp/>of<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>templated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DerivedSpec&gt;</highlight></codeline>
<codeline lineno="93" refid="classGambit_1_1Spec" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1Spec" kindref="compound">Spec</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGambit_1_1FptrFinder" kindref="compound">FptrFinder</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>DerivedSpec<sp/>D;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec" kindref="compound">Spec&lt;D&gt;</ref><sp/><ref refid="classGambit_1_1Spec" kindref="compound">Self</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Note:<sp/>Wrapper<sp/>need<sp/>to<sp/>define<sp/>a<sp/>specialisation<sp/>of<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>SpecTraits,<sp/>which<sp/>typedefs<sp/>Model<sp/>and<sp/>Input.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>&quot;Grab&quot;<sp/>these<sp/>typedefs<sp/>here<sp/>to<sp/>simplify<sp/>notation</highlight></codeline>
<codeline lineno="105" refid="classGambit_1_1Spec_1a80dddcba2892f90ccef373a0f51c3710" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits&lt;D&gt;::Contents</ref><sp/><ref refid="classGambit_1_1Spec_1a80dddcba2892f90ccef373a0f51c3710" kindref="member">Contents</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits&lt;D&gt;::Model</ref><sp/><sp/><sp/><sp/>Model;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits&lt;D&gt;::Input</ref><sp/><sp/><sp/><sp/>Input;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes&lt;D,MapTag::Get&gt;</ref><sp/><ref refid="structGambit_1_1MapTypes" kindref="compound">MTget</ref>;<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes&lt;D,MapTag::Set&gt;</ref><sp/><ref refid="structGambit_1_1MapTypes" kindref="compound">MTset</ref>;<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce" kindref="member">getName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits&lt;D&gt;::name</ref>();<sp/>};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Getters<sp/>and<sp/>checker<sp/>declarations<sp/>for<sp/>parameter<sp/>retrieval<sp/>with<sp/>zero,<sp/>one,<sp/>and<sp/>two<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6" kindref="member">has</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref>=use_overrides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>=<ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref>=use_overrides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>=<ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6" kindref="member">has</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref>=use_overrides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>=<ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref>=use_overrides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>=<ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6" kindref="member">has</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref>=use_overrides)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SpecOverrideOptions" kindref="compound">SpecOverrideOptions</ref>=use_overrides)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setter<sp/>declarations,<sp/>for<sp/>setting<sp/>parameters<sp/>in<sp/>a<sp/>derived<sp/>model<sp/>object,</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>for<sp/>overriding<sp/>model<sp/>object<sp/>values<sp/>with<sp/>values<sp/>stored<sp/>outside</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>model<sp/>object<sp/>(for<sp/>when<sp/>values<sp/>cannot<sp/>be<sp/>inserted<sp/>back<sp/>into<sp/>the</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>object)</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note;<sp/>these<sp/>are<sp/>NON-CONST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>=<ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>=<ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Default<sp/>(empty)<sp/>map<sp/>filler<sp/>functions</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Override<sp/>as<sp/>needed<sp/>in<sp/>derived<sp/>classes</highlight></codeline>
<codeline lineno="133" refid="classGambit_1_1Spec_1a2d75af9b21cb3ae6980f4d06fe51ffd2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTget&gt;&gt;<sp/><ref refid="classGambit_1_1Spec_1a2d75af9b21cb3ae6980f4d06fe51ffd2" kindref="member">fill_getter_maps</ref>()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTget&gt;&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTset&gt;&gt;<sp/>fill_setter_maps()</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTset&gt;&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>integer<sp/>offset<sp/>convention<sp/>used<sp/>by<sp/>internal<sp/>model<sp/>class<sp/>(needed<sp/>by<sp/>getters<sp/>which<sp/>take<sp/>indices)<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>By<sp/>default<sp/>assume<sp/>no<sp/>offset.<sp/>Overrride<sp/>as<sp/>needed<sp/>in<sp/>derived<sp/>class.</highlight></codeline>
<codeline lineno="146" refid="classGambit_1_1Spec_1a21cfe3f6587fc2c37247524a48e0291a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec_1a21cfe3f6587fc2c37247524a48e0291a" kindref="member">index_offset</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Function<sp/>to<sp/>retrieve<sp/>the<sp/>possibly<sp/>overridden<sp/>index<sp/>offset<sp/>from<sp/>the<sp/>derived<sp/>class<sp/>via<sp/>CRTP</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_index_offset()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D::index_offset();<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Functions<sp/>to<sp/>ensure<sp/>that<sp/>all<sp/>the<sp/>possible<sp/>tags<sp/>exist<sp/>in<sp/>the<sp/>final<sp/>map,<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/><sp/>even<sp/>if<sp/>no<sp/>getters/setters<sp/>are<sp/>stored<sp/>under<sp/>those<sp/>tags.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getter_maps_fill_tags(std::map&lt;<ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,MapCollection&lt;MTget&gt;&gt;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Par::Tags&gt;<sp/>all<sp/>=<sp/>Par::get_all();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;Par::Tags&gt;::iterator<sp/>it<sp/>=<sp/>all.begin();<sp/>it!=all.end();<sp/>++it)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[*it];<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>tag<sp/>key<sp/>if<sp/>missing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setter_maps_fill_tags(std::map&lt;<ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>,MapCollection&lt;MTset&gt;&gt;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Par::Tags&gt;<sp/>all<sp/>=<sp/>Par::get_all();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;Par::Tags&gt;::iterator<sp/>it<sp/>=<sp/>all.begin();<sp/>it!=all.end();<sp/>++it)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[*it];<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>tag<sp/>key<sp/>if<sp/>missing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="174"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Filler<sp/>functions<sp/>that<sp/>are<sp/>*actually*<sp/>directly<sp/>used<sp/>to<sp/>fill<sp/>the<sp/>maps</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/><sp/>Combines<sp/>the<sp/>(possibly<sp/>overriden)<sp/>map<sp/>filler,<sp/>plus<sp/>the<sp/>fill_tags</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/><sp/>functions<sp/>to<sp/>fill<sp/>in<sp/>any<sp/>unused<sp/>tag<sp/>keys.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/><sp/>DO<sp/>NOT<sp/>override<sp/>these!</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline lineno="180"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTget&gt;&gt;<sp/>final_fill_getter_maps()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>from<sp/>(possibly<sp/>overriden)<sp/>derived<sp/>class<sp/>filler<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTget&gt;&gt;<sp/>tmp<sp/>=<sp/>D::fill_getter_maps();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>in<sp/>any<sp/>missing<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getter_maps_fill_tags(tmp);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTset&gt;&gt;<sp/>final_fill_setter_maps()</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>from<sp/>(possibly<sp/>overriden)<sp/>derived<sp/>class<sp/>filler<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTset&gt;&gt;<sp/>tmp<sp/>=<sp/>D::fill_setter_maps();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>in<sp/>any<sp/>missing<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setter_maps_fill_tags(tmp);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Constructor</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>This<sp/>uses<sp/>the<sp/>&quot;Contents&quot;<sp/>class<sp/>to<sp/>verify<sp/>(once,<sp/>not<sp/>every<sp/>construction)</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>that<sp/>this<sp/>wrapper<sp/>provides<sp/>all<sp/>the<sp/>basic<sp/>functionality<sp/>that<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>supposed<sp/>to.</highlight></codeline>
<codeline lineno="205" refid="classGambit_1_1Spec_1a42196ab2958c64ec51fdfbc175808dad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1Spec_1a42196ab2958c64ec51fdfbc175808dad" kindref="member">Spec</ref>()<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1VerifyContents" kindref="compound">VerifyContents&lt;Contents&gt;</ref><sp/>runonce(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Virtual<sp/>destructor</highlight></codeline>
<codeline lineno="208" refid="classGambit_1_1Spec_1ac619e173f59a1f523001981952ed30ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec_1ac619e173f59a1f523001981952ed30ef" kindref="member">~Spec</ref>()<sp/>{};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>CRTP-style<sp/>polymorphic<sp/>clone<sp/>function</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Now<sp/>derived<sp/>classes<sp/>will<sp/>not<sp/>need<sp/>to<sp/>re-implement<sp/>the<sp/>clone<sp/>function.</highlight></codeline>
<codeline lineno="212" refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;SubSpectrum&gt;<sp/><ref refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb" kindref="member">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;SubSpectrum&gt;(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DerivedSpec(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DerivedSpec<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Getters<sp/>for<sp/>wrapped<sp/>data;<sp/>be<sp/>sure<sp/>to<sp/>define<sp/>the<sp/>&apos;get_Model&apos;<sp/>and</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/><sp/>&apos;get_Input&apos;<sp/>functions<sp/>in<sp/>the<sp/>wrappers<sp/>(with<sp/>public<sp/>access)</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/><sp/>Might<sp/>as<sp/>well<sp/>use<sp/>static<sp/>polymorphism<sp/>rather<sp/>than<sp/>virtual<sp/>functions,</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/><sp/>since<sp/>we<sp/>are<sp/>using<sp/>the<sp/>CRTP<sp/>already<sp/>anyway.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Default<sp/>&quot;null&quot;<sp/>versions<sp/>of<sp/>get_Model<sp/>and<sp/>get_Input,<sp/>to<sp/>be<sp/>used<sp/>if</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>wrapper<sp/>does<sp/>not<sp/>override<sp/>them.</highlight></codeline>
<codeline lineno="226" refid="classGambit_1_1Spec_1a52e6395fb74217ac8421fbb8beeed75c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1DummyModel" kindref="compound">DummyModel</ref><sp/><ref refid="classGambit_1_1Spec_1a52e6395fb74217ac8421fbb8beeed75c" kindref="member">dummymodel</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1DummyInput" kindref="compound">DummyInput</ref><sp/>dummyinput;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Model&amp;<sp/>get_Model()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec_1a52e6395fb74217ac8421fbb8beeed75c" kindref="member">dummymodel</ref>;<sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input&amp;<sp/>get_Input()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummyinput;<sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Model&amp;<sp/>get_Model()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec_1a52e6395fb74217ac8421fbb8beeed75c" kindref="member">dummymodel</ref>;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Input&amp;<sp/>get_Input()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummyinput;<sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>model<sp/>object<sp/>on<sp/>which<sp/>to<sp/>call<sp/>function<sp/>pointers</highlight></codeline>
<codeline lineno="234" refid="classGambit_1_1Spec_1a8d1d5df6f8e2acca6f370732a8e13304" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Model&amp;<sp/><ref refid="classGambit_1_1Spec_1a8d1d5df6f8e2acca6f370732a8e13304" kindref="member">model</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DerivedSpec*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;get_Model();<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Return<sp/>it<sp/>as<sp/>const<sp/>if<sp/>we<sp/>are<sp/>a<sp/>const<sp/>object</highlight></codeline>
<codeline lineno="236" refid="classGambit_1_1Spec_1ab3ebfb60469691d2e534fd61edb2f321" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Model&amp;<sp/><ref refid="classGambit_1_1Spec_1ab3ebfb60469691d2e534fd61edb2f321" kindref="member">model</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">DerivedSpec*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;get_Model();<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>struct<sp/>containing<sp/>any<sp/>extra<sp/>data<sp/>input<sp/>on<sp/>SubSpectrum<sp/>object<sp/>creation</highlight></codeline>
<codeline lineno="239" refid="classGambit_1_1Spec_1a11885c8d86ed99101f08a3967f63061b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input&amp;<sp/><ref refid="classGambit_1_1Spec_1a11885c8d86ed99101f08a3967f63061b" kindref="member">input</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DerivedSpec*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;get_Input();<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Return<sp/>it<sp/>as<sp/>const<sp/>if<sp/>we<sp/>are<sp/>a<sp/>const<sp/>object</highlight></codeline>
<codeline lineno="241" refid="classGambit_1_1Spec_1a887a14df9f65f1180a6293d376a332a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Input&amp;<sp/><ref refid="classGambit_1_1Spec_1a887a14df9f65f1180a6293d376a332a5" kindref="member">input</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">DerivedSpec*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;get_Input();<sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="244"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Will<sp/>need<sp/>a<sp/>map<sp/>of<sp/>map<sp/>collections<sp/>for<sp/>both<sp/>the<sp/>getters<sp/>and<sp/>setters,</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>containing<sp/>the<sp/>map<sp/>collections<sp/>for<sp/>the<sp/>permitted<sp/>parameter<sp/>types</highlight></codeline>
<codeline lineno="247"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classGambit_1_1Spec_1a46858e18ee3cb4193dbaee50b698e0b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTget&gt;&gt;<sp/><ref refid="classGambit_1_1Spec_1a46858e18ee3cb4193dbaee50b698e0b4" kindref="member">GetterMaps</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;Par::Tags,MapCollection&lt;MTset&gt;&gt;<sp/>SetterMaps;</highlight></codeline>
<codeline lineno="250" refid="classGambit_1_1Spec_1a471ed98efd9bb9072a1b83db0e8ce89b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec_1a46858e18ee3cb4193dbaee50b698e0b4" kindref="member">GetterMaps</ref><sp/><ref refid="classGambit_1_1Spec_1a471ed98efd9bb9072a1b83db0e8ce89b" kindref="member">getter_maps</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SetterMaps<sp/>setter_maps;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/>///<sp/>Initialise<sp/>maps<sp/>(uses<sp/>filler<sp/>overrides<sp/>from<sp/>DerivedSpec<sp/>if<sp/>defined)</highlight></codeline>
<codeline lineno="256"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Spec_1a46858e18ee3cb4193dbaee50b698e0b4" kindref="member">Spec&lt;D&gt;::GetterMaps</ref><sp/><ref refid="classGambit_1_1Spec_1a471ed98efd9bb9072a1b83db0e8ce89b" kindref="member">Spec&lt;D&gt;::getter_maps</ref>(<ref refid="classGambit_1_1Spec" kindref="compound">Spec&lt;D&gt;::final_fill_getter_maps</ref>());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Spec&lt;D&gt;::SetterMaps<sp/><ref refid="classGambit_1_1Spec" kindref="compound">Spec&lt;D&gt;::setter_maps</ref>(<ref refid="classGambit_1_1Spec" kindref="compound">Spec&lt;D&gt;::final_fill_setter_maps</ref>());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Gambit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Undef<sp/>the<sp/>various<sp/>helper<sp/>macros<sp/>to<sp/>avoid<sp/>contaminating<sp/>other<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PDB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="Elements/include/gambit/Elements/spec_head.hpp"/>
  </compounddef>
</doxygen>
