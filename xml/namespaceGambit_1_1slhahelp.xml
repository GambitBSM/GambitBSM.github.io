<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1slhahelp" kind="namespace" language="C++">
    <compoundname>Gambit::slhahelp</compoundname>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1a86ab3dbb17ba1708557160c92cb4b0c4" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a815827acea00e9417a2c1d28d3e8de94" kindref="member">p_int_string</ref> &gt;</type>
        <definition>const std::map&lt;str, p_int_string&gt; Gambit::slhahelp::gauge_label_to_index_type</definition>
        <argsstring></argsstring>
        <name>gauge_label_to_index_type</name>
        <qualifiedname>Gambit::slhahelp::gauge_label_to_index_type</qualifiedname>
        <initializer>= init_gauge_label_to_index_type()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Known maps filled at initialisation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="36" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1a64744f770ab80b0ff721600f91997bbf" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a815827acea00e9417a2c1d28d3e8de94" kindref="member">p_int_string</ref> &gt;</type>
        <definition>const std::map&lt;str, p_int_string&gt; Gambit::slhahelp::mass_label_to_index_type</definition>
        <argsstring></argsstring>
        <name>mass_label_to_index_type</name>
        <qualifiedname>Gambit::slhahelp::mass_label_to_index_type</qualifiedname>
        <initializer>= init_mass_label_to_index_type()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="37" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1a1884214b1e548dc748a658331a2fbde5" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, pair_string_ints &gt;</type>
        <definition>const std::map&lt;str, pair_string_ints&gt; Gambit::slhahelp::familystate_label</definition>
        <argsstring></argsstring>
        <name>familystate_label</name>
        <qualifiedname>Gambit::slhahelp::familystate_label</qualifiedname>
        <initializer>= init_familystate_label()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="38" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1acdcb1810ede419ebd36811471f9ec0f7" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a815827acea00e9417a2c1d28d3e8de94" kindref="member">p_int_string</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>const std::map&lt;p_int_string, std::vector&lt;str&gt; &gt; Gambit::slhahelp::type_family_to_gauge_states</definition>
        <argsstring></argsstring>
        <name>type_family_to_gauge_states</name>
        <qualifiedname>Gambit::slhahelp::type_family_to_gauge_states</qualifiedname>
        <initializer>= init_type_family_to_gauge_states()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="39" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1a11d627862fd890649d632c4012b5621d" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>const std::map&lt;str,std::vector&lt;str&gt; &gt; Gambit::slhahelp::family_state_to_gauge_state</definition>
        <argsstring></argsstring>
        <name>family_state_to_gauge_state</name>
        <qualifiedname>Gambit::slhahelp::family_state_to_gauge_state</qualifiedname>
        <initializer>= init_family_state_to_gauge_state()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="40" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1ab86e0913f602cdddca631d5ebffe0060" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>const std::map&lt;str,std::vector&lt;str&gt; &gt; Gambit::slhahelp::gauge_es_to_family_states</definition>
        <argsstring></argsstring>
        <name>gauge_es_to_family_states</name>
        <qualifiedname>Gambit::slhahelp::gauge_es_to_family_states</qualifiedname>
        <initializer>= init_gauge_es_to_family_states()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="41" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1a0c2b63b2b3198f0532734500dec15da8" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>const std::map&lt;str,std::vector&lt;str&gt; &gt; Gambit::slhahelp::type_to_vec_of_mass_es</definition>
        <argsstring></argsstring>
        <name>type_to_vec_of_mass_es</name>
        <qualifiedname>Gambit::slhahelp::type_to_vec_of_mass_es</qualifiedname>
        <initializer>= init_type_to_vec_of_mass_es()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="42" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mssm__slhahelp_8cpp_1aed14bc038df1b3204d0ec3a56a42699d" prot="public" static="no" mutable="no">
        <type>const std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>const std::map&lt;str,std::vector&lt;str&gt; &gt; Gambit::slhahelp::type_to_vec_of_gauge_es</definition>
        <argsstring></argsstring>
        <name>type_to_vec_of_gauge_es</name>
        <qualifiedname>Gambit::slhahelp::type_to_vec_of_gauge_es</qualifiedname>
        <initializer>= init_type_to_vec_of_gauge_es()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="43" column="22" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1addac4f40fab77731320bf7953ae389da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_from_gauge_es</definition>
        <argsstring>(str gauge_es, const SubSpectrum &amp;mssm, double tol, str context, bool pterror)</argsstring>
        <name>mass_es_from_gauge_es</name>
        <qualifiedname>Gambit::slhahelp::mass_es_from_gauge_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pterror_only</declname>
        </param>
        <briefdescription>
<para>as above but do test against tol internally </para>
        </briefdescription>
        <detaileddescription>
<para>***************** Gauge &lt;-&gt; Mass Eigenstate Helpers **************** Identifies the mass eigenstate with largest gauge eigenstate content.</para>
<para>Version that tests internally agains a user-requested tolerance, either raising a GAMBIT error (if pterror_only = false) or invalidating a point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="236" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="236" bodyend="258" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="72" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1af15d14e81d389b7b6981fc90bd29699d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_from_gauge_es</definition>
        <argsstring>(str gauge_es, double &amp;max_mixing, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_from_gauge_es</name>
        <qualifiedname>Gambit::slhahelp::mass_es_from_gauge_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>max_mixing</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
<para>Version returning maximum mixing. </para>
        </briefdescription>
        <detaileddescription>
<para>as above but doesn&apos;t fill a gauge_composition vector would have a slight efficiency saving if we didn&apos;t use wrapper and avoided skipped gauge_composition entirely but at the cost of a lot of code duplication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="196" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="196" bodyend="204" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="75" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1ad70709ce95503d31c3501127f3380a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_from_gauge_es</definition>
        <argsstring>(str gauge_es, std::vector&lt; double &gt; &amp;gauge_composition, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_from_gauge_es</name>
        <qualifiedname>Gambit::slhahelp::mass_es_from_gauge_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>gauge_composition</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
<para>Version returning gauge composition of identified mass eigenstate. </para>
        </briefdescription>
        <detaileddescription>
<para>as above but doesn&apos;t fill max_mixing would have a slight efficiency saving if we didn&apos;t use wrapper and avoided skipped max_mixing entirely but at the cost of a lot of code duplication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="210" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="210" bodyend="219" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="78" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a7c2ad288da7c98f9d36f906298a9349a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_from_gauge_es</definition>
        <argsstring>(str gauge_es, double &amp;max_mixing, std::vector&lt; double &gt; &amp;gauge_composition, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_from_gauge_es</name>
        <qualifiedname>Gambit::slhahelp::mass_es_from_gauge_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>max_mixing</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>gauge_composition</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version returning maximum mixing and full gauge composition of identified mass eigenstate.</para>
<para>indentifies the state with largest gauge_es content also fills largest max_mixing and full gauge_composition </para>
        </detaileddescription>
        <inbodydescription>
<para>passed in massstate to be set</para>
<para>make sure this is zero to start</para>
<para>retrive type from the gauge_es string</para>
<para>iterate over vector of strings for mass states</para>
<para>passed in massstate to be set</para>
<para>make sure this is zero to start</para>
<para>retrive type from the gauge_es string</para>
<para>iterate over vector of strings for mass states</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="162" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="162" bodyend="190" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="83" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a5bd98d9b1f2937b6681074c395737187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::gauge_es_from_mass_es</definition>
        <argsstring>(str mass_es, const SubSpectrum &amp;mssm, double tol, str context, bool pterror)</argsstring>
        <name>gauge_es_from_mass_es</name>
        <qualifiedname>Gambit::slhahelp::gauge_es_from_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pterror_only</declname>
        </param>
        <briefdescription>
<para>as above but do test against tol internally </para>
        </briefdescription>
        <detaileddescription>
<para>Identifies the gauge eigenstate with largest mass eigenstate content.</para>
<para>Version that tests internally agains a user-requested tolerance, either raising a GAMBIT error (if pterror_only = false) or invalidating a point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="338" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="338" bodyend="360" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="92" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a77dae50b0662ded96977010cfe73c752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::gauge_es_from_mass_es</definition>
        <argsstring>(str mass_es, double &amp;max_mixing, const SubSpectrum &amp;mssm)</argsstring>
        <name>gauge_es_from_mass_es</name>
        <qualifiedname>Gambit::slhahelp::gauge_es_from_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>max_mixing</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
<para>Version returning maximum mixing. </para>
        </briefdescription>
        <detaileddescription>
<para>as above but doesn&apos;t fill a gauge_composition vector would have a slight efficiency saving if we didn&apos;t use wrapper and avoided skipped gauge_composition entirely but at the cost of a lot of code duplication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="297" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="297" bodyend="305" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="95" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a769d962f77b5b5d6b93c0519f6bc3b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::gauge_es_from_mass_es</definition>
        <argsstring>(str mass_es, std::vector&lt; double &gt; &amp;mass_composition, const SubSpectrum &amp;mssm)</argsstring>
        <name>gauge_es_from_mass_es</name>
        <qualifiedname>Gambit::slhahelp::gauge_es_from_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>mass_composition</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
<para>Version returning mass composition of identified gauge eigenstate. </para>
        </briefdescription>
        <detaileddescription>
<para>as above but doesn&apos;t fill max_mixing would have a slight efficiency saving if we didn&apos;t use wrapper and avoided skipped max_mixing entirely but at the cost of a lot of code duplication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="311" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="311" bodyend="320" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="98" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a2fd609cbf475ffb939b4fca3ed44878f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::gauge_es_from_mass_es</definition>
        <argsstring>(str mass_es, double &amp;max_mixing, std::vector&lt; double &gt; &amp;mass_composition, const SubSpectrum &amp;mssm)</argsstring>
        <name>gauge_es_from_mass_es</name>
        <qualifiedname>Gambit::slhahelp::gauge_es_from_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>max_mixing</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>mass_composition</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version returning maximum mixing and full mass composition of identified gauge eigenstate.</para>
<para>identifies gauge_es with largest mass_es content also fills largest max_mixing and full mass_composition </para>
        </detaileddescription>
        <inbodydescription>
<para>passed in massstate to be set</para>
<para>start with zero</para>
<para>retrive type from the gauge_es string</para>
<para>iterate over vector of strings for mass states</para>
<para>passed in massstate to be set</para>
<para>start with zero</para>
<para>retrive type from the gauge_es string</para>
<para>iterate over vector of strings for mass states</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="262" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="262" bodyend="291" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="103" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a4a8623c835a6ec57b716d4b9203d9c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_closest_to_family</definition>
        <argsstring>(str familystate, const SubSpectrum &amp;mssm, double tol, str context, bool pterror_only)</argsstring>
        <name>mass_es_closest_to_family</name>
        <qualifiedname>Gambit::slhahelp::mass_es_closest_to_family</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>familystate</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pterror_only</declname>
          <defname>pterror</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identifies the mass eigenstate that best matches the requested family state.</para>
<para>Version that tests internally agains a user-requested tolerance for family mixing, either raising a GAMBIT error (if pterror_only = false) or invalidating a point.</para>
<para>identifies the mass_es that is closest match to specified family does tol-test internally to check correctness of assumptions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="526" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="526" bodyend="552" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="117" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a8375e93b3f3139fd21e2cb1259589752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_closest_to_family</definition>
        <argsstring>(str familystate, std::vector&lt; double &gt; &amp;gauge_composition, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_closest_to_family</name>
        <qualifiedname>Gambit::slhahelp::mass_es_closest_to_family</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>familystate</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>gauge_composition</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version returning mixing elements of the resulting mass eigenstate into the two gauge eigenstates of the requested family. To test against family mixing, check that the square sum of elements of this mixing matrix row are sufficiently close to 1. That is, compare gauge_composition(1)^2 + gauge_composition(2)^2 to 1-tolerance.</para>
<para>identifies the mass_es that is closest match to specified family state and fills mixture of the two gauge states with same family into std::vector gauge_composition </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="496" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="496" bodyend="505" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="124" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1ab80dcee0a226d39de9a018b6fd917ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_closest_to_family</definition>
        <argsstring>(str familystate, double &amp;sum_sqr_mix, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_closest_to_family</name>
        <qualifiedname>Gambit::slhahelp::mass_es_closest_to_family</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>familystate</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sum_sqr_mix</declname>
          <defname>sqr_sum_mix</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
<para>Version returning the square sum of gauge mixing elements. </para>
        </briefdescription>
        <detaileddescription>
<para>identifies the mass_es that is closest match to specified family state and fills sqr_sum_mix with the square sum of each of the two mixings into gauge_es of that family </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="510" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="510" bodyend="522" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="128" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a0354845de2579fa511aa2a43914e03ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_closest_to_family</definition>
        <argsstring>(str familystate, std::vector&lt; double &gt; &amp;gauge_composition, std::vector&lt; double &gt; &amp;off_family_mixing, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_closest_to_family</name>
        <qualifiedname>Gambit::slhahelp::mass_es_closest_to_family</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>familystate</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>gauge_composition</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>off_family_mixing</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version returning mixing elements of the resulting mass eigenstate into the two gauge eigenstates of the requested family, and off-family mixing.</para>
<para>identifies the mass_es that is closest match to specified family state and fills mixture of the two gauge states with same family into std::vector gauge_composition also fills remaining off-family mixings into a second vector </para>
        </detaileddescription>
        <inbodydescription>
<para>extract info from strings via maps</para>
<para>extract info from strings via maps</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="458" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="458" bodyend="491" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="133" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a448de05dab42b76e89acf39bbc66673e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::family_state_closest_to_mass_es</definition>
        <argsstring>(str mass_es, const SubSpectrum &amp;mssm, double tol, str context, bool pterror_only)</argsstring>
        <name>family_state_closest_to_mass_es</name>
        <qualifiedname>Gambit::slhahelp::family_state_closest_to_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pterror_only</declname>
          <defname>pterror</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identifies the family state that best matches the requested mass eigenstate.</para>
<para>Version that tests internally agains a user-requested tolerance for family mixing, either raising a GAMBIT error (if pterror_only = false) or invalidating a point.</para>
<para>wrapper for overloaded version returns family state that best matches the given mass_es and fills the mixing of the matching mass_es into gauge eigenstates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="735" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="735" bodyend="757" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="143" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a17870d5996106c724943590eefd35d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::family_state_closest_to_mass_es</definition>
        <argsstring>(str mass_es, std::vector&lt; double &gt; &amp;mass_comp, const SubSpectrum &amp;mssm)</argsstring>
        <name>family_state_closest_to_mass_es</name>
        <qualifiedname>Gambit::slhahelp::family_state_closest_to_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>mass_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version returning the mass eigenstate composition of the gauge eigenstate that best matches the requested mass eigenstate.</para>
<para>wrapper for overloaded version returns family state that best matches the given mass_es and fills the mixing of the matching mass_es into gauge eigenstates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="722" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="722" bodyend="730" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="147" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1aeb66416eaa3f676257fc57f4f2185c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::family_state_closest_to_mass_es</definition>
        <argsstring>(str mass_es, double &amp;sum_sqr_mix, const SubSpectrum &amp;mssm)</argsstring>
        <name>family_state_closest_to_mass_es</name>
        <qualifiedname>Gambit::slhahelp::family_state_closest_to_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sum_sqr_mix</declname>
          <defname>sum_sq_mix</defname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version returning the summed squares of the contributions to the gauge eigenstate that best matches the requested mass eigenstate, of the two mass eigenstates that look most like the resulting family. (Seriously, just use the tol version.) To test against family mixing, you can check that this square of elements is sufficiently close to 1.</para>
<para>wrapper for overloaded version returns family state that best matches the given mass_es fills a double with the sum of the square mixings to gauge_es of the matching family </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="710" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="710" bodyend="717" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="155" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1ad0a8b7f0c4ab72b90bec1eb31b79f005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::family_state_closest_to_mass_es</definition>
        <argsstring>(str mass_es, double &amp;sum_sqr_mix, std::vector&lt; double &gt; &amp;mass_comp, const SubSpectrum &amp;mssm)</argsstring>
        <name>family_state_closest_to_mass_es</name>
        <qualifiedname>Gambit::slhahelp::family_state_closest_to_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sum_sqr_mix</declname>
          <defname>sum_sq_mix</defname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>mass_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version returning the mass eigenstate composition of the best-matching gauge eigenstate, and the summed squares of the contributions to this from the two mass eigenstates that look most like the resulting family.</para>
<para>returns family state that best matches the given mass_es fills a double with the sum of the square mixings to gauge_es of the matching family and fills the mixing of the matching gauge_es into mass eigenstates </para>
        </detaileddescription>
        <inbodydescription>
<para>get gauge_es with largest mixing to this mass_es</para>
<para>get family states for the same generation as this gauge_es</para>
<para>extractindex of mass-es and mass_ess_other from strings</para>
<para>choose mass ordering for family state which matches mass ordering of mass_es</para>
<para>subrtact 1 fgrom indices to deal with different indexing</para>
<para>get gauge_es with largest mixing to this mass_es</para>
<para>get family states for the same generation as this gauge_es</para>
<para>extractindex of mass-es and mass_ess_other from strings</para>
<para>choose mass ordering for family state which matches mass ordering of mass_es</para>
<para>subrtact 1 fgrom indices to deal with different indexing</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="670" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="670" bodyend="704" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="160" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a60b7e50f03bd6d28a638e509a696b2c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::slhahelp::family_state_mix_matrix</definition>
        <argsstring>(str type, int generation, str &amp;mass_es1, str &amp;mass_es2, const SubSpectrum &amp;mssm, double tol, str context, bool pterror)</argsstring>
        <name>family_state_mix_matrix</name>
        <qualifiedname>Gambit::slhahelp::family_state_mix_matrix</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>generation</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>mass_es1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>mass_es2</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pterror_only</declname>
        </param>
        <briefdescription>
<para>Get the family mixing matrix and corresponding mass eigenstates, then check for interfamily mixing. </para>
        </briefdescription>
        <detaileddescription>
<para>Identifies the two mass eigenstates which best match a requested family, as well as the resulting 2x2 family mixing matrix between them. The matrix has the form (Mix_{11}, Mix_{12}, Mix_{21}, Mix_{22}).</para>
<para>Version that tests internally agains a user-requested tolerance for family mixing, either raising a GAMBIT error (if pterror_only = false) or invalidating a point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="555" column="19" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="555" bodyend="575" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="171" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a927c78563ba3cb28ecff92a60c0d3bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::slhahelp::family_state_mix_matrix</definition>
        <argsstring>(str type, int generation, str &amp;mass_es1, str &amp;mass_es2, const SubSpectrum &amp;mssm)</argsstring>
        <name>family_state_mix_matrix</name>
        <qualifiedname>Gambit::slhahelp::family_state_mix_matrix</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>generation</declname>
          <defname>family</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>mass_es1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>mass_es2</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Version that leaves the test up to the user. To test that there is negligible family mixing, you can check that for both rows of the family mixing matrix, the sum of squares of elements is sufficently close to 1. That is, check Mix_{11}^2 + Mix_{12}^2 &gt; 1-tolerance &amp;&amp; Mix_{21}^2 + Mix_{22}^2 &gt; 1-tolerance. where vec is the std::vector returned by this method</para>
<para>identifies the two mass_es which best matches specified family state storing them in strings and then returns the 2by2 mixing matrix for that family state in the form (Mix_{11}, Mix_{12}, Mix_{21}, Mix_{22}) It also stores the mixing elements for the gauge states that don&apos;t belong to the correct family for this state in a std::vector The latter should have entries which are zero in absense of family mixing </para>
        </detaileddescription>
        <inbodydescription>
<para>get mass_es using one of our routines</para>
<para>need to turn type and family into a string should simplify the number of translations we do!</para>
<para>get index of right family states (ie gauge states with same family as requested family state</para>
<para>Put row 1 and row 2 into the same vector to return</para>
<para>get mass_es using one of our routines</para>
<para>need to turn type and family into a string should simplify the number of translations we do!</para>
<para>get index of right family states (ie gauge states with same family as requested family state</para>
<para>Put row 1 and row 2 into the same vector to return</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="585" column="19" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="585" bodyend="634" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="179" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a815827acea00e9417a2c1d28d3e8de94" prot="public" static="no">
        <type>std::pair&lt; int, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>typedef std::pair&lt;int,str&gt; Gambit::slhahelp::p_int_string</definition>
        <argsstring></argsstring>
        <name>p_int_string</name>
        <qualifiedname>Gambit::slhahelp::p_int_string</qualifiedname>
        <briefdescription>
<para>Typedefs for pairs that we will use in maps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/ini_functions.hpp" line="116" column="23" bodyfile="Elements/include/gambit/Elements/ini_functions.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a18a7f544a1c3ceef78413469a0dc8990" prot="public" static="no">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>typedef std::pair&lt;int,int&gt; Gambit::slhahelp::pair_ints</definition>
        <argsstring></argsstring>
        <name>pair_ints</name>
        <qualifiedname>Gambit::slhahelp::pair_ints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/ini_functions.hpp" line="117" column="23" bodyfile="Elements/include/gambit/Elements/ini_functions.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a9f3ceef21830ca10b6557f565fa10d2d" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, pair_ints &gt;</type>
        <definition>typedef std::pair&lt;str,pair_ints&gt; Gambit::slhahelp::pair_string_ints</definition>
        <argsstring></argsstring>
        <name>pair_string_ints</name>
        <qualifiedname>Gambit::slhahelp::pair_string_ints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/ini_functions.hpp" line="118" column="23" bodyfile="Elements/include/gambit/Elements/ini_functions.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a10f2311629466cb4f237d6ed98281e3c" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>typedef std::pair&lt;str,str&gt; Gambit::slhahelp::pair_strings</definition>
        <argsstring></argsstring>
        <name>pair_strings</name>
        <qualifiedname>Gambit::slhahelp::pair_strings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/ini_functions.hpp" line="119" column="23" bodyfile="Elements/include/gambit/Elements/ini_functions.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a907d4a521e709ad333b40354e0337de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a815827acea00e9417a2c1d28d3e8de94" kindref="member">p_int_string</ref> &gt;</type>
        <definition>std::map&lt; str, p_int_string &gt; Gambit::slhahelp::init_gauge_label_to_index_type</definition>
        <argsstring>()</argsstring>
        <name>init_gauge_label_to_index_type</name>
        <qualifiedname>Gambit::slhahelp::init_gauge_label_to_index_type</qualifiedname>
        <briefdescription>
<para>map from gauge eigenstate strings to string, index pairs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="285" column="14" bodyfile="Elements/src/ini_functions.cpp" bodystart="285" bodyend="315" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="122" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a6f201d86d2f579a3756c0251dfce422d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a815827acea00e9417a2c1d28d3e8de94" kindref="member">p_int_string</ref> &gt;</type>
        <definition>std::map&lt; str, p_int_string &gt; Gambit::slhahelp::init_mass_label_to_index_type</definition>
        <argsstring>()</argsstring>
        <name>init_mass_label_to_index_type</name>
        <qualifiedname>Gambit::slhahelp::init_mass_label_to_index_type</qualifiedname>
        <briefdescription>
<para>map from mass eigenstate strings to string, index pairs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="318" column="14" bodyfile="Elements/src/ini_functions.cpp" bodystart="318" bodyend="347" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="125" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a71a7b97d68dfcc495002f75abade80d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, pair_string_ints &gt;</type>
        <definition>std::map&lt; str, pair_string_ints &gt; Gambit::slhahelp::init_familystate_label</definition>
        <argsstring>()</argsstring>
        <name>init_familystate_label</name>
        <qualifiedname>Gambit::slhahelp::init_familystate_label</qualifiedname>
        <briefdescription>
<para>map to extract info from family state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="350" column="14" bodyfile="Elements/src/ini_functions.cpp" bodystart="350" bodyend="416" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="128" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1af39f4cde76f9b808205a113350168fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a815827acea00e9417a2c1d28d3e8de94" kindref="member">p_int_string</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::map&lt; p_int_string, std::vector&lt; str &gt; &gt; Gambit::slhahelp::init_type_family_to_gauge_states</definition>
        <argsstring>()</argsstring>
        <name>init_type_family_to_gauge_states</name>
        <qualifiedname>Gambit::slhahelp::init_type_family_to_gauge_states</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>map to obtain left_right gauge_pairs from state info helps us reuse other routiones with string arguments </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="420" column="15" bodyfile="Elements/src/ini_functions.cpp" bodystart="420" bodyend="436" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="132" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a2a92030a1d0d2096b79b2a578b03c77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::vector&lt; str &gt; &gt; Gambit::slhahelp::init_family_state_to_gauge_state</definition>
        <argsstring>()</argsstring>
        <name>init_family_state_to_gauge_state</name>
        <qualifiedname>Gambit::slhahelp::init_family_state_to_gauge_state</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maps directly from family string to left_right gauge_pairs helps us reuse other routines that take string arguments </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="440" column="14" bodyfile="Elements/src/ini_functions.cpp" bodystart="440" bodyend="466" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="136" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a97ee6ef1971e290a481a15bfe3c67834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::vector&lt; str &gt; &gt; Gambit::slhahelp::init_gauge_es_to_family_states</definition>
        <argsstring>()</argsstring>
        <name>init_gauge_es_to_family_states</name>
        <qualifiedname>Gambit::slhahelp::init_gauge_es_to_family_states</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maps directly from gauge_es string to familystates helps us reuse other routines that take string arguments </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="470" column="15" bodyfile="Elements/src/ini_functions.cpp" bodystart="470" bodyend="495" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="140" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1aeba1b829b60d4d1bef9ea801b7ec92c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::vector&lt; str &gt; &gt; Gambit::slhahelp::init_type_to_vec_of_mass_es</definition>
        <argsstring>()</argsstring>
        <name>init_type_to_vec_of_mass_es</name>
        <qualifiedname>Gambit::slhahelp::init_type_to_vec_of_mass_es</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>map from string representing type (ie up-squarks, down-squarks or charged sleptons) to appropriate set of mass eigenstates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="499" column="14" bodyfile="Elements/src/ini_functions.cpp" bodystart="499" bodyend="509" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="144" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="Elements_2include_2gambit_2Elements_2ini__functions_8hpp_1a236436a2ec54995573da0cff78ee2f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::vector&lt; str &gt; &gt; Gambit::slhahelp::init_type_to_vec_of_gauge_es</definition>
        <argsstring>()</argsstring>
        <name>init_type_to_vec_of_gauge_es</name>
        <qualifiedname>Gambit::slhahelp::init_type_to_vec_of_gauge_es</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>map from string representing type (ie up-squarks, down-squarks or charged sleptons) to appropriate set of gauge eigenstates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/ini_functions.cpp" line="513" column="14" bodyfile="Elements/src/ini_functions.cpp" bodystart="513" bodyend="523" declfile="Elements/include/gambit/Elements/ini_functions.hpp" declline="148" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1ac23b0cb144685b21b028522f35a2987b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::slhahelp::add_MODSEL_disclaimer</definition>
        <argsstring>(SLHAstruct &amp;slha, const str &amp;object)</argsstring>
        <name>add_MODSEL_disclaimer</name>
        <qualifiedname>Gambit::slhahelp::add_MODSEL_disclaimer</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Add a disclaimer about the absence of a MODSEL block in a generated SLHAea object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="75" column="12" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="75" bodyend="80" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="59" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1af9cea2b303b8e95b2c6dfb52a3df4a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::slhahelp::attempt_to_add_SLHA1_mixing</definition>
        <argsstring>(const str &amp;block, SLHAstruct &amp;slha, const str &amp;type, const SubSpectrum &amp;spec, double tol, str &amp;s1, str &amp;s2, bool pterror)</argsstring>
        <name>attempt_to_add_SLHA1_mixing</name>
        <qualifiedname>Gambit::slhahelp::attempt_to_add_SLHA1_mixing</qualifiedname>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pterror</declname>
        </param>
        <briefdescription>
<para>Simple helper function for adding missing SLHA1 2x2 family mixing matrices to an SLHAea object. </para>
        </briefdescription>
        <detaileddescription>
<para>Simple helper function for for adding missing SLHA1 2x2 family mixing matrices to an SLHAea object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="83" column="12" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="83" bodyend="100" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="62" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8hpp_1a156fe522d4959465765c8b38147e7384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::slhahelp::add_MSSM_spectrum_to_SLHAea</definition>
        <argsstring>(const SubSpectrum &amp;mssmspec, SLHAstruct &amp;slha, int slha_version)</argsstring>
        <name>add_MSSM_spectrum_to_SLHAea</name>
        <qualifiedname>Gambit::slhahelp::add_MSSM_spectrum_to_SLHAea</qualifiedname>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssmspec</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1a4df3d966ed9733910719e3497cb886c6" kindref="member">SLHAstruct</ref> &amp;</type>
          <declname>slha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slha_version</declname>
        </param>
        <briefdescription>
<para>Add an entire MSSM spectrum to an SLHAea object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="772" column="12" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="772" bodyend="983" declfile="Elements/include/gambit/Elements/mssm_slhahelp.hpp" declline="186" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1ae1d353b7c830a7fed014b65ebc5ef43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::slhahelp::get_Pole_Mixing_col</definition>
        <argsstring>(str type, int gauge_index, const SubSpectrum &amp;mssm)</argsstring>
        <name>get_Pole_Mixing_col</name>
        <qualifiedname>Gambit::slhahelp::get_Pole_Mixing_col</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gauge_index</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="47" column="19" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="47" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1af511b9324566a2fc21d4e71a44b2780f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::slhahelp::get_Pole_Mixing_row</definition>
        <argsstring>(str type, int mass_index, const SubSpectrum &amp;mssm)</argsstring>
        <name>get_Pole_Mixing_row</name>
        <qualifiedname>Gambit::slhahelp::get_Pole_Mixing_row</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mass_index</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Mix_{row, col}. Iterate through column index with row index fixed</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="61" column="19" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="61" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1a0c7428db684fe4fcf99e617cfe1bc694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::slhahelp::get_mass_comp_for_gauge</definition>
        <argsstring>(str gauge_es, const SubSpectrum &amp;mssm)</argsstring>
        <name>get_mass_comp_for_gauge</name>
        <qualifiedname>Gambit::slhahelp::get_mass_comp_for_gauge</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns vector representing composition of requested gauge state in terms of the slha2 mass eigenstates (~u_1 ...~u_6 etc) which is just a column in the mixing matrix </para>
        </detaileddescription>
        <inbodydescription>
<para>extract info from string via map</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="105" column="19" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="105" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1a86abbca08d0577553a477dcf492975c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::slhahelp::get_mixing_element</definition>
        <argsstring>(str gauge_es, str mass_es, const SubSpectrum &amp;mssm)</argsstring>
        <name>get_mixing_element</name>
        <qualifiedname>Gambit::slhahelp::get_mixing_element</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>routine to return mass state admixure for given gauge state in the end this is a trival routine but may help </para>
        </detaileddescription>
        <inbodydescription>
<para>extract info from maps</para>
<para>types should match but getting both allows us to throw error</para>
<para>throw exception in gambit</para>
<para>will need to add mssm object to cal method in gambit</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="121" column="14" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="121" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1a59fd497ab7073af6e6d5b5fa14dc1b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::slhahelp::get_gauge_comp_for_mass</definition>
        <argsstring>(str mass_es, const SubSpectrum &amp;mssm)</argsstring>
        <name>get_gauge_comp_for_mass</name>
        <qualifiedname>Gambit::slhahelp::get_gauge_comp_for_mass</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns vector representing composition of requested mass eigenstate in terms of the slha2 gauge eigenstates (~u_L,~c_L,...~t_R etc) which is just a row in the mixing matrix just wraps get_Pole_Mixing_row after extracting info from string </para>
        </detaileddescription>
        <inbodydescription>
<para>extract info using map</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="147" column="19" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="147" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1a98b270923bcb70f3df9478bd0f298c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_from_gauge_es</definition>
        <argsstring>(str gauge_es, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_from_gauge_es</name>
        <qualifiedname>Gambit::slhahelp::mass_es_from_gauge_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>as above but doesn&apos;t fill max_mixing or gauge_composition would have a slight efficiency saving if we didn&apos;t use wrapper and avoided skipped max_mixing entirely but at the cost of a lot of code duplication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="225" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="225" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1a0d1b15df8012767e6a31a1021f0d5a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::gauge_es_from_mass_es</definition>
        <argsstring>(str mass_es, const SubSpectrum &amp;mssm)</argsstring>
        <name>gauge_es_from_mass_es</name>
        <qualifiedname>Gambit::slhahelp::gauge_es_from_mass_es</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>as above but doesn&apos;t fill max_mixing or gauge_composition would have a slight efficiency saving if we didn&apos;t use wrapper and avoided skipped max_mixing entirely but at the cost of a lot of code duplication </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="326" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="326" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1ad5a0dc114a8622506c60a9c0bd3299ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref></type>
        <definition>sspair Gambit::slhahelp::identify_mass_ess_for_family</definition>
        <argsstring>(str type, int family, const SubSpectrum &amp;mssm)</argsstring>
        <name>identify_mass_ess_for_family</name>
        <qualifiedname>Gambit::slhahelp::identify_mass_ess_for_family</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>identify the two mass eigenstate corresponding to the approximate family states, e.g. stops (&quot;~u&quot;,3), smuons (&quot;~mu&quot;, 2) etc Note: when there is family mixing there&apos;s no good definition ~t_1, ~t_2 etc if defined as the states you get from diagonalising a 2by2 mass (sub)matrix then extensive manipulations would be required So here we identify the mass eigenstates closest to the family ones which is a better defined question when there is family mixing prsesent and more useful here anyway returns a pair of strings labling the lighter one first </para>
        </detaileddescription>
        <inbodydescription>
<para>need to turn type and family into a string need to simplify the number of translations we do.</para>
<para>finds the mass_es with the largets mixing to passed gauge_es</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="371" column="14" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="371" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1a295c926bfc2df3b80404f5f0d35fd348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::slhahelp::mass_es_closest_to_family</definition>
        <argsstring>(str familystate, const SubSpectrum &amp;mssm)</argsstring>
        <name>mass_es_closest_to_family</name>
        <qualifiedname>Gambit::slhahelp::mass_es_closest_to_family</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>familystate</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>identify the mass eigenstate corresponding to family state takes string and returns only requested state I suspect this is the more useful one </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="403" column="11" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="403" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1ac7270e533579f74b19aee30f34cb33e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; Gambit::slhahelp::get_gauge_comp_for_family_state</definition>
        <argsstring>(str familystate, str &amp;mass_es, const SubSpectrum &amp;mssm)</argsstring>
        <name>get_gauge_comp_for_family_state</name>
        <qualifiedname>Gambit::slhahelp::get_gauge_comp_for_family_state</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>familystate</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns vector with composition of closest the mass eigenstate to give family state in terms of gauge eigenstates and stores mass eigenstate in mass_es </para>
        </detaileddescription>
        <inbodydescription>
<para>extract info from strings via maps</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="437" column="19" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="437" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="mssm__slhahelp_8cpp_1aff33a84d54a5db6d0a7612d4b776b7b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::slhahelp::get_gauge_admix_for_family_state</definition>
        <argsstring>(str familystate, str gauge_es, str &amp;mass_es, const SubSpectrum &amp;mssm)</argsstring>
        <name>get_gauge_admix_for_family_state</name>
        <qualifiedname>Gambit::slhahelp::get_gauge_admix_for_family_state</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>familystate</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>gauge_es</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <declname>mass_es</declname>
        </param>
        <param>
          <type>const <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &amp;</type>
          <declname>mssm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns admix of gauge eigenstate in the mass eigenstate closest to the given family state and stores mass eigenstate in mass_es </para>
        </detaileddescription>
        <inbodydescription>
<para>types should match but getting both allows us to throw error</para>
<para>throw error in gambit</para>
<para>get mass_es using one of our routines</para>
<para>extract info from strings via maps</para>
        </inbodydescription>
        <location file="Elements/src/mssm_slhahelp.cpp" line="639" column="14" bodyfile="Elements/src/mssm_slhahelp.cpp" bodystart="639" bodyend="664"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Elements/include/gambit/Elements/ini_functions.hpp" line="112" column="3"/>
  </compounddef>
</doxygen>
