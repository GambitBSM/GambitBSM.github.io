<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1Printers_1_1BaseBaseReader" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Gambit::Printers::BaseBaseReader</compoundname>
    <derivedcompoundref refid="classGambit_1_1Printers_1_1BaseReader" prot="public" virt="non-virtual">Gambit::Printers::BaseReader</derivedcompoundref>
    <includes refid="basebaseprinter_8hpp" local="no">basebaseprinter.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1ae257d4a0b00b254a997970ce90bcc61a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Gambit::Printers::BaseBaseReader::~BaseBaseReader</definition>
        <argsstring>()</argsstring>
        <name>~BaseBaseReader</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::~BaseBaseReader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="288" column="17" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1afcde51e72062438ba2771fdc4a14d2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Gambit::Printers::BaseBaseReader::reset</definition>
        <argsstring>()=0</argsstring>
        <name>reset</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::reset</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1a81355434af3b4b2c65bc411066645ad0">reset</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1adbf3d75debc16f8fc1e125e89c790ca1">reset</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1a5fd56f91026a30f0fad4c3eb031391de">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="290" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1a22198dc2e1ab72a9499ecddd4df00920" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ulong</type>
        <definition>virtual ulong Gambit::Printers::BaseBaseReader::get_dataset_length</definition>
        <argsstring>()=0</argsstring>
        <name>get_dataset_length</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::get_dataset_length</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1ade3dc1b2869188886ac91cf197b7403f">get_dataset_length</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1ae25345df70f7eb4f8e69dfa2d592d939">get_dataset_length</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1a0a527ba9fedcb097fe598784f3421718">get_dataset_length</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="291" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1abb1d60a2d33fb382f4ab863c7d3c6ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structGambit_1_1Printers_1_1PPIDpair" kindref="compound">PPIDpair</ref></type>
        <definition>virtual PPIDpair Gambit::Printers::BaseBaseReader::get_current_point</definition>
        <argsstring>()=0</argsstring>
        <name>get_current_point</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::get_current_point</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1ad4db27c0578053c66ae1f3c20560f5eb">get_current_point</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1a68b4da687c32a81b6ee319b413274cd0">get_current_point</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1a649abedabaed07c9bb20aaacf75885bf">get_current_point</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="292" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1ab7507877c0b6c73606705df8f625501b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ulong</type>
        <definition>virtual ulong Gambit::Printers::BaseBaseReader::get_current_index</definition>
        <argsstring>()=0</argsstring>
        <name>get_current_index</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::get_current_index</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1a97aaee5bf8201b21f7bcc544eaa30e40">get_current_index</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1a3c1723cd9f231b8809317e506bdcb3c4">get_current_index</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1a2db7ad1f8daab0781fcfc6f3b0cd3d9f">get_current_index</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="293" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1a7cb964eb3edefde83d09bb04aa1c8757" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structGambit_1_1Printers_1_1PPIDpair" kindref="compound">PPIDpair</ref></type>
        <definition>virtual PPIDpair Gambit::Printers::BaseBaseReader::get_next_point</definition>
        <argsstring>()=0</argsstring>
        <name>get_next_point</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::get_next_point</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1adfcbf034edca5d26f6ad6c8de298411c">get_next_point</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1ad7eea9bf05920da8b3027016870c081b">get_next_point</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1ace84b9935bc7195ff0550e145cebd08f">get_next_point</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="294" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1a2c8a4583bd370173cb60a52ef0f95121" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Gambit::Printers::BaseBaseReader::eoi</definition>
        <argsstring>()=0</argsstring>
        <name>eoi</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::eoi</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1a30a464effe27dcdb3fe10eb700d4c1a3">eoi</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1a696d70e4473fc6cb2f9ab34da86f6ed6">eoi</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1a85fe7d934621dd01ba42fafa0576ce18">eoi</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="295" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1a1e49d01bbb40fe104ea368aebeb08d15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseBaseReader::retrieve</definition>
        <argsstring>(T &amp;out, const std::string &amp;label, const uint rank, const ulong pointID)</argsstring>
        <name>retrieve</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::retrieve</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const uint</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>const ulong</type>
          <declname>pointID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Printer-retrieve dispatch function. If a virtual function override exists for the retrieve type, info is passed on, otherwise the function call is resolved to a default function which raises an informative runtime error explaining that the type is not retrievable.</para>
<para>Note; this is not quite enough because the entries in the printer output need not be one-to-one with the printed object, e.g. vectors currently go into a series of indexed output slots. Hard for e.g. scanner plugins to know the label that they need to ask for...</para>
<para>Perhaps return a map of results matching the label? Or vector? Perhaps both in different cases...</para>
<para>Note, cannot overload based on return type, so need to use an &quot;out&quot; parameter In addition, there may not be a valid result printed for a given entry, so an extra output flag &quot;out_valid&quot; must be set to indicate whether the entry was marked invalid in the old output. Use the return value for this. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="315" column="14" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1a93ff6d2b271d5ceca9696ba60e812018" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseBaseReader::retrieve</definition>
        <argsstring>(T &amp;out, const std::string &amp;label)</argsstring>
        <name>retrieve</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::retrieve</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Overload for &apos;retrieve&apos; that uses the current point as the input for rank/pointID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="322" column="14" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="322" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1a5236e281493c3fd74ea9f5f18d9f7c3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseBaseReader::retrieve_and_print</definition>
        <argsstring>(const std::string &amp;label, BaseBasePrinter &amp;printer, const uint rank, const ulong pointID)</argsstring>
        <name>retrieve_and_print</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::retrieve_and_print</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">BaseBasePrinter</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <param>
          <type>const uint</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>const ulong</type>
          <declname>pointID</declname>
        </param>
        <briefdescription>
<para>Retrieve and directly print data to new output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Just use the same label for input and output</para>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="339" column="14" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="339" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1affe99bf2966877facb054c44df8d12eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Gambit::Printers::BaseBaseReader::retrieve_and_print</definition>
        <argsstring>(const std::string &amp;in_label, const std::string &amp;out_label, BaseBasePrinter &amp;printer, const uint rank, const ulong pointID)=0</argsstring>
        <name>retrieve_and_print</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::retrieve_and_print</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1BaseReader_1a2add1d451993e11b176088c05e7a9fce">retrieve_and_print</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>in_label</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>out_label</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">BaseBasePrinter</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <param>
          <type>const uint</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>const ulong</type>
          <declname>pointID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve and directly print data to new output, renaming the output to something new Implemented in <ref refid="classGambit_1_1Printers_1_1BasePrinter" kindref="compound">BasePrinter</ref> where complete type info is available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="347" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1aba8f9ee1b6e5e254dc8f582945f4190f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseBaseReader::retrieve_and_print</definition>
        <argsstring>(const std::string &amp;label, BaseBasePrinter &amp;printer)</argsstring>
        <name>retrieve_and_print</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::retrieve_and_print</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">BaseBasePrinter</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
<para>Overload for &apos;retrieve_and_print&apos; that uses the current point as the input for rank/pointID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Uses same label for input and output</para>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="350" column="14" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1aa8466673011461e6016f0db170b45e56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseBaseReader::retrieve_and_print</definition>
        <argsstring>(const std::string &amp;in_label, const std::string &amp;out_label, BaseBasePrinter &amp;printer)</argsstring>
        <name>retrieve_and_print</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::retrieve_and_print</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in_label</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>out_label</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">BaseBasePrinter</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
<para>As above, but allows for different input/output labels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="357" column="14" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="357" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1aa887c57cce2f67b91dc2084802f3da1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t Gambit::Printers::BaseBaseReader::get_type</definition>
        <argsstring>(const std::string &amp;label)=0</argsstring>
        <name>get_type</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::get_type</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1a62c3554fa25c7685ce4dbf83132f36d5">get_type</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1ac44dedeacef898c94413f2e1e92bcf43">get_type</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1ae0c789142d2f4849e4b9407830cfd4e9">get_type</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get type information for a data entry, i.e. defines the C++ type which this should be retrieved as, not what it is necessarily literally stored as in the output. It isn&apos;t human readable, it is just for matching retrieved data to a print type, mainly for the &apos;retrieve_and_print&apos; function. Needs to be implemented in each complete derived Reader class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="378" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1ad134a0dc7bf3d0c4ec8735ac8a6c1c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>virtual std::set&lt; std::string &gt; Gambit::Printers::BaseBaseReader::get_all_labels</definition>
        <argsstring>()=0</argsstring>
        <name>get_all_labels</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::get_all_labels</qualifiedname>
        <reimplementedby refid="classGambit_1_1Printers_1_1asciiReader_1a9791cf1c57b12f505c86c289636a74c3">get_all_labels</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1HDF5Reader_1a03e88f72d504b1bd0e1d0d489b424b3c">get_all_labels</reimplementedby>
        <reimplementedby refid="classGambit_1_1Printers_1_1SQLiteReader_1aa2b4a6305760ac199d968b8f7dad91c9">get_all_labels</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get list of output labels that can be retrieved by this printer. Needs to be implemented in each complete derived Reader class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="382" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGambit_1_1Printers_1_1BaseBaseReader_1a080c5bf796d9bb764c3abe7037957570" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Printers::BaseBaseReader::_retrieve</definition>
        <argsstring>(T &amp;, const std::string &amp;label, const uint, const ulong)</argsstring>
        <name>_retrieve</name>
        <qualifiedname>Gambit::Printers::BaseBaseReader::_retrieve</qualifiedname>
        <param>
          <type>T &amp;</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const</type>
          <declname>uint</declname>
        </param>
        <param>
          <type>const</type>
          <declname>ulong</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default _retrieve function. Throws an error if no virtual function matching the type of the attempted retrieval is found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="389" column="14" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="389" bodyend="403"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Printer READ interface For reading data back <emphasis>into</emphasis> <ref refid="namespaceGambit" kindref="compound">Gambit</ref> from a printer output file. This is mainly designed for performing &quot;reweighting&quot; of scans, e.g. loading up previously scanned points in order to recompute some new observables or likelihoods.</para>
<para>It is pretty hard to permit generic read-in of ALL data, so for now I will focus on just getting the parameter data. If we read in other data we will have to do some gnarly stuff like automatically wrap it into functors, and to appropriate capabilities etc, in order for it to be usable in other in other calculations. So for now, the idea will simply be to take the parameter values and recompute everything anew that is needed for calculating the new likelihoods or whatever. Otherwise it is kind of a nightmare to e.g. reconstruct a <ref refid="classGambit_1_1Spectrum" kindref="compound">Spectrum</ref> object from printer data, would need special module functions and so on that know how to put all the data back together. I guess it is possible if we give module writers access to the printer read interface so that they can do this task themselves... but will leave this aside for now. So, need:<orderedlist>
<listitem><para>some way to iterate through printer output</para>
</listitem><listitem><para>a generic function that can read in a particular entry, knowing e.g. the following: <programlisting><codeline><highlight class="normal">Column<sp/>6:<sp/>#NormalDist_parameters<sp/>@NormalDist::primary_parameters::mu</highlight></codeline>
</programlisting> and can put it back into some <ref refid="namespaceGambit" kindref="compound">Gambit</ref> object, e.g. Parameters: NormalDist: mu: sigma:</para>
<para>I guess this latter part is scannerbits responsibility, i.e. it will have the parameter object and need to fill it with numbers that it gets from the printer. <verbatim>     functor (model) name    parameter name
</verbatim> str key = act_it-&gt;first + &quot;::&quot; + *par_it; </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Gambit::Printers::BaseBaseReader</label>
        <link refid="classGambit_1_1Printers_1_1BaseBaseReader"/>
      </node>
      <node id="2">
        <label>Gambit::Printers::BaseReader</label>
        <link refid="classGambit_1_1Printers_1_1BaseReader"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Gambit::Printers::HDF5Reader</label>
        <link refid="classGambit_1_1Printers_1_1HDF5Reader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Gambit::Printers::SQLiteReader</label>
        <link refid="classGambit_1_1Printers_1_1SQLiteReader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Gambit::Printers::asciiReader</label>
        <link refid="classGambit_1_1Printers_1_1asciiReader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="Printers/include/gambit/Printers/basebaseprinter.hpp" line="285" column="5" bodyfile="Printers/include/gambit/Printers/basebaseprinter.hpp" bodystart="286" bodyend="429"/>
    <listofallmembers>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a080c5bf796d9bb764c3abe7037957570" prot="protected" virt="non-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>_retrieve</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a2c8a4583bd370173cb60a52ef0f95121" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>eoi</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1ad134a0dc7bf3d0c4ec8735ac8a6c1c6c" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>get_all_labels</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1ab7507877c0b6c73606705df8f625501b" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>get_current_index</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1abb1d60a2d33fb382f4ab863c7d3c6ed2" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>get_current_point</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a22198dc2e1ab72a9499ecddd4df00920" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>get_dataset_length</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a7cb964eb3edefde83d09bb04aa1c8757" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>get_next_point</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1aa887c57cce2f67b91dc2084802f3da1d" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>get_type</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1afcde51e72062438ba2771fdc4a14d2a3" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>reset</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a1e49d01bbb40fe104ea368aebeb08d15" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>retrieve</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a93ff6d2b271d5ceca9696ba60e812018" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>retrieve</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1a5236e281493c3fd74ea9f5f18d9f7c3d" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1affe99bf2966877facb054c44df8d12eb" prot="public" virt="pure-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1aba8f9ee1b6e5e254dc8f582945f4190f" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1aa8466673011461e6016f0db170b45e56" prot="public" virt="non-virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>retrieve_and_print</name></member>
      <member refid="classGambit_1_1Printers_1_1BaseBaseReader_1ae257d4a0b00b254a997970ce90bcc61a" prot="public" virt="virtual"><scope>Gambit::Printers::BaseBaseReader</scope><name>~BaseBaseReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
