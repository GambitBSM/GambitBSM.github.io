<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1module__functor__common" kind="class" language="C++" prot="public">
    <compoundname>Gambit::module_functor_common</compoundname>
    <basecompoundref refid="classGambit_1_1functor" prot="public" virt="non-virtual">Gambit::functor</basecompoundref>
    <derivedcompoundref refid="classGambit_1_1module__functor" prot="public" virt="non-virtual">Gambit::module_functor&lt; ModelParameters &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1module__functor" prot="public" virt="non-virtual">Gambit::module_functor&lt; TYPE &gt;</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1module__functor_3_01void_01_4" prot="public" virt="non-virtual">Gambit::module_functor&lt; void &gt;</derivedcompoundref>
    <includes refid="functors_8hpp" local="no">functors.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a7a1adb7a3d6c6868d06025ba45264593" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::myTimingPrintFlag</definition>
        <argsstring></argsstring>
        <name>myTimingPrintFlag</name>
        <qualifiedname>Gambit::module_functor_common::myTimingPrintFlag</qualifiedname>
        <briefdescription>
<para>Flag to select whether or not the timing data for this function&apos;s execution should be printed;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="600" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1aa47b3d140ceec21755b3cf50cffece49" prot="protected" static="no" mutable="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock &gt; *</type>
        <definition>std::chrono::time_point&lt;std::chrono::system_clock&gt;* Gambit::module_functor_common::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <qualifiedname>Gambit::module_functor_common::start</qualifiedname>
        <briefdescription>
<para>Beginning and end timing points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="612" column="31" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1aba38e9d289eb88fd6b584fde30b1984e" prot="protected" static="no" mutable="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock &gt; *</type>
        <definition>std::chrono::time_point&lt;std::chrono::system_clock&gt; * Gambit::module_functor_common::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <qualifiedname>Gambit::module_functor_common::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="612" column="37" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a366392aa6096192a76ee894d68aa85da" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::point_exception_raised</definition>
        <argsstring></argsstring>
        <name>point_exception_raised</name>
        <qualifiedname>Gambit::module_functor_common::point_exception_raised</qualifiedname>
        <briefdescription>
<para>A flag indicating whether or not this functor has invalidated the current point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="615" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a85d73ca93af7755cdfc053f015a8cf98" prot="protected" static="no" mutable="no">
        <type><ref refid="classGambit_1_1invalid__point__exception" kindref="compound">invalid_point_exception</ref></type>
        <definition>invalid_point_exception Gambit::module_functor_common::raised_point_exception</definition>
        <argsstring></argsstring>
        <name>raised_point_exception</name>
        <qualifiedname>Gambit::module_functor_common::raised_point_exception</qualifiedname>
        <briefdescription>
<para>An exception raised because this functor has invalidated the current point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="618" column="31" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a73113fff7fbc6a32a1c871dc3e688eeb" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Gambit::module_functor_common::runtime_average</definition>
        <argsstring></argsstring>
        <name>runtime_average</name>
        <qualifiedname>Gambit::module_functor_common::runtime_average</qualifiedname>
        <briefdescription>
<para>Averaged runtime in ns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="621" column="14" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a77c216bbfeb9d09928b3ada8973447c7" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Gambit::module_functor_common::fadeRate</definition>
        <argsstring></argsstring>
        <name>fadeRate</name>
        <qualifiedname>Gambit::module_functor_common::fadeRate</qualifiedname>
        <briefdescription>
<para>Fade rate for average runtime. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="624" column="14" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a586f59a87b95b5cc43bfa8939d51e71f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Gambit::module_functor_common::pInvalidation</definition>
        <argsstring></argsstring>
        <name>pInvalidation</name>
        <qualifiedname>Gambit::module_functor_common::pInvalidation</qualifiedname>
        <briefdescription>
<para>Probability that functors invalidates point in model parameter space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="627" column="14" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1aa948b2e50700e9c0d414090064cbaf35" prot="protected" static="no" mutable="no">
        <type>bool *</type>
        <definition>bool* Gambit::module_functor_common::needs_recalculating</definition>
        <argsstring></argsstring>
        <name>needs_recalculating</name>
        <qualifiedname>Gambit::module_functor_common::needs_recalculating</qualifiedname>
        <briefdescription>
<para>Needs recalculating or not? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="630" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a11a55f0dee712fd09143749711bf345d" prot="protected" static="no" mutable="no">
        <type>bool *</type>
        <definition>bool* Gambit::module_functor_common::already_printed</definition>
        <argsstring></argsstring>
        <name>already_printed</name>
        <qualifiedname>Gambit::module_functor_common::already_printed</qualifiedname>
        <briefdescription>
<para>Has result already been sent to the printer? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="633" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ac41e86a381b4cd922e4125e3572c5174" prot="protected" static="no" mutable="no">
        <type>bool *</type>
        <definition>bool* Gambit::module_functor_common::already_printed_timing</definition>
        <argsstring></argsstring>
        <name>already_printed_timing</name>
        <qualifiedname>Gambit::module_functor_common::already_printed_timing</qualifiedname>
        <briefdescription>
<para>Has timing data already been sent to the printer? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="636" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ac211d5483ebf9d71dcf2bed1cae9781e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::iCanManageLoops</definition>
        <argsstring></argsstring>
        <name>iCanManageLoops</name>
        <qualifiedname>Gambit::module_functor_common::iCanManageLoops</qualifiedname>
        <briefdescription>
<para>Flag indicating whether this function can manage a loop over other functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="639" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a2fc9ca343ed1c197b4c246779bbd52df" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::myLoopIsDone</definition>
        <argsstring></argsstring>
        <name>myLoopIsDone</name>
        <qualifiedname>Gambit::module_functor_common::myLoopIsDone</qualifiedname>
        <briefdescription>
<para>Flag indicating whether this function is ready to finish its loop (only relevant if iCanManageLoops = true) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="642" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a0c61f250c2879b7a80e3fbb2b6c6dcff" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::iRunNested</definition>
        <argsstring></argsstring>
        <name>iRunNested</name>
        <qualifiedname>Gambit::module_functor_common::iRunNested</qualifiedname>
        <briefdescription>
<para>Flag indicating whether this function can run nested in a loop over functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="645" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ae737ea2b40a195003e3eafa08a2e24ac" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::module_functor_common::myLoopManagerCapability</definition>
        <argsstring></argsstring>
        <name>myLoopManagerCapability</name>
        <qualifiedname>Gambit::module_functor_common::myLoopManagerCapability</qualifiedname>
        <briefdescription>
<para>Capability of a function that mangages a loop that this function can run inside of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="648" column="11" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a5a1e44605d6bfc9d43cbe16ac980fdcb" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::module_functor_common::myLoopManagerType</definition>
        <argsstring></argsstring>
        <name>myLoopManagerType</name>
        <qualifiedname>Gambit::module_functor_common::myLoopManagerType</qualifiedname>
        <briefdescription>
<para>Capability of a function that mangages a loop that this function can run inside of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="650" column="11" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a8aa8ac184455c66978aba66b88de3344" prot="protected" static="no" mutable="no">
        <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
        <definition>functor* Gambit::module_functor_common::myLoopManager</definition>
        <argsstring></argsstring>
        <name>myLoopManager</name>
        <qualifiedname>Gambit::module_functor_common::myLoopManager</qualifiedname>
        <briefdescription>
<para>Pointer to the functor that mangages the loop that this function runs inside of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="652" column="15" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1afa8e12fe2b00861c82adcb174328589a" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classGambit_1_1functor" kindref="compound">functor</ref> * &gt;</type>
        <definition>std::vector&lt;functor*&gt; Gambit::module_functor_common::myNestedFunctorList</definition>
        <argsstring></argsstring>
        <name>myNestedFunctorList</name>
        <qualifiedname>Gambit::module_functor_common::myNestedFunctorList</qualifiedname>
        <briefdescription>
<para>Vector of functors that have been set up to run nested within this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="655" column="19" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a47a97cb3505484092de8e06cd397ba49" prot="protected" static="no" mutable="no">
        <type>long long *</type>
        <definition>long long* Gambit::module_functor_common::myCurrentIteration</definition>
        <argsstring></argsstring>
        <name>myCurrentIteration</name>
        <qualifiedname>Gambit::module_functor_common::myCurrentIteration</qualifiedname>
        <briefdescription>
<para>Pointer to counters for iterations of nested functor loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="658" column="17" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a9ab2ee1a2b0d96d437a4c5e6d2cec739" prot="protected" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Gambit::module_functor_common::globlMaxThreads</definition>
        <argsstring></argsstring>
        <name>globlMaxThreads</name>
        <qualifiedname>Gambit::module_functor_common::globlMaxThreads</qualifiedname>
        <briefdescription>
<para>Maximum number of OpenMP threads this MPI process is permitted to launch in total. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="661" column="17" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ad34c2ea06524530739b1753e7d06423a" prot="protected" static="no" mutable="no">
        <type>std::set&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::set&lt;str&gt; Gambit::module_functor_common::myGroups</definition>
        <argsstring></argsstring>
        <name>myGroups</name>
        <qualifiedname>Gambit::module_functor_common::myGroups</qualifiedname>
        <briefdescription>
<para>Internal list of backend groups that this functor&apos;s requirements fall into. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="664" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a093c06a4cad21400d4f46c89b6d302b1" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::map&lt;str,str&gt; Gambit::module_functor_common::chosenReqsFromGroups</definition>
        <argsstring></argsstring>
        <name>chosenReqsFromGroups</name>
        <qualifiedname>Gambit::module_functor_common::chosenReqsFromGroups</qualifiedname>
        <briefdescription>
<para>Map from groups to backend reqs, indicating which backend req has been activated for which backend group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="667" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a1e9bed0318723d34f73afc954c0d7d05" prot="protected" static="no" mutable="no">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt;sspair&gt; Gambit::module_functor_common::myBackendReqs</definition>
        <argsstring></argsstring>
        <name>myBackendReqs</name>
        <qualifiedname>Gambit::module_functor_common::myBackendReqs</qualifiedname>
        <briefdescription>
<para>Set of all backend requirement-type string pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="670" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a591c7ce963c69d51b331eb69fbe5a4ba" prot="protected" static="no" mutable="no">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt;sspair&gt; Gambit::module_functor_common::myResolvableBackendReqs</definition>
        <argsstring></argsstring>
        <name>myResolvableBackendReqs</name>
        <qualifiedname>Gambit::module_functor_common::myResolvableBackendReqs</qualifiedname>
        <briefdescription>
<para>Set of all backend requirement-type string pairs currently available for resolution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="673" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a0b571e85b889da6d7173bae0473b2018" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &gt;</type>
        <definition>std::map&lt;str,std::set&lt;sspair&gt; &gt; Gambit::module_functor_common::myGroupedBackendReqs</definition>
        <argsstring></argsstring>
        <name>myGroupedBackendReqs</name>
        <qualifiedname>Gambit::module_functor_common::myGroupedBackendReqs</qualifiedname>
        <briefdescription>
<para>Set of backend requirement-type string pairs for specific backend groups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="676" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a1d2b89105961ad780787a688bd468432" prot="protected" static="no" mutable="no">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt;sspair&gt; Gambit::module_functor_common::myDependencies</definition>
        <argsstring></argsstring>
        <name>myDependencies</name>
        <qualifiedname>Gambit::module_functor_common::myDependencies</qualifiedname>
        <briefdescription>
<para>Vector of dependency-type string pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="679" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1aa11aee2c3fd4fe472034df285aadbef6" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::map&lt;str,str&gt; Gambit::module_functor_common::myConditionalDependencies</definition>
        <argsstring></argsstring>
        <name>myConditionalDependencies</name>
        <qualifiedname>Gambit::module_functor_common::myConditionalDependencies</qualifiedname>
        <briefdescription>
<para>Map of conditional dependencies to their types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="682" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1adc22bfb0f06cf58e6f4469d793d88583" prot="protected" static="no" mutable="no">
        <type>std::map&lt; std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;, std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &gt;</type>
        <definition>std::map&lt; std::vector&lt;str&gt;, std::set&lt;sspair&gt; &gt; Gambit::module_functor_common::myBackendConditionalDependencies</definition>
        <argsstring></argsstring>
        <name>myBackendConditionalDependencies</name>
        <qualifiedname>Gambit::module_functor_common::myBackendConditionalDependencies</qualifiedname>
        <briefdescription>
<para>Map from (vector with 4 strings: backend req, type, backend, version) to (set of {conditional dependency-type} pairs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="685" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a70be0fd7b2530e87a26e1caac4b400c9" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::set&lt;sspair&gt; &gt; Gambit::module_functor_common::myModelConditionalDependencies</definition>
        <argsstring></argsstring>
        <name>myModelConditionalDependencies</name>
        <qualifiedname>Gambit::module_functor_common::myModelConditionalDependencies</qualifiedname>
        <briefdescription>
<para>Map from models to (set of {conditional dependency-type} pairs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="688" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a24327d20eeb4e07722e81856e5c613d8" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::set&lt;sspair&gt; &gt; Gambit::module_functor_common::myModelConditionalBackendReqs</definition>
        <argsstring></argsstring>
        <name>myModelConditionalBackendReqs</name>
        <qualifiedname>Gambit::module_functor_common::myModelConditionalBackendReqs</qualifiedname>
        <briefdescription>
<para>Map from models to (set of {conditional backend requirement-type} pairs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="691" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1aeb3b1f7a66c83d117342496b6ad0229f" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, bool &gt;</type>
        <definition>std::map&lt;str, bool&gt; Gambit::module_functor_common::activeModelFlags</definition>
        <argsstring></argsstring>
        <name>activeModelFlags</name>
        <qualifiedname>Gambit::module_functor_common::activeModelFlags</qualifiedname>
        <briefdescription>
<para>Map from known models to flags indicating if they are activated or not (known = allowed, in allowed groups or conditions for conditional dependencies) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="694" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a65b4f950efdaca6b360b131b5b8a0ebf" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref>, void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)&gt;</type>
        <definition>std::map&lt;sspair, void(*)(functor*, module_functor_common*)&gt; Gambit::module_functor_common::dependency_map</definition>
        <argsstring></argsstring>
        <name>dependency_map</name>
        <qualifiedname>Gambit::module_functor_common::dependency_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map from (dependency-type pairs) to (pointers to templated void functions that set dependency functor pointers) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="698" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a2bae29be67acbe6831b991e0f3b8f183" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref>, <ref refid="classGambit_1_1functor" kindref="compound">functor</ref> * &gt;</type>
        <definition>std::map&lt;sspair, functor*&gt; Gambit::module_functor_common::dependency_functor_map</definition>
        <argsstring></argsstring>
        <name>dependency_functor_map</name>
        <qualifiedname>Gambit::module_functor_common::dependency_functor_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map from (dependency-type pairs) to pointers to functors used to resolve them that set dependency functor pointers) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="702" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a786bc4ed0cca65e2c916836740337f17" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::map&lt;str, str&gt; Gambit::module_functor_common::backendreq_types</definition>
        <argsstring></argsstring>
        <name>backendreq_types</name>
        <qualifiedname>Gambit::module_functor_common::backendreq_types</qualifiedname>
        <briefdescription>
<para>Map from backend requirements to their required types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="705" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ae23abdb30edf89228b296b707bc4321f" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref>, <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::map&lt;sspair, str&gt; Gambit::module_functor_common::backendreq_groups</definition>
        <argsstring></argsstring>
        <name>backendreq_groups</name>
        <qualifiedname>Gambit::module_functor_common::backendreq_groups</qualifiedname>
        <briefdescription>
<para>Map from backend requirements to their designated groups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="708" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ad99f3dba2e2045dfddd88a6d9b60e540" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref>, std::set&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::map&lt;sspair, std::set&lt;str&gt; &gt; Gambit::module_functor_common::backendreq_tagmap</definition>
        <argsstring></argsstring>
        <name>backendreq_tagmap</name>
        <qualifiedname>Gambit::module_functor_common::backendreq_tagmap</qualifiedname>
        <briefdescription>
<para>Map from backend requirements to their rule tags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="711" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ae7f6eb5b0b45de63ae3db562420126ed" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref>, void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *)&gt;</type>
        <definition>std::map&lt;sspair, void(*)(functor*)&gt; Gambit::module_functor_common::backendreq_map</definition>
        <argsstring></argsstring>
        <name>backendreq_map</name>
        <qualifiedname>Gambit::module_functor_common::backendreq_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map from (backend requirement-type pairs) to (pointers to templated void functions that set backend requirement functor pointers) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="715" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a15ba740d630d04935b9e9e1376bf0b8a" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref>, std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &gt;</type>
        <definition>std::map&lt; sspair, std::set&lt;sspair&gt; &gt; Gambit::module_functor_common::permitted_map</definition>
        <argsstring></argsstring>
        <name>permitted_map</name>
        <qualifiedname>Gambit::module_functor_common::permitted_map</qualifiedname>
        <briefdescription>
<para>Map from (backend requirement-type pairs) to (set of permitted {backend-version} pairs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="718" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a67831f6f58d5b081b2a08a5f7e7c557c" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::set&lt;sspair&gt; &gt; Gambit::module_functor_common::myForcedMatches</definition>
        <argsstring></argsstring>
        <name>myForcedMatches</name>
        <qualifiedname>Gambit::module_functor_common::myForcedMatches</qualifiedname>
        <briefdescription>
<para>Map from tags to sets of matching (backend requirement-type pairs) that are forced to use the same backend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="721" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a2897f00892b6a5470246d1557f251e6b" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::set&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
        <definition>std::map&lt; str, std::set&lt;str&gt; &gt; Gambit::module_functor_common::required_classloading_backends</definition>
        <argsstring></argsstring>
        <name>required_classloading_backends</name>
        <qualifiedname>Gambit::module_functor_common::required_classloading_backends</qualifiedname>
        <briefdescription>
<para>Map from required classloading backends to their versions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="724" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a0fd8feffa79f12d89097f5c45fc9eb18" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::vector&lt;str&gt; Gambit::module_functor_common::missing_backends</definition>
        <argsstring></argsstring>
        <name>missing_backends</name>
        <qualifiedname>Gambit::module_functor_common::missing_backends</qualifiedname>
        <briefdescription>
<para>Vector of required backends currently missing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="727" column="19" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="727" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ae819618cc7c2ad5eb32d18464235d40b" prot="protected" static="no" mutable="no">
        <type>timespec</type>
        <definition>timespec Gambit::module_functor_common::tp</definition>
        <argsstring></argsstring>
        <name>tp</name>
        <qualifiedname>Gambit::module_functor_common::tp</qualifiedname>
        <briefdescription>
<para>Internal timespec object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="730" column="16" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1a9362538d0fec38166b8baabd51272621" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Gambit::module_functor_common::myLogTag</definition>
        <argsstring></argsstring>
        <name>myLogTag</name>
        <qualifiedname>Gambit::module_functor_common::myLogTag</qualifiedname>
        <briefdescription>
<para>Integer LogTag, for tagging log messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="733" column="11" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1module__functor__common_1ab3d4cb6d21dd67b058af4e70bc4a4c45" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::signal_mode_locked</definition>
        <argsstring></argsstring>
        <name>signal_mode_locked</name>
        <qualifiedname>Gambit::module_functor_common::signal_mode_locked</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>While locked, prevent this function switching off threadsafe* emergency signal handling. *The emergency signal handling cannot be made completely threadsafe; it can still cause lockups and memory corruption if it occurs at an inopportune time. &quot;soft&quot; shutdown is always preferable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="742" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="742" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a3f6b2f655ca81171249e9f3655825a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::module_functor_common::module_functor_common</definition>
        <argsstring>(str, str, str, str, Models::ModelFunctorClaw &amp;)</argsstring>
        <name>module_functor_common</name>
        <qualifiedname>Gambit::module_functor_common::module_functor_common</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>func_name</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>func_capability</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>result_type</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>origin_name</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Models_1_1ModelFunctorClaw" kindref="compound">Models::ModelFunctorClaw</ref> &amp;</type>
          <defname>claw</defname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="418" column="7" bodyfile="Elements/src/functors.cpp" bodystart="659" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1af7b89032cf7c7392bb9566609b699f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Gambit::module_functor_common::~module_functor_common</definition>
        <argsstring>()</argsstring>
        <name>~module_functor_common</name>
        <qualifiedname>Gambit::module_functor_common::~module_functor_common</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="421" column="15" bodyfile="Elements/src/functors.cpp" bodystart="691" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a7f4ecc772af822e6bddf9edf95ab2a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gambit::module_functor_common::getRuntimeAverage</definition>
        <argsstring>()</argsstring>
        <name>getRuntimeAverage</name>
        <qualifiedname>Gambit::module_functor_common::getRuntimeAverage</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ac79cd5e35a61931feee5c00e5eafec3b">getRuntimeAverage</reimplements>
        <briefdescription>
<para>Getter for averaged runtime. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="424" column="14" bodyfile="Elements/src/functors.cpp" bodystart="716" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a4e34fc2cf2c9932a6794eb9baf554e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>Gambit::module_functor_common::reset</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1aef1a95ee87c3be96dbe515cc3105df1f">reset</reimplements>
        <briefdescription>
<para>Reset functor. </para>
        </briefdescription>
        <detaileddescription>
<para>Reset functor for all threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="427" column="12" bodyfile="Elements/src/functors.cpp" bodystart="734" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a946e0a1ad997d417dd40160a3bba603b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::notifyOfInvalidation</definition>
        <argsstring>(const str &amp;)</argsstring>
        <name>notifyOfInvalidation</name>
        <qualifiedname>Gambit::module_functor_common::notifyOfInvalidation</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a109636f48b8cb43ea184fb676cbedf39">notifyOfInvalidation</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
<para>Tell the functor that it invalidated the current point in model space, pass a message explaining why, and throw an exception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="430" column="12" bodyfile="Elements/src/functors.cpp" bodystart="756" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1abfa224375716da6b911f18e8cbe72ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gambit::module_functor_common::getInvalidationRate</definition>
        <argsstring>()</argsstring>
        <name>getInvalidationRate</name>
        <qualifiedname>Gambit::module_functor_common::getInvalidationRate</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a16e487c93d71375ad93223f836493dd3">getInvalidationRate</reimplements>
        <briefdescription>
<para>Getter for invalidation rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="433" column="14" bodyfile="Elements/src/functors.cpp" bodystart="790" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a80654414bb5bb5ae82f6fc37080dc858" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setFadeRate</definition>
        <argsstring>(double)</argsstring>
        <name>setFadeRate</name>
        <qualifiedname>Gambit::module_functor_common::setFadeRate</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a25ceb7a5540a94d11695f55c08a35fa3">setFadeRate</reimplements>
        <param>
          <type>double</type>
          <defname>new_rate</defname>
        </param>
        <briefdescription>
<para>Setter for the fade rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="436" column="12" bodyfile="Elements/src/functors.cpp" bodystart="796" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ac689bbfda7429204bc0e07a547116e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setTimingPrintRequirement</definition>
        <argsstring>(bool)</argsstring>
        <name>setTimingPrintRequirement</name>
        <qualifiedname>Gambit::module_functor_common::setTimingPrintRequirement</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ade7117c926fd3e16594a8a38aa41479f">setTimingPrintRequirement</reimplements>
        <param>
          <type>bool</type>
          <defname>flag</defname>
        </param>
        <briefdescription>
<para>Setter for indicating if the timing data for this function&apos;s execution should be printed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="439" column="12" bodyfile="Elements/src/functors.cpp" bodystart="722" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a834e0932dcd86d0ad0a19d30a83e74cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::requiresTimingPrinting</definition>
        <argsstring>() const</argsstring>
        <name>requiresTimingPrinting</name>
        <qualifiedname>Gambit::module_functor_common::requiresTimingPrinting</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a5d1ae4ff6f5e0be7e16fb15938d9387f">requiresTimingPrinting</reimplements>
        <briefdescription>
<para>Getter indicating if the timing data for this function&apos;s execution should be printed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="442" column="12" bodyfile="Elements/src/functors.cpp" bodystart="728" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1af6cabe1d2f178ed6560ae1c87802a82f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::getActiveModelFlag</definition>
        <argsstring>(str)</argsstring>
        <name>getActiveModelFlag</name>
        <qualifiedname>Gambit::module_functor_common::getActiveModelFlag</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model</defname>
        </param>
        <briefdescription>
<para>Indicate whether or not a known model is activated or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="445" column="12" bodyfile="Elements/src/functors.cpp" bodystart="802" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ae25199af41de21dcb3e20b76233156ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>safe_ptr&lt; str &gt; Gambit::module_functor_common::getChosenReqFromGroup</definition>
        <argsstring>(str)</argsstring>
        <name>getChosenReqFromGroup</name>
        <qualifiedname>Gambit::module_functor_common::getChosenReqFromGroup</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>group</defname>
        </param>
        <briefdescription>
<para>Return a safe pointer to a string indicating which backend requirement has been activated for a given backend group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="448" column="16" bodyfile="Elements/src/functors.cpp" bodystart="817" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a34e131eb232d93687583788c49295a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::iterate</definition>
        <argsstring>(long long iteration)</argsstring>
        <name>iterate</name>
        <qualifiedname>Gambit::module_functor_common::iterate</qualifiedname>
        <param>
          <type>long long</type>
          <declname>iteration</declname>
        </param>
        <briefdescription>
<para>Execute a single iteration in the loop managed by this functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="451" column="20" bodyfile="Elements/src/functors.cpp" bodystart="824" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a1c814da54654e19370708d98bbe07f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::init_myCurrentIteration_if_NULL</definition>
        <argsstring>()</argsstring>
        <name>init_myCurrentIteration_if_NULL</name>
        <qualifiedname>Gambit::module_functor_common::init_myCurrentIteration_if_NULL</qualifiedname>
        <briefdescription>
<para>Initialise the array holding the current iteration(s) of this functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="454" column="20" bodyfile="Elements/src/functors.cpp" bodystart="857" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1aea40fae672492b12ab0fe2cd3e270146" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setIteration</definition>
        <argsstring>(long long iteration)</argsstring>
        <name>setIteration</name>
        <qualifiedname>Gambit::module_functor_common::setIteration</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a80c9104d6d5d7a7b8af078f50b06c5f4">setIteration</reimplements>
        <param>
          <type>long long</type>
          <declname>iteration</declname>
        </param>
        <briefdescription>
<para>Setter for setting the iteration number in the loop in which this functor runs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="456" column="20" bodyfile="Elements/src/functors.cpp" bodystart="917" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a8015da108de37fd11580dbde2537a5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classGambit_1_1omp__safe__ptr" kindref="compound">omp_safe_ptr</ref>&lt; long long &gt;</type>
        <definition>omp_safe_ptr&lt; long long &gt; Gambit::module_functor_common::iterationPtr</definition>
        <argsstring>()</argsstring>
        <name>iterationPtr</name>
        <qualifiedname>Gambit::module_functor_common::iterationPtr</qualifiedname>
        <briefdescription>
<para>Return a safe pointer to the iteration number in the loop in which this functor runs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="458" column="28" bodyfile="Elements/src/functors.cpp" bodystart="924" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a3ea59e1326629dfbc1f31a8b2921d6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setCanBeLoopManager</definition>
        <argsstring>(bool canManage)</argsstring>
        <name>setCanBeLoopManager</name>
        <qualifiedname>Gambit::module_functor_common::setCanBeLoopManager</qualifiedname>
        <param>
          <type>bool</type>
          <declname>canManage</declname>
        </param>
        <briefdescription>
<para>Setter for specifying whether this is permitted to be a manager functor, which runs other functors nested in a loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="461" column="20" bodyfile="Elements/src/functors.cpp" bodystart="931" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a45ee081397264cff4fae5d90a468e15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Gambit::module_functor_common::canBeLoopManager</definition>
        <argsstring>()</argsstring>
        <name>canBeLoopManager</name>
        <qualifiedname>Gambit::module_functor_common::canBeLoopManager</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ac271e5cc6323f96fbd9aeb3ba8ba3bab">canBeLoopManager</reimplements>
        <briefdescription>
<para>Getter for revealing whether this is permitted to be a manager functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="463" column="20" bodyfile="Elements/src/functors.cpp" bodystart="933" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1aad1288bedc0ae2a3080d66e9ac58c80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setLoopManagerCapType</definition>
        <argsstring>(str cap, str t)</argsstring>
        <name>setLoopManagerCapType</name>
        <qualifiedname>Gambit::module_functor_common::setLoopManagerCapType</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>cap</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Setter for specifying the capability required of a manager functor, if it is to run this functor nested in a loop. </para>
        </briefdescription>
        <detaileddescription>
<para>Setter for specifying the capability and type required of a manager functor, if it is to run this functor nested in a loop. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="466" column="20" bodyfile="Elements/src/functors.cpp" bodystart="936" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a76068bbae795db5b319da3b6445b9e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::module_functor_common::loopManagerCapability</definition>
        <argsstring>()</argsstring>
        <name>loopManagerCapability</name>
        <qualifiedname>Gambit::module_functor_common::loopManagerCapability</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a8605c698d5d7e55b8a2bd47af9c466cb">loopManagerCapability</reimplements>
        <briefdescription>
<para>Getter for revealing the required capability of the wrapped function&apos;s loop manager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="468" column="19" bodyfile="Elements/src/functors.cpp" bodystart="943" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1af67a261a00be448fabac30d9c0c0011b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::module_functor_common::loopManagerType</definition>
        <argsstring>()</argsstring>
        <name>loopManagerType</name>
        <qualifiedname>Gambit::module_functor_common::loopManagerType</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ac9ce89a8ae79c6307e29596549d8ee41">loopManagerType</reimplements>
        <briefdescription>
<para>Getter for revealing the required type of the wrapped function&apos;s loop manager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="470" column="19" bodyfile="Elements/src/functors.cpp" bodystart="945" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a744fa740688d36d4e460b09f189b8a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::module_functor_common::loopManagerName</definition>
        <argsstring>()</argsstring>
        <name>loopManagerName</name>
        <qualifiedname>Gambit::module_functor_common::loopManagerName</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a259892482655c006e7f278bbdcb837a1">loopManagerName</reimplements>
        <briefdescription>
<para>Getter for revealing the name of the wrapped function&apos;s assigned loop manager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="472" column="19" bodyfile="Elements/src/functors.cpp" bodystart="947" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a1b0a360cfb0cd36dbcc2999c55a39537" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
        <definition>str Gambit::module_functor_common::loopManagerOrigin</definition>
        <argsstring>()</argsstring>
        <name>loopManagerOrigin</name>
        <qualifiedname>Gambit::module_functor_common::loopManagerOrigin</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a3cc77fbfc1442a29d6453da3add9acf3">loopManagerOrigin</reimplements>
        <briefdescription>
<para>Getter for revealing the module of the wrapped function&apos;s assigned loop manager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="474" column="19" bodyfile="Elements/src/functors.cpp" bodystart="949" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a407bb29ab75b62c67df4f9ad8f54c6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::breakLoopFromManagedFunctor</definition>
        <argsstring>()</argsstring>
        <name>breakLoopFromManagedFunctor</name>
        <qualifiedname>Gambit::module_functor_common::breakLoopFromManagedFunctor</qualifiedname>
        <briefdescription>
<para>Tell the manager of the loop in which this functor runs that it is time to break the loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="477" column="20" bodyfile="Elements/src/functors.cpp" bodystart="877" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a426ba14422f4ec0437347df714aecc81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classGambit_1_1safe__ptr" kindref="compound">safe_ptr</ref>&lt; bool &gt;</type>
        <definition>safe_ptr&lt; bool &gt; Gambit::module_functor_common::loopIsDone</definition>
        <argsstring>()</argsstring>
        <name>loopIsDone</name>
        <qualifiedname>Gambit::module_functor_common::loopIsDone</qualifiedname>
        <briefdescription>
<para>Return a safe pointer to the flag indicating that a loop managed by this functor should break now. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="479" column="24" bodyfile="Elements/src/functors.cpp" bodystart="902" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a305b0c7b7932b2bad7439e535263126e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::resetLoop</definition>
        <argsstring>()</argsstring>
        <name>resetLoop</name>
        <qualifiedname>Gambit::module_functor_common::resetLoop</qualifiedname>
        <briefdescription>
<para>Provide a way to reset the flag indicating that a loop managed by this functor should break. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="481" column="20" bodyfile="Elements/src/functors.cpp" bodystart="908" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a5a6b4098cba80ad8277d6d1a362e702b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::breakLoop</definition>
        <argsstring>()</argsstring>
        <name>breakLoop</name>
        <qualifiedname>Gambit::module_functor_common::breakLoop</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a0d6a72d8be5c5225840ca3aee362cf15">breakLoop</reimplements>
        <briefdescription>
<para>Tell the functor that the loop it manages should break now. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="483" column="20" bodyfile="Elements/src/functors.cpp" bodystart="893" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1af4fc9e121a27ea7caf88113de68e2ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::dependencies</definition>
        <argsstring>()</argsstring>
        <name>dependencies</name>
        <qualifiedname>Gambit::module_functor_common::dependencies</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ac518c00bed9dd3d570e0026439b2dfc2">dependencies</reimplements>
        <briefdescription>
<para>Getter for listing currently activated dependencies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="486" column="24" bodyfile="Elements/src/functors.cpp" bodystart="952" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a4b17692c78ddabf74400feeed3db0855" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::backendclassloading</definition>
        <argsstring>()</argsstring>
        <name>backendclassloading</name>
        <qualifiedname>Gambit::module_functor_common::backendclassloading</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ab4b98ae7da7e5e1e0c1548de23c8d34c">backendclassloading</reimplements>
        <briefdescription>
<para>Getter for listing backends that require class loading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="488" column="24" bodyfile="Elements/src/functors.cpp" bodystart="954" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a341556c2227a848fcbb0a80df970e53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::set&lt; str &gt; Gambit::module_functor_common::backendgroups</definition>
        <argsstring>()</argsstring>
        <name>backendgroups</name>
        <qualifiedname>Gambit::module_functor_common::backendgroups</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a4b4ee671e729c3cf346d32c152e09451">backendgroups</reimplements>
        <briefdescription>
<para>Getter for listing backend requirement groups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="490" column="24" bodyfile="Elements/src/functors.cpp" bodystart="968" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a367ffcfd016f5bd30123add599fdb0f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::backendreqs</definition>
        <argsstring>()</argsstring>
        <name>backendreqs</name>
        <qualifiedname>Gambit::module_functor_common::backendreqs</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1afe9c4e74bd8b8a44d155a6e40a972d4c">backendreqs</reimplements>
        <briefdescription>
<para>Getter for listing all backend requirements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="492" column="24" bodyfile="Elements/src/functors.cpp" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a30f6ba1e10e57506ee8432019ba35b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::backendreqs</definition>
        <argsstring>(str)</argsstring>
        <name>backendreqs</name>
        <qualifiedname>Gambit::module_functor_common::backendreqs</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1af420350fc2c964e8ecedb39cad40ebae">backendreqs</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>group</defname>
        </param>
        <briefdescription>
<para>Getter for listing backend requirements from a specific group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="494" column="24" bodyfile="Elements/src/functors.cpp" bodystart="972" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a81378addb3df54c89586340bd2e86187" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::backendspermitted</definition>
        <argsstring>(sspair quant)</argsstring>
        <name>backendspermitted</name>
        <qualifiedname>Gambit::module_functor_common::backendspermitted</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a1554bbdfe8007dc433aa15a4c6ba866a">backendspermitted</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref></type>
          <declname>quant</declname>
        </param>
        <briefdescription>
<para>Getter for listing permitted backends. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="496" column="24" bodyfile="Elements/src/functors.cpp" bodystart="985" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a3ee7d48e8177ba02bbeb96c13f513853" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt;</type>
        <definition>std::set&lt; str &gt; Gambit::module_functor_common::backendreq_tags</definition>
        <argsstring>(sspair)</argsstring>
        <name>backendreq_tags</name>
        <qualifiedname>Gambit::module_functor_common::backendreq_tags</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a835e69ea8a95282d6381c2a5730b7d2d">backendreq_tags</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref></type>
          <defname>quant</defname>
        </param>
        <briefdescription>
<para>Getter for listing tags associated with backend requirements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="498" column="24" bodyfile="Elements/src/functors.cpp" bodystart="998" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ab1b1a8313374971f97ed8a6fde351f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::forcematchingbackend</definition>
        <argsstring>(str)</argsstring>
        <name>forcematchingbackend</name>
        <qualifiedname>Gambit::module_functor_common::forcematchingbackend</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a9b780439992b245c1942c01151052942">forcematchingbackend</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>tag</defname>
        </param>
        <briefdescription>
<para>Getter for listing backend requirements that must be resolved from the same backend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="500" column="24" bodyfile="Elements/src/functors.cpp" bodystart="1011" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a15351dd24c1f2efd8d0556dd06741c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::backend_conditional_dependencies</definition>
        <argsstring>(str req, str type, str be, str ver)</argsstring>
        <name>backend_conditional_dependencies</name>
        <qualifiedname>Gambit::module_functor_common::backend_conditional_dependencies</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a05f0d4edd01eedd5b66d344977ec11d9">backend_conditional_dependencies</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>be</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ver</declname>
        </param>
        <briefdescription>
<para>Getter for listing backend-specific conditional dependencies (4-string version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="503" column="24" bodyfile="Elements/src/functors.cpp" bodystart="1025" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a84713c26691d950b2aaff19bff556763" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::backend_conditional_dependencies</definition>
        <argsstring>(str req, str type, str be)</argsstring>
        <name>backend_conditional_dependencies</name>
        <qualifiedname>Gambit::module_functor_common::backend_conditional_dependencies</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a58b95cb38cbdb73acec3dd3bd76c3242">backend_conditional_dependencies</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>be</declname>
        </param>
        <briefdescription>
<para>Getter for backend-specific conditional dependencies (3-string version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="506" column="24" bodyfile="Elements/src/functors.cpp" bodystart="1050" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a9789247dfe146dda5fdcf7c0fe642dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::backend_conditional_dependencies</definition>
        <argsstring>(functor *be_functor)</argsstring>
        <name>backend_conditional_dependencies</name>
        <qualifiedname>Gambit::module_functor_common::backend_conditional_dependencies</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a5b0966dbd47cdaf1dde6caea70701db4">backend_conditional_dependencies</reimplements>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <declname>be_functor</declname>
        </param>
        <briefdescription>
<para>Getter for backend-specific conditional dependencies (backend functor pointer version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="509" column="24" bodyfile="Elements/src/functors.cpp" bodystart="1056" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a27f21017f968237acd5f5ca39521e78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::model_conditional_dependencies</definition>
        <argsstring>(str model)</argsstring>
        <name>model_conditional_dependencies</name>
        <qualifiedname>Gambit::module_functor_common::model_conditional_dependencies</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1aca3ff18371ef2f272aa011207a2015a0">model_conditional_dependencies</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Getter for listing model-specific conditional dependencies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="512" column="24" bodyfile="Elements/src/functors.cpp" bodystart="1063" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1acba215f7ede05170a577c2c89302c2db" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::set&lt; <ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref> &gt;</type>
        <definition>std::set&lt; sspair &gt; Gambit::module_functor_common::model_conditional_backend_reqs</definition>
        <argsstring>(str model)</argsstring>
        <name>model_conditional_backend_reqs</name>
        <qualifiedname>Gambit::module_functor_common::model_conditional_backend_reqs</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a54676e855d38746e897ac7bfcf713310">model_conditional_backend_reqs</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Getter for listing model-specific conditional backend requirements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="515" column="24" bodyfile="Elements/src/functors.cpp" bodystart="1072" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a43a7ee806e18f22a2de7ed7f012932a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setDependency</definition>
        <argsstring>(str, str, void(*)(functor *, module_functor_common *), str purpose=&quot;&quot;)</argsstring>
        <name>setDependency</name>
        <qualifiedname>Gambit::module_functor_common::setDependency</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep_type</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>purpose</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add and activate unconditional dependencies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="518" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1081" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a915f72fd748fc54ce4efaddbe38c8a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setConditionalDependency</definition>
        <argsstring>(str, str)</argsstring>
        <name>setConditionalDependency</name>
        <qualifiedname>Gambit::module_functor_common::setConditionalDependency</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep_type</defname>
        </param>
        <briefdescription>
<para>Add conditional dependency-type pairs in advance of later conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="521" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1090" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a6f74b02a3d580cb9797d766e3ca6b81a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setBackendConditionalDependency</definition>
        <argsstring>(str, str, str, str, void(*)(functor *, module_functor_common *))</argsstring>
        <name>setBackendConditionalDependency</name>
        <qualifiedname>Gambit::module_functor_common::setBackendConditionalDependency</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>req</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>ver</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Add a backend conditional dependency for multiple backend versions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="524" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1111" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ac28b31c7a4ddb7491c9240486b8e8232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setBackendConditionalDependencySingular</definition>
        <argsstring>(str, str, str, str, void(*)(functor *, module_functor_common *))</argsstring>
        <name>setBackendConditionalDependencySingular</name>
        <qualifiedname>Gambit::module_functor_common::setBackendConditionalDependencySingular</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>req</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>ver</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Add a backend conditional dependency for a single backend version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="527" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1123" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a5507c3fa278180358649ef2bc2475f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setModelConditionalDependency</definition>
        <argsstring>(str, str, void(*)(functor *, module_functor_common *))</argsstring>
        <name>setModelConditionalDependency</name>
        <qualifiedname>Gambit::module_functor_common::setModelConditionalDependency</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Add a model conditional dependency for multiple models. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="530" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1153" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a533b326fe958f21986dbe5cdc27270f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setModelConditionalDependencySingular</definition>
        <argsstring>(str, str, void(*)(functor *, module_functor_common *))</argsstring>
        <name>setModelConditionalDependencySingular</name>
        <qualifiedname>Gambit::module_functor_common::setModelConditionalDependencySingular</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *, <ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
<para>Add a model conditional dependency for a single model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="533" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1165" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a2cd39cd54c4fedb6b5062c62ac9b3885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::makeBackendRuleForModel</definition>
        <argsstring>(str, str)</argsstring>
        <name>makeBackendRuleForModel</name>
        <qualifiedname>Gambit::module_functor_common::makeBackendRuleForModel</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>model</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>tag</defname>
        </param>
        <briefdescription>
<para>Add a rule for activating backend requirements according to the model being scanned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="536" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1201" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a8d5518135253c1ed1065809ce8251778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setBackendReq</definition>
        <argsstring>(str, str, str, str, void(*)(functor *))</argsstring>
        <name>setBackendReq</name>
        <qualifiedname>Gambit::module_functor_common::setBackendReq</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>group</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>req</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>tags</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>type</defname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *)</type>
          <defname>resolver</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an unconditional backend requirement The info gets updated later if this turns out to be contitional on a model.</para>
<para>Add an unconditional backend requirement The info gets updated later if this turns out to be conditional on a model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="540" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1179" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ad648bbad10815d3b346c2e51462c5f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setModelConditionalBackendReq</definition>
        <argsstring>(str model, str req, str type)</argsstring>
        <name>setModelConditionalBackendReq</name>
        <qualifiedname>Gambit::module_functor_common::setModelConditionalBackendReq</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Add a model conditional backend requirement for multiple models. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="543" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1226" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1abab01071027dc0b194bc3e76b33a25b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setModelConditionalBackendReqSingular</definition>
        <argsstring>(str model, str req, str type)</argsstring>
        <name>setModelConditionalBackendReqSingular</name>
        <qualifiedname>Gambit::module_functor_common::setModelConditionalBackendReqSingular</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Add a model conditional backend requirement for a single model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="546" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1238" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1abda9ce1c6a4f3ec4af244d907bffa30a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::makeBackendOptionRule</definition>
        <argsstring>(str, str)</argsstring>
        <name>makeBackendOptionRule</name>
        <qualifiedname>Gambit::module_functor_common::makeBackendOptionRule</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be_and_ver</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>tag</defname>
        </param>
        <briefdescription>
<para>Add a rule for dictating which backends can be used to fulfill which backend requirements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="549" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1258" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1af3e16680e5820efb26df1c3328190acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setPermittedBackend</definition>
        <argsstring>(str req, str be, str ver)</argsstring>
        <name>setPermittedBackend</name>
        <qualifiedname>Gambit::module_functor_common::setPermittedBackend</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>be</declname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>ver</declname>
        </param>
        <briefdescription>
<para>Add a single permitted backend version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="552" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1298" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a30700cc6d137ec1773cd9a9359f7f1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::makeBackendMatchingRule</definition>
        <argsstring>(str tag)</argsstring>
        <name>makeBackendMatchingRule</name>
        <qualifiedname>Gambit::module_functor_common::makeBackendMatchingRule</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Add one or more rules for forcing backends reqs with the same tags to always be resolved from the same backend. </para>
        </briefdescription>
        <detaileddescription>
<para>Add one or more rules that force backends reqs with the same tag to always be resolved from the same backend. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="555" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1323" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a3d41b15872c55bb8d903b011408dc589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setRequiredClassloader</definition>
        <argsstring>(str, str, str)</argsstring>
        <name>setRequiredClassloader</name>
        <qualifiedname>Gambit::module_functor_common::setRequiredClassloader</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>be</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>ver</defname>
        </param>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>safe_ver</defname>
        </param>
        <briefdescription>
<para>Add a rule indicating that classes from a given backend must be available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="558" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1364" bodyend="1374"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a39ebf33238e29052273bfb688100bad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::notifyOfBackends</definition>
        <argsstring>(std::map&lt; str, std::set&lt; str &gt; &gt;)</argsstring>
        <name>notifyOfBackends</name>
        <qualifiedname>Gambit::module_functor_common::notifyOfBackends</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a55331421e9520337170079c18eaa88c7">notifyOfBackends</reimplements>
        <param>
          <type>std::map&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref>, std::set&lt; <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &gt; &gt;</type>
          <defname>be_ver_map</defname>
        </param>
        <briefdescription>
<para>Indicate to the functor which backends are actually loaded and working. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="561" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1377" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1aa87dfaf3619b21da4e00637e6e8c7d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::setNestedList</definition>
        <argsstring>(std::vector&lt; functor * &gt; &amp;newNestedList)</argsstring>
        <name>setNestedList</name>
        <qualifiedname>Gambit::module_functor_common::setNestedList</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ab3dbaa4eb0d598e0990ff8e6ac959dc7">setNestedList</reimplements>
        <param>
          <type>std::vector&lt; <ref refid="classGambit_1_1functor" kindref="compound">functor</ref> * &gt; &amp;</type>
          <declname>newNestedList</declname>
        </param>
        <briefdescription>
<para>Set the ordered list of pointers to other functors that should run nested in a loop managed by this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="564" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1406" bodyend="1419"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ab4e47058c7c0f72906ece2924d952882" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::resolveDependency</definition>
        <argsstring>(functor *dep_functor)</argsstring>
        <name>resolveDependency</name>
        <qualifiedname>Gambit::module_functor_common::resolveDependency</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1aec1193154572515f633a20dbeb404482">resolveDependency</reimplements>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <declname>dep_functor</declname>
        </param>
        <briefdescription>
<para>Resolve a dependency using a pointer to another functor object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="567" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1422" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ab5056f4b47a2c3a79bc44e4293532f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::resolveLoopManager</definition>
        <argsstring>(functor *)</argsstring>
        <name>resolveLoopManager</name>
        <qualifiedname>Gambit::module_functor_common::resolveLoopManager</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1acd3f9e9d487ab066a0741a12d2e91b08">resolveLoopManager</reimplements>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <defname>dep_functor</defname>
        </param>
        <briefdescription>
<para>Set this functor&apos;s loop manager (if it has one) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="570" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1459" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ae67ace8c39a2c53cb2a158d5bac0ddb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::resolveBackendReq</definition>
        <argsstring>(functor *be_functor)</argsstring>
        <name>resolveBackendReq</name>
        <qualifiedname>Gambit::module_functor_common::resolveBackendReq</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a122745e3d3c9d9521b95e7a665d43abf">resolveBackendReq</reimplements>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <declname>be_functor</declname>
        </param>
        <briefdescription>
<para>Resolve a backend requirement using a pointer to another functor object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="573" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1482" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a9effd8a4100f67c39c4cd300a027ae22" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::notifyOfModel</definition>
        <argsstring>(str model)</argsstring>
        <name>notifyOfModel</name>
        <qualifiedname>Gambit::module_functor_common::notifyOfModel</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1a92362795019e710f079b9613be971e4f">notifyOfModel</reimplements>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Notify the functor that a certain model is being scanned, so that it can activate its dependencies and backend reqs accordingly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="576" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1597" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a18664919c7999ac674d59f27d4d40a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::notifyOfDependee</definition>
        <argsstring>(functor *)</argsstring>
        <name>notifyOfDependee</name>
        <qualifiedname>Gambit::module_functor_common::notifyOfDependee</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ae93379f2a736243cff0cdf79d0c2cb8c">notifyOfDependee</reimplements>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <defname>dependent_functor</defname>
        </param>
        <briefdescription>
<para>Notify the functor that another functor depends on it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="579" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1446" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a6dc067a3fa5774ca0f9eb1dfb67d2d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classGambit_1_1invalid__point__exception" kindref="compound">invalid_point_exception</ref> *</type>
        <definition>invalid_point_exception * Gambit::module_functor_common::retrieve_invalid_point_exception</definition>
        <argsstring>()</argsstring>
        <name>retrieve_invalid_point_exception</name>
        <qualifiedname>Gambit::module_functor_common::retrieve_invalid_point_exception</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1af8cb02a4a7aba6a4563bb5c358059f6a">retrieve_invalid_point_exception</reimplements>
        <briefdescription>
<para>Retrieve the previously saved exception generated when this functor invalidated the current point in model space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="582" column="39" bodyfile="Elements/src/functors.cpp" bodystart="778" bodyend="787"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a716ce66eb5f12e39e9d38c0d5949fe9a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::reset</definition>
        <argsstring>(int)</argsstring>
        <name>reset</name>
        <qualifiedname>Gambit::module_functor_common::reset</qualifiedname>
        <reimplements refid="classGambit_1_1functor_1ac0a433e94cc5725e0d8f48d4cad897c5">reset</reimplements>
        <param>
          <type>int</type>
          <defname>thread_num</defname>
        </param>
        <briefdescription>
<para>Reset functor for one thread only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="588" column="12" bodyfile="Elements/src/functors.cpp" bodystart="746" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a60681b7ecb89f42c1114132f044f4246" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::acknowledgeInvalidation</definition>
        <argsstring>(invalid_point_exception &amp;, functor *f=NULL)</argsstring>
        <name>acknowledgeInvalidation</name>
        <qualifiedname>Gambit::module_functor_common::acknowledgeInvalidation</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1invalid__point__exception" kindref="compound">invalid_point_exception</ref> &amp;</type>
          <defname>e</defname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1functor" kindref="compound">functor</ref> *</type>
          <declname>f</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Acknowledge that this functor invalidated the current point in model space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="591" column="20" bodyfile="Elements/src/functors.cpp" bodystart="763" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1aa5b20d0bd820325c61ab0bcfea479a48" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::startTiming</definition>
        <argsstring>(int)</argsstring>
        <name>startTiming</name>
        <qualifiedname>Gambit::module_functor_common::startTiming</qualifiedname>
        <param>
          <type>int</type>
          <defname>thread_num</defname>
        </param>
        <briefdescription>
<para>Do pre-calculate timing things. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="594" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1707" bodyend="1710"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a26c95890c3df7e87602e2de30b6d0f6f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::finishTiming</definition>
        <argsstring>(int)</argsstring>
        <name>finishTiming</name>
        <qualifiedname>Gambit::module_functor_common::finishTiming</qualifiedname>
        <param>
          <type>int</type>
          <defname>thread_num</defname>
        </param>
        <briefdescription>
<para>Do post-calculate timing things. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="597" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1713" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a90d617ce75a8ade1c843c3bdaa20c231" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::init_memory</definition>
        <argsstring>()</argsstring>
        <name>init_memory</name>
        <qualifiedname>Gambit::module_functor_common::init_memory</qualifiedname>
        <reimplementedby refid="classGambit_1_1module__functor_1a5132c201b17e8935e0810f66f2ecce80">init_memory</reimplementedby>
        <reimplementedby refid="classGambit_1_1module__functor_1a5132c201b17e8935e0810f66f2ecce80">init_memory</reimplementedby>
        <briefdescription>
<para>Initialise the memory of this functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="603" column="20" bodyfile="Elements/src/functors.cpp" bodystart="1653" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a736a0964bc8a8b518eacc37e4619f3cf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::fill_activeModelFlags</definition>
        <argsstring>()</argsstring>
        <name>fill_activeModelFlags</name>
        <qualifiedname>Gambit::module_functor_common::fill_activeModelFlags</qualifiedname>
        <briefdescription>
<para>Construct the list of known models only if it doesn&apos;t yet exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="606" column="12" bodyfile="Elements/src/functors.cpp" bodystart="1580" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a8b70a7e3b4dbad4da1fc927144295adf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceGambit_1a02fb1a27cb798b8333a50eb29b32c0a7" kindref="member">sspair</ref></type>
        <definition>sspair Gambit::module_functor_common::retrieve_conditional_dep_type_pair</definition>
        <argsstring>(str)</argsstring>
        <name>retrieve_conditional_dep_type_pair</name>
        <qualifiedname>Gambit::module_functor_common::retrieve_conditional_dep_type_pair</qualifiedname>
        <param>
          <type><ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref></type>
          <defname>dep</defname>
        </param>
        <briefdescription>
<para>Retrieve full conditional dependency-type pair from conditional dependency only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="609" column="14" bodyfile="Elements/src/functors.cpp" bodystart="1096" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1ae3a82d20da9f6340c9e00c35d7254b0c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::check_missing_LogTag</definition>
        <argsstring>()</argsstring>
        <name>check_missing_LogTag</name>
        <qualifiedname>Gambit::module_functor_common::check_missing_LogTag</qualifiedname>
        <briefdescription>
<para>Check if an appropriate LogTag for this functor is missing from the logging system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="736" column="12" bodyfile="Elements/src/functors.cpp" bodystart="702" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1add2d5838af88871fc5ccc3016b500116" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::entering_multithreaded_region</definition>
        <argsstring>()</argsstring>
        <name>entering_multithreaded_region</name>
        <qualifiedname>Gambit::module_functor_common::entering_multithreaded_region</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="752" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="752" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1module__functor__common_1a69db10aa494090c239d6cb796ffc1d54" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::module_functor_common::leaving_multithreaded_region</definition>
        <argsstring>()</argsstring>
        <name>leaving_multithreaded_region</name>
        <qualifiedname>Gambit::module_functor_common::leaving_multithreaded_region</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="753" column="12" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="753" bodyend="753"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGambit_1_1module__functor__common_1aa5782f2798ca1657550c41e8015657f5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FunctorHelp::entering_multithreaded_region</definition>
        <argsstring>(module_functor_common &amp;)</argsstring>
        <name>FunctorHelp::entering_multithreaded_region</name>
        <qualifiedname>Gambit::module_functor_common::entering_multithreaded_region</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Connectors to external helper functions (to decouple signal handling from this class) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="748" column="19"/>
      </memberdef>
      <memberdef kind="friend" id="classGambit_1_1module__functor__common_1a29faf3e65e70e4219b5336346e3ce193" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FunctorHelp::leaving_multithreaded_region</definition>
        <argsstring>(module_functor_common &amp;)</argsstring>
        <name>FunctorHelp::leaving_multithreaded_region</name>
        <qualifiedname>Gambit::module_functor_common::leaving_multithreaded_region</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1module__functor__common" kindref="compound">module_functor_common</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/functors.hpp" line="749" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functor derived class for module functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Gambit::functor</label>
        <link refid="classGambit_1_1functor"/>
      </node>
      <node id="4">
        <label>Gambit::model_functor</label>
        <link refid="classGambit_1_1model__functor"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Gambit::module_functor&lt; TYPE &gt;</label>
        <link refid="classGambit_1_1module__functor"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Gambit::module_functor&lt; void &gt;</label>
        <link refid="classGambit_1_1module__functor_3_01void_01_4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Gambit::module_functor_common</label>
        <link refid="classGambit_1_1module__functor__common"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Gambit::primary_model_functor</label>
        <link refid="classGambit_1_1primary__model__functor"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Gambit::module_functor&lt; ModelParameters &gt;</label>
        <link refid="classGambit_1_1module__functor"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Gambit::Models::ModelFunctorClaw</label>
        <link refid="classGambit_1_1Models_1_1ModelFunctorClaw"/>
      </node>
      <node id="5">
        <label>Gambit::Options</label>
        <link refid="classGambit_1_1Options"/>
      </node>
      <node id="2">
        <label>Gambit::functor</label>
        <link refid="classGambit_1_1functor"/>
        <childnode refid="3" relation="usage">
          <edgelabel>myCapability</edgelabel>
          <edgelabel>myCitationKey</edgelabel>
          <edgelabel>myName</edgelabel>
          <edgelabel>myOrigin</edgelabel>
          <edgelabel>myPurpose</edgelabel>
          <edgelabel>myType</edgelabel>
          <edgelabel>myVersion</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>myClaw</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>myOptions</edgelabel>
          <edgelabel>mySubCaps</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Gambit::invalid_point_exception</label>
        <link refid="classGambit_1_1invalid__point__exception"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Gambit::module_functor_common</label>
        <link refid="classGambit_1_1module__functor__common"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>raised_point_exception</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>myLoopManagerCapability</edgelabel>
          <edgelabel>myLoopManagerType</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>myLoopManager</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>Gambit::special_exception</label>
        <link refid="classGambit_1_1special__exception"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>myMessage</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::exception</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
    </collaborationgraph>
    <location file="Elements/include/gambit/Elements/functors.hpp" line="412" column="3" bodyfile="Elements/include/gambit/Elements/functors.hpp" bodystart="413" bodyend="755"/>
    <listofallmembers>
      <member refid="classGambit_1_1module__functor__common_1a60681b7ecb89f42c1114132f044f4246" prot="protected" virt="virtual"><scope>Gambit::module_functor_common</scope><name>acknowledgeInvalidation</name></member>
      <member refid="classGambit_1_1module__functor__common_1aeb3b1f7a66c83d117342496b6ad0229f" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>activeModelFlags</name></member>
      <member refid="classGambit_1_1functor_1a5f45ff02d2e4209dfb81bcb9ace3fb74" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>allModelsAllowed</name></member>
      <member refid="classGambit_1_1functor_1a782b9e5700d5cb8035abd400447c656c" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>allowed_parent_or_friend_exists</name></member>
      <member refid="classGambit_1_1functor_1a4f73fb1475364081fa23944b7c95c7b3" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>allowedGroupCombos</name></member>
      <member refid="classGambit_1_1functor_1ac70ec922e8a3f04f6878ffafc231e379" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>allowedModels</name></member>
      <member refid="classGambit_1_1module__functor__common_1a11a55f0dee712fd09143749711bf345d" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>already_printed</name></member>
      <member refid="classGambit_1_1module__functor__common_1ac41e86a381b4cd922e4125e3572c5174" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>already_printed_timing</name></member>
      <member refid="classGambit_1_1module__functor__common_1a15351dd24c1f2efd8d0556dd06741c73" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backend_conditional_dependencies</name></member>
      <member refid="classGambit_1_1module__functor__common_1a84713c26691d950b2aaff19bff556763" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backend_conditional_dependencies</name></member>
      <member refid="classGambit_1_1module__functor__common_1a9789247dfe146dda5fdcf7c0fe642dab" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backend_conditional_dependencies</name></member>
      <member refid="classGambit_1_1module__functor__common_1a4b17692c78ddabf74400feeed3db0855" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backendclassloading</name></member>
      <member refid="classGambit_1_1module__functor__common_1a341556c2227a848fcbb0a80df970e53f" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backendgroups</name></member>
      <member refid="classGambit_1_1module__functor__common_1ae23abdb30edf89228b296b707bc4321f" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>backendreq_groups</name></member>
      <member refid="classGambit_1_1module__functor__common_1ae7f6eb5b0b45de63ae3db562420126ed" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>backendreq_map</name></member>
      <member refid="classGambit_1_1module__functor__common_1ad99f3dba2e2045dfddd88a6d9b60e540" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>backendreq_tagmap</name></member>
      <member refid="classGambit_1_1module__functor__common_1a3ee7d48e8177ba02bbeb96c13f513853" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backendreq_tags</name></member>
      <member refid="classGambit_1_1module__functor__common_1a786bc4ed0cca65e2c916836740337f17" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>backendreq_types</name></member>
      <member refid="classGambit_1_1module__functor__common_1a367ffcfd016f5bd30123add599fdb0f7" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backendreqs</name></member>
      <member refid="classGambit_1_1module__functor__common_1a30f6ba1e10e57506ee8432019ba35b79" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backendreqs</name></member>
      <member refid="classGambit_1_1module__functor__common_1a81378addb3df54c89586340bd2e86187" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>backendspermitted</name></member>
      <member refid="classGambit_1_1module__functor__common_1a5a6b4098cba80ad8277d6d1a362e702b" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>breakLoop</name></member>
      <member refid="classGambit_1_1module__functor__common_1a407bb29ab75b62c67df4f9ad8f54c6ac" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>breakLoopFromManagedFunctor</name></member>
      <member refid="classGambit_1_1functor_1ad4511b7324e416ec8a881bc2d3d7870e" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>calculate</name></member>
      <member refid="classGambit_1_1module__functor__common_1a45ee081397264cff4fae5d90a468e15c" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>canBeLoopManager</name></member>
      <member refid="classGambit_1_1functor_1abbad0238d51adf088d97fe4376586890" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>capability</name></member>
      <member refid="classGambit_1_1module__functor__common_1ae3a82d20da9f6340c9e00c35d7254b0c" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>check_missing_LogTag</name></member>
      <member refid="classGambit_1_1module__functor__common_1a093c06a4cad21400d4f46c89b6d302b1" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>chosenReqsFromGroups</name></member>
      <member refid="classGambit_1_1functor_1ad1763580d476b082690ddebfd877e98b" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>citationKey</name></member>
      <member refid="classGambit_1_1functor_1a86a00771d51c2f47765de71a8eb47de9" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>contains_anything_interpretable_as_member_of</name></member>
      <member refid="classGambit_1_1module__functor__common_1af4fc9e121a27ea7caf88113de68e2ed2" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>dependencies</name></member>
      <member refid="classGambit_1_1module__functor__common_1a2bae29be67acbe6831b991e0f3b8f183" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>dependency_functor_map</name></member>
      <member refid="classGambit_1_1module__functor__common_1a65b4f950efdaca6b360b131b5b8a0ebf" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>dependency_map</name></member>
      <member refid="classGambit_1_1module__functor__common_1aba38e9d289eb88fd6b584fde30b1984e" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>end</name></member>
      <member refid="classGambit_1_1module__functor__common_1add2d5838af88871fc5ccc3016b500116" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>entering_multithreaded_region</name></member>
      <member refid="classGambit_1_1module__functor__common_1a77c216bbfeb9d09928b3ada8973447c7" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>fadeRate</name></member>
      <member refid="classGambit_1_1functor_1a399d73c9f799c78274ad8715eec84d7b" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>failBigTime</name></member>
      <member refid="classGambit_1_1module__functor__common_1a736a0964bc8a8b518eacc37e4619f3cf" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>fill_activeModelFlags</name></member>
      <member refid="classGambit_1_1functor_1a1102b665dfdd1e1c199bdf617ab43176" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>find_friend_or_parent_model_in_map</name></member>
      <member refid="classGambit_1_1module__functor__common_1a26c95890c3df7e87602e2de30b6d0f6f" prot="protected" virt="virtual"><scope>Gambit::module_functor_common</scope><name>finishTiming</name></member>
      <member refid="classGambit_1_1module__functor__common_1ab1b1a8313374971f97ed8a6fde351f56" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>forcematchingbackend</name></member>
      <member refid="classGambit_1_1functor_1a970d23b026a50dd8b029795a004b4183" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>functor</name></member>
      <member refid="classGambit_1_1module__functor__common_1aa5782f2798ca1657550c41e8015657f5" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>FunctorHelp::entering_multithreaded_region</name></member>
      <member refid="classGambit_1_1module__functor__common_1a29faf3e65e70e4219b5336346e3ce193" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>FunctorHelp::leaving_multithreaded_region</name></member>
      <member refid="classGambit_1_1module__functor__common_1af6cabe1d2f178ed6560ae1c87802a82f" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>getActiveModelFlag</name></member>
      <member refid="classGambit_1_1module__functor__common_1ae25199af41de21dcb3e20b76233156ec" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>getChosenReqFromGroup</name></member>
      <member refid="classGambit_1_1functor_1aee7a9c98be2845c50e6953fdaf1195ff" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>getDependees</name></member>
      <member refid="classGambit_1_1module__functor__common_1abfa224375716da6b911f18e8cbe72ce7" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>getInvalidationRate</name></member>
      <member refid="classGambit_1_1functor_1aec86679016ed6a9a1ad2f20c1e3383e9" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>getOptions</name></member>
      <member refid="classGambit_1_1module__functor__common_1a7f4ecc772af822e6bddf9edf95ab2a5f" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>getRuntimeAverage</name></member>
      <member refid="classGambit_1_1functor_1a6842998c58e68c84b6dcc54fb5094c5c" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>getSubCaps</name></member>
      <member refid="classGambit_1_1module__functor__common_1a9ab2ee1a2b0d96d437a4c5e6d2cec739" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>globlMaxThreads</name></member>
      <member refid="classGambit_1_1functor_1a160a2a34aa257a5683bd9d236d05499e" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>has_common_elements</name></member>
      <member refid="classGambit_1_1module__functor__common_1ac211d5483ebf9d71dcf2bed1cae9781e" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>iCanManageLoops</name></member>
      <member refid="classGambit_1_1functor_1a1f13657a8b3235a6645f9f5f65096972" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>in_allowed_combo</name></member>
      <member refid="classGambit_1_1module__functor__common_1a90d617ce75a8ade1c843c3bdaa20c231" prot="protected" virt="virtual"><scope>Gambit::module_functor_common</scope><name>init_memory</name></member>
      <member refid="classGambit_1_1module__functor__common_1a1c814da54654e19370708d98bbe07f28" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>init_myCurrentIteration_if_NULL</name></member>
      <member refid="classGambit_1_1module__functor__common_1a0c61f250c2879b7a80e3fbb2b6c6dcff" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>iRunNested</name></member>
      <member refid="classGambit_1_1module__functor__common_1a34e131eb232d93687583788c49295a9a" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>iterate</name></member>
      <member refid="classGambit_1_1module__functor__common_1a8015da108de37fd11580dbde2537a5b9" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>iterationPtr</name></member>
      <member refid="classGambit_1_1functor_1ad058829b78226cf3b0dcb310a4668256" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>label</name></member>
      <member refid="classGambit_1_1module__functor__common_1a69db10aa494090c239d6cb796ffc1d54" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>leaving_multithreaded_region</name></member>
      <member refid="classGambit_1_1module__functor__common_1a426ba14422f4ec0437347df714aecc81" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>loopIsDone</name></member>
      <member refid="classGambit_1_1module__functor__common_1a76068bbae795db5b319da3b6445b9e0b" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>loopManagerCapability</name></member>
      <member refid="classGambit_1_1module__functor__common_1a744fa740688d36d4e460b09f189b8a1c" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>loopManagerName</name></member>
      <member refid="classGambit_1_1module__functor__common_1a1b0a360cfb0cd36dbcc2999c55a39537" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>loopManagerOrigin</name></member>
      <member refid="classGambit_1_1module__functor__common_1af67a261a00be448fabac30d9c0c0011b" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>loopManagerType</name></member>
      <member refid="classGambit_1_1module__functor__common_1a30700cc6d137ec1773cd9a9359f7f1d0" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>makeBackendMatchingRule</name></member>
      <member refid="classGambit_1_1module__functor__common_1abda9ce1c6a4f3ec4af244d907bffa30a" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>makeBackendOptionRule</name></member>
      <member refid="classGambit_1_1module__functor__common_1a2cd39cd54c4fedb6b5062c62ac9b3885" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>makeBackendRuleForModel</name></member>
      <member refid="classGambit_1_1module__functor__common_1a0fd8feffa79f12d89097f5c45fc9eb18" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>missing_backends</name></member>
      <member refid="classGambit_1_1module__functor__common_1acba215f7ede05170a577c2c89302c2db" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>model_conditional_backend_reqs</name></member>
      <member refid="classGambit_1_1module__functor__common_1a27f21017f968237acd5f5ca39521e78a" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>model_conditional_dependencies</name></member>
      <member refid="classGambit_1_1functor_1a961f601d1b7072be456f16a74a973a59" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>modelAllowed</name></member>
      <member refid="classGambit_1_1functor_1acfa856966c8346437fb99a746970336e" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>modelComboAllowed</name></member>
      <member refid="classGambit_1_1functor_1a828031c874c79018d35b710379cd32d2" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>modelComboExplicitlyAllowed</name></member>
      <member refid="classGambit_1_1functor_1ac089db4d75e7394e11530727bbade14e" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>modelExplicitlyAllowed</name></member>
      <member refid="classGambit_1_1functor_1a6149708cf859ce1290dd447f16291e8b" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>modelGroups</name></member>
      <member refid="classGambit_1_1module__functor__common_1a3f6b2f655ca81171249e9f3655825a34" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>module_functor_common</name></member>
      <member refid="classGambit_1_1module__functor__common_1adc22bfb0f06cf58e6f4469d793d88583" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myBackendConditionalDependencies</name></member>
      <member refid="classGambit_1_1module__functor__common_1a1e9bed0318723d34f73afc954c0d7d05" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myBackendReqs</name></member>
      <member refid="classGambit_1_1functor_1ab8e599294e315beb4df8154b6e7ba499" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myCapability</name></member>
      <member refid="classGambit_1_1functor_1af7284750b2816b9c1601a5e4637a503c" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myCitationKey</name></member>
      <member refid="classGambit_1_1functor_1a7f185782b166c86c8c1488e3e28966d2" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myClaw</name></member>
      <member refid="classGambit_1_1module__functor__common_1aa11aee2c3fd4fe472034df285aadbef6" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myConditionalDependencies</name></member>
      <member refid="classGambit_1_1module__functor__common_1a47a97cb3505484092de8e06cd397ba49" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myCurrentIteration</name></member>
      <member refid="classGambit_1_1functor_1a22acc6454f7896c3d4dcb497e62f2e65" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myDependees</name></member>
      <member refid="classGambit_1_1module__functor__common_1a1d2b89105961ad780787a688bd468432" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myDependencies</name></member>
      <member refid="classGambit_1_1module__functor__common_1a67831f6f58d5b081b2a08a5f7e7c557c" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myForcedMatches</name></member>
      <member refid="classGambit_1_1module__functor__common_1a0b571e85b889da6d7173bae0473b2018" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myGroupedBackendReqs</name></member>
      <member refid="classGambit_1_1module__functor__common_1ad34c2ea06524530739b1753e7d06423a" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myGroups</name></member>
      <member refid="classGambit_1_1functor_1a55aa9ef92692ece18544675da08ef49e" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myLabel</name></member>
      <member refid="classGambit_1_1module__functor__common_1a9362538d0fec38166b8baabd51272621" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myLogTag</name></member>
      <member refid="classGambit_1_1module__functor__common_1a2fc9ca343ed1c197b4c246779bbd52df" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myLoopIsDone</name></member>
      <member refid="classGambit_1_1module__functor__common_1a8aa8ac184455c66978aba66b88de3344" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myLoopManager</name></member>
      <member refid="classGambit_1_1module__functor__common_1ae737ea2b40a195003e3eafa08a2e24ac" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myLoopManagerCapability</name></member>
      <member refid="classGambit_1_1module__functor__common_1a5a1e44605d6bfc9d43cbe16ac980fdcb" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myLoopManagerType</name></member>
      <member refid="classGambit_1_1module__functor__common_1a24327d20eeb4e07722e81856e5c613d8" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myModelConditionalBackendReqs</name></member>
      <member refid="classGambit_1_1module__functor__common_1a70be0fd7b2530e87a26e1caac4b400c9" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myModelConditionalDependencies</name></member>
      <member refid="classGambit_1_1functor_1ad9345bebb312d0352f8576d57b326759" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myName</name></member>
      <member refid="classGambit_1_1module__functor__common_1afa8e12fe2b00861c82adcb174328589a" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myNestedFunctorList</name></member>
      <member refid="classGambit_1_1functor_1a7cc789adf4e03cd04865f3c85d0ec42b" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myOptions</name></member>
      <member refid="classGambit_1_1functor_1a0a323ed83c7025b6d789e7fac64addc7" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myOrigin</name></member>
      <member refid="classGambit_1_1functor_1ac061cc96139bf564778406ecc67cc0a9" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myPurpose</name></member>
      <member refid="classGambit_1_1module__functor__common_1a591c7ce963c69d51b331eb69fbe5a4ba" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myResolvableBackendReqs</name></member>
      <member refid="classGambit_1_1functor_1a41bf64d7ddcd9ee48ef849344a803b55" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myStatus</name></member>
      <member refid="classGambit_1_1functor_1a91801bf8dad62e88dcd1c0d677543d03" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>mySubCaps</name></member>
      <member refid="classGambit_1_1functor_1a8ce50c7d7fcf5afa751b258895dd6dad" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myTimingLabel</name></member>
      <member refid="classGambit_1_1module__functor__common_1a7a1adb7a3d6c6868d06025ba45264593" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myTimingPrintFlag</name></member>
      <member refid="classGambit_1_1functor_1a9501f612101222191ac4eb41c5ef91af" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myTimingVertexID</name></member>
      <member refid="classGambit_1_1functor_1a799a78be10d270a75bf1c3881178daab" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myType</name></member>
      <member refid="classGambit_1_1functor_1a4de522a9d806a77959580b9a21c922d4" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myVersion</name></member>
      <member refid="classGambit_1_1functor_1a004751aadc8af70cdb28fa25ba661f76" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>myVertexID</name></member>
      <member refid="classGambit_1_1functor_1aaea7be169ef23d9221b4f85bc52eacb4" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>name</name></member>
      <member refid="classGambit_1_1module__functor__common_1aa948b2e50700e9c0d414090064cbaf35" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>needs_recalculating</name></member>
      <member refid="classGambit_1_1module__functor__common_1a39ebf33238e29052273bfb688100bad4" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>notifyOfBackends</name></member>
      <member refid="classGambit_1_1module__functor__common_1a18664919c7999ac674d59f27d4d40a46" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>notifyOfDependee</name></member>
      <member refid="classGambit_1_1functor_1a52331ed1165075f4f5c8060cf4d95f03" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>notifyOfIniOptions</name></member>
      <member refid="classGambit_1_1module__functor__common_1a946e0a1ad997d417dd40160a3bba603b" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>notifyOfInvalidation</name></member>
      <member refid="classGambit_1_1module__functor__common_1a9effd8a4100f67c39c4cd300a027ae22" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>notifyOfModel</name></member>
      <member refid="classGambit_1_1functor_1a3ed1caba9a4a281ff20d72e4e8354002" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>notifyOfSubCaps</name></member>
      <member refid="classGambit_1_1functor_1a3a9af0d5af87bd2210fb3e877b2e7c9a" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>notifyOfSubCaps</name></member>
      <member refid="classGambit_1_1functor_1a150f27ecb8a2eb9c3739a809dc5b7c83" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>origin</name></member>
      <member refid="classGambit_1_1module__functor__common_1a15ba740d630d04935b9e9e1376bf0b8a" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>permitted_map</name></member>
      <member refid="classGambit_1_1module__functor__common_1a586f59a87b95b5cc43bfa8939d51e71f" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>pInvalidation</name></member>
      <member refid="classGambit_1_1module__functor__common_1a366392aa6096192a76ee894d68aa85da" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>point_exception_raised</name></member>
      <member refid="classGambit_1_1functor_1a9ad7a0b7c132a040c5801b85c139f241" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>print</name></member>
      <member refid="classGambit_1_1functor_1abe4ec31bb94bcdb0b9ab876ae6187e8a" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>print</name></member>
      <member refid="classGambit_1_1functor_1aec5300fbdb253cd9a09edffbfdafb526" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>purpose</name></member>
      <member refid="classGambit_1_1functor_1a7be700dee4f9d9cc5a9efaa0ff2cbab0" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>quantity</name></member>
      <member refid="classGambit_1_1module__functor__common_1a85d73ca93af7755cdfc053f015a8cf98" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>raised_point_exception</name></member>
      <member refid="classGambit_1_1module__functor__common_1a2897f00892b6a5470246d1557f251e6b" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>required_classloading_backends</name></member>
      <member refid="classGambit_1_1functor_1a9c2a14819589380ff81cc3b1b2a9d78a" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>requiresPrinting</name></member>
      <member refid="classGambit_1_1module__functor__common_1a834e0932dcd86d0ad0a19d30a83e74cd" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>requiresTimingPrinting</name></member>
      <member refid="classGambit_1_1module__functor__common_1a4e34fc2cf2c9932a6794eb9baf554e28" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>reset</name></member>
      <member refid="classGambit_1_1module__functor__common_1a716ce66eb5f12e39e9d38c0d5949fe9a" prot="protected" virt="virtual"><scope>Gambit::module_functor_common</scope><name>reset</name></member>
      <member refid="classGambit_1_1functor_1a3fa95b5cde845f17d17fc40fa8e205e5" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>reset_and_calculate</name></member>
      <member refid="classGambit_1_1module__functor__common_1a305b0c7b7932b2bad7439e535263126e" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>resetLoop</name></member>
      <member refid="classGambit_1_1module__functor__common_1ae67ace8c39a2c53cb2a158d5bac0ddb4" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>resolveBackendReq</name></member>
      <member refid="classGambit_1_1module__functor__common_1ab4e47058c7c0f72906ece2924d952882" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>resolveDependency</name></member>
      <member refid="classGambit_1_1module__functor__common_1ab5056f4b47a2c3a79bc44e4293532f07" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>resolveLoopManager</name></member>
      <member refid="classGambit_1_1module__functor__common_1a8b70a7e3b4dbad4da1fc927144295adf" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>retrieve_conditional_dep_type_pair</name></member>
      <member refid="classGambit_1_1module__functor__common_1a6dc067a3fa5774ca0f9eb1dfb67d2d53" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>retrieve_invalid_point_exception</name></member>
      <member refid="classGambit_1_1module__functor__common_1a73113fff7fbc6a32a1c871dc3e688eeb" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>runtime_average</name></member>
      <member refid="classGambit_1_1functor_1a973dd85d7e1f3b57c3eb98030a8cf237" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>safe_version</name></member>
      <member refid="classGambit_1_1functor_1aa913b1602127b1115d211ad4dcafadfb" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setAllowedModel</name></member>
      <member refid="classGambit_1_1functor_1abd0c5a0c01fe6b8188c4c12c136b3ebb" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setAllowedModelGroupCombo</name></member>
      <member refid="classGambit_1_1module__functor__common_1a6f74b02a3d580cb9797d766e3ca6b81a" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setBackendConditionalDependency</name></member>
      <member refid="classGambit_1_1module__functor__common_1ac28b31c7a4ddb7491c9240486b8e8232" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setBackendConditionalDependencySingular</name></member>
      <member refid="classGambit_1_1module__functor__common_1a8d5518135253c1ed1065809ce8251778" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setBackendReq</name></member>
      <member refid="classGambit_1_1module__functor__common_1a3ea59e1326629dfbc1f31a8b2921d6d8" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setCanBeLoopManager</name></member>
      <member refid="classGambit_1_1module__functor__common_1a915f72fd748fc54ce4efaddbe38c8a8f" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setConditionalDependency</name></member>
      <member refid="classGambit_1_1module__functor__common_1a43a7ee806e18f22a2de7ed7f012932a4" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setDependency</name></member>
      <member refid="classGambit_1_1module__functor__common_1a80654414bb5bb5ae82f6fc37080dc858" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setFadeRate</name></member>
      <member refid="classGambit_1_1functor_1af005b2c5a8673df8402c10b7cdf78082" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setInUse</name></member>
      <member refid="classGambit_1_1module__functor__common_1aea40fae672492b12ab0fe2cd3e270146" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setIteration</name></member>
      <member refid="classGambit_1_1module__functor__common_1aad1288bedc0ae2a3080d66e9ac58c80e" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setLoopManagerCapType</name></member>
      <member refid="classGambit_1_1module__functor__common_1ad648bbad10815d3b346c2e51462c5f0c" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setModelConditionalBackendReq</name></member>
      <member refid="classGambit_1_1module__functor__common_1abab01071027dc0b194bc3e76b33a25b3" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setModelConditionalBackendReqSingular</name></member>
      <member refid="classGambit_1_1module__functor__common_1a5507c3fa278180358649ef2bc2475f83" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setModelConditionalDependency</name></member>
      <member refid="classGambit_1_1module__functor__common_1a533b326fe958f21986dbe5cdc27270f3" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setModelConditionalDependencySingular</name></member>
      <member refid="classGambit_1_1functor_1a36db93b4e79612e57f32fb807d427773" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setModelGroup</name></member>
      <member refid="classGambit_1_1module__functor__common_1aa87dfaf3619b21da4e00637e6e8c7d8d" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setNestedList</name></member>
      <member refid="classGambit_1_1functor_1ab42c0faae1334f0e4aec38fa6dc2c3b2" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setOption</name></member>
      <member refid="classGambit_1_1module__functor__common_1af3e16680e5820efb26df1c3328190acd" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setPermittedBackend</name></member>
      <member refid="classGambit_1_1functor_1ae47ce614bb3ebb36fb24a60a115de3d2" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setPrintRequirement</name></member>
      <member refid="classGambit_1_1functor_1a505e1eec8cb10fab9a310cd07ddaa7b2" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setPurpose</name></member>
      <member refid="classGambit_1_1module__functor__common_1a3d41b15872c55bb8d903b011408dc589" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setRequiredClassloader</name></member>
      <member refid="classGambit_1_1functor_1aa5b8e133948384570684245abcd0a137" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setStatus</name></member>
      <member refid="classGambit_1_1functor_1a0372aeee11961e5b97ff9d0370375826" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setSubCap</name></member>
      <member refid="classGambit_1_1module__functor__common_1ac689bbfda7429204bc0e07a547116e11" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>setTimingPrintRequirement</name></member>
      <member refid="classGambit_1_1functor_1aa3672cd13d12ba53572d7b40bb74121e" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setTimingVertexID</name></member>
      <member refid="classGambit_1_1functor_1a662c46ed6b31a1525a983c9cf7ebdf2b" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>setVertexID</name></member>
      <member refid="classGambit_1_1module__functor__common_1ab3d4cb6d21dd67b058af4e70bc4a4c45" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>signal_mode_locked</name></member>
      <member refid="classGambit_1_1module__functor__common_1aa47b3d140ceec21755b3cf50cffece49" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>start</name></member>
      <member refid="classGambit_1_1module__functor__common_1aa5b20d0bd820325c61ab0bcfea479a48" prot="protected" virt="virtual"><scope>Gambit::module_functor_common</scope><name>startTiming</name></member>
      <member refid="classGambit_1_1functor_1a2ba190773faaf6e644d74ab24c709d2a" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>status</name></member>
      <member refid="classGambit_1_1functor_1afec52bd9d7b3fb3a83cece403d48626b" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>timingLabel</name></member>
      <member refid="classGambit_1_1functor_1ad33185ce2c0ff77e0e14e4606d8efa1a" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>timingVertexID</name></member>
      <member refid="classGambit_1_1module__functor__common_1ae819618cc7c2ad5eb32d18464235d40b" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>tp</name></member>
      <member refid="classGambit_1_1functor_1a913d44680b347e3e9261601b3bdb6f80" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>type</name></member>
      <member refid="classGambit_1_1functor_1a3d9cf03cce51e7e134bbe1d7dcf37541" prot="protected" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>verbose</name></member>
      <member refid="classGambit_1_1functor_1a876de7e3fb4b6611e0a90a24ec889aed" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>version</name></member>
      <member refid="classGambit_1_1functor_1a94892ac8fa2e37f15cab798bbd189bcb" prot="public" virt="non-virtual"><scope>Gambit::module_functor_common</scope><name>vertexID</name></member>
      <member refid="classGambit_1_1functor_1a107e83b861fcc192e776352b6fe3719f" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>~functor</name></member>
      <member refid="classGambit_1_1module__functor__common_1af7b89032cf7c7392bb9566609b699f4f" prot="public" virt="virtual"><scope>Gambit::module_functor_common</scope><name>~module_functor_common</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
