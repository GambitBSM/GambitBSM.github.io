<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="SLHASimpleSpec_8cpp" kind="file" language="C++">
    <compoundname>SLHASimpleSpec.cpp</compoundname>
    <includes refid="SLHASimpleSpec_8hpp" local="yes">gambit/Models/SimpleSpectra/SLHASimpleSpec.hpp</includes>
    <includes local="no">boost/preprocessor/tuple/to_seq.hpp</includes>
    <includes local="no">boost/preprocessor/seq/elem.hpp</includes>
    <includes local="no">boost/preprocessor/seq/for_each_product.hpp</includes>
    <incdepgraph>
      <node id="60">
        <label>gambit/Elements/slhaea_spec_helpers.hpp</label>
        <link refid="slhaea__spec__helpers_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gambit/Elements/spec.hpp</label>
        <link refid="spec_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>gambit/Elements/spec_fptrfinder.hpp</label>
        <link refid="spec__fptrfinder_8hpp"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gambit/Elements/spec_head.hpp</label>
        <link refid="spec__head_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>gambit/Elements/spectrum_helpers.hpp</label>
        <link refid="spectrum__helpers_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>gambit/Elements/subspectrum.hpp</label>
        <link refid="subspectrum_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gambit/Logs/log_tags.hpp</label>
        <link refid="log__tags_8hpp"/>
      </node>
      <node id="2">
        <label>gambit/Models/SimpleSpectra/SLHASimpleSpec.hpp</label>
        <link refid="SLHASimpleSpec_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>gambit/Models/SpectrumContents/subspectrum_contents.hpp</label>
        <link refid="subspectrum__contents_8hpp"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>gambit/Models/partmap.hpp</label>
        <link refid="partmap_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>SLHASimpleSpec.cpp</label>
        <link refid="SLHASimpleSpec_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>gambit/Utils/boost_fallbacks.hpp</label>
        <link refid="boost__fallbacks_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>gambit/Utils/cats.hpp</label>
        <link refid="Utils_2include_2gambit_2Utils_2cats_8hpp"/>
      </node>
      <node id="32">
        <label>gambit/Utils/exceptions.hpp</label>
        <link refid="exceptions_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>gambit/Utils/export_symbols.hpp</label>
        <link refid="export__symbols_8hpp"/>
      </node>
      <node id="21">
        <label>gambit/Utils/local_info.hpp</label>
        <link refid="local__info_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gambit/Utils/safebool.hpp</label>
        <link refid="safebool_8hpp"/>
      </node>
      <node id="61">
        <label>gambit/Utils/slhaea_helpers.hpp</label>
        <link refid="slhaea__helpers_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
        <link refid="standalone__error__handlers_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>gambit/Utils/stringify.hpp</label>
        <link refid="stringify_8hpp"/>
      </node>
      <node id="37">
        <label>gambit/Utils/util_functions.hpp</label>
        <link refid="util__functions_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>gambit/Utils/util_macros.hpp</label>
        <link refid="util__macros_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>gambit/Utils/util_types.hpp</label>
        <link refid="util__types_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>gambit/Utils/variadic_functions.hpp</label>
        <link refid="variadic__functions_8hpp"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>SLHAea/slhaea.h</label>
      </node>
      <node id="55">
        <label>array</label>
      </node>
      <node id="58">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="57">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="23">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="18">
        <label>boost/detail/workaround.hpp</label>
      </node>
      <node id="29">
        <label>boost/preprocessor/arithmetic/sub.hpp</label>
      </node>
      <node id="19">
        <label>boost/preprocessor/cat.hpp</label>
      </node>
      <node id="28">
        <label>boost/preprocessor/comparison/equal.hpp</label>
      </node>
      <node id="17">
        <label>boost/preprocessor/config/config.hpp</label>
      </node>
      <node id="27">
        <label>boost/preprocessor/control/if.hpp</label>
      </node>
      <node id="30">
        <label>boost/preprocessor/punctuation/comma.hpp</label>
      </node>
      <node id="31">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="69">
        <label>boost/preprocessor/seq/elem.hpp</label>
      </node>
      <node id="70">
        <label>boost/preprocessor/seq/for_each_product.hpp</label>
      </node>
      <node id="25">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="26">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="68">
        <label>boost/preprocessor/tuple/to_seq.hpp</label>
      </node>
      <node id="63">
        <label>boost/serialization/strong_typedef.hpp</label>
      </node>
      <node id="16">
        <label>boost/version.hpp</label>
      </node>
      <node id="49">
        <label>cassert</label>
      </node>
      <node id="9">
        <label>cfloat</label>
      </node>
      <node id="38">
        <label>chrono</label>
      </node>
      <node id="39">
        <label>cmath</label>
      </node>
      <node id="43">
        <label>complex</label>
      </node>
      <node id="42">
        <label>cstring</label>
      </node>
      <node id="54">
        <label>deque</label>
      </node>
      <node id="33">
        <label>exception</label>
      </node>
      <node id="53">
        <label>forward_list</label>
      </node>
      <node id="47">
        <label>fstream</label>
      </node>
      <node id="56">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="46">
        <label>iostream</label>
      </node>
      <node id="52">
        <label>list</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="44">
        <label>memory</label>
      </node>
      <node id="59">
        <label>mkpath/mkpath.h</label>
      </node>
      <node id="41">
        <label>omp.h</label>
      </node>
      <node id="8">
        <label>set</label>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="22">
        <label>string</label>
      </node>
      <node id="48">
        <label>type_traits</label>
      </node>
      <node id="14">
        <label>unistd.h</label>
      </node>
      <node id="50">
        <label>unordered_map</label>
      </node>
      <node id="51">
        <label>unordered_set</label>
      </node>
      <node id="35">
        <label>utility</label>
      </node>
      <node id="34">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="SLHASimpleSpec_8cpp_1a73e9f559fb3172a23dbd2b7e1dc9c63c" prot="public" static="no">
        <name>addtomap_EL</name>
        <param><defname>r</defname></param>
        <param><defname>PRODUCT</defname></param>
        <initializer>{                                                                       \
   str key      = BOOST_PP_SEQ_ELEM(0,PRODUCT); /* string map key */    \
   tmp_map[key] = BOOST_PP_SEQ_ELEM(1,PRODUCT); /* function pointer */  \
}</initializer>
        <briefdescription>
<para>Macro to help assign the same function pointers to multiple string keys. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
</para>
<para>Authors:</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@fysik.su.se">benjamin.farmer@fysik.su.se</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 Apr</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:p.scott@imperial.ac.uk">p.scott@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2016 Oct</para>
</simplesect>
<simplesect kind="author"><para>Tomas Gonzalo (<ulink url="mailto:tomas.gonzalo@monash.edu">tomas.gonzalo@monash.edu</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2020 Mar</para>
</simplesect>
<hruler/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/SimpleSpectra/SLHASimpleSpec.cpp" line="34" column="9" bodyfile="Models/src/SimpleSpectra/SLHASimpleSpec.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="SLHASimpleSpec_8cpp_1ab87b0911757e38b4902aa4a2d62a2064" prot="public" static="no">
        <name>addtomap</name>
        <param><defname>__KEYS</defname></param>
        <param><defname>FPTR</defname></param>
        <initializer>BOOST_PP_SEQ_FOR_EACH_PRODUCT(<ref refid="SMSimpleSpec_8cpp_1a73e9f559fb3172a23dbd2b7e1dc9c63c" kindref="member">addtomap_EL</ref>, (BOOST_PP_TUPLE_TO_SEQ(__KEYS))((FPTR)) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Models/src/SimpleSpectra/SLHASimpleSpec.cpp" line="40" column="9" bodyfile="Models/src/SimpleSpectra/SLHASimpleSpec.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///<sp/><sp/>Authors:</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///<sp/><sp/>&lt;!--<sp/>add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify<sp/>--&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///<sp/><sp/>\author<sp/>Ben<sp/>Farmer</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(benjamin.farmer@fysik.su.se)</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/>\date<sp/>2015<sp/>Apr</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/><sp/>\author<sp/>Pat<sp/>Scott</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p.scott@imperial.ac.uk)</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/><sp/>\date<sp/>2016<sp/>Oct</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///<sp/><sp/>\author<sp/>Tomas<sp/>Gonzalo</highlight></codeline>
<codeline lineno="20"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tomas.gonzalo@monash.edu)</highlight></codeline>
<codeline lineno="21"><highlight class="comment">///<sp/><sp/>\date<sp/>2020<sp/>Mar</highlight></codeline>
<codeline lineno="22"><highlight class="comment">///</highlight></codeline>
<codeline lineno="23"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SLHASimpleSpec_8hpp" kindref="compound">gambit/Models/SimpleSpectra/SLHASimpleSpec.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/tuple/to_seq.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/seq/elem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/seq/for_each_product.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment">///<sp/>Macro<sp/>to<sp/>help<sp/>assign<sp/>the<sp/>same<sp/>function<sp/>pointers<sp/>to<sp/>multiple<sp/>string<sp/>keys</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight><highlight class="comment">//<sp/>Relies<sp/>on<sp/>&quot;tmp_map&quot;<sp/>being<sp/>used<sp/>as<sp/>the<sp/>variable<sp/>name<sp/>for<sp/>the<sp/>temporary<sp/>maps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inside<sp/>the<sp/>fill_map<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>addtomap_EL(r,<sp/>PRODUCT)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/>str<sp/>key<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>BOOST_PP_SEQ_ELEM(0,PRODUCT);<sp/></highlight><highlight class="comment">/*<sp/>string<sp/>map<sp/>key<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/>tmp_map[key]<sp/>=<sp/>BOOST_PP_SEQ_ELEM(1,PRODUCT);<sp/></highlight><highlight class="comment">/*<sp/>function<sp/>pointer<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>addtomap(__KEYS,FPTR)<sp/>BOOST_PP_SEQ_FOR_EACH_PRODUCT(addtomap_EL,<sp/>(BOOST_PP_TUPLE_TO_SEQ(__KEYS))((FPTR))<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SLHAea;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Member<sp/>functions<sp/>for<sp/>SLHAeaModel<sp/>class</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Default<sp/>Constructor</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1SLHAeaModel_1ab9e5626476dd8ced7f1d4761e013eed0" kindref="member">SLHAeaModel::SLHAeaModel</ref>()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Constructor<sp/>via<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAeaModel::SLHAeaModel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SLHAea::Coll&amp;<sp/>input)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data(input)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>idea<sp/>what<sp/>kind<sp/>of<sp/>model<sp/>this<sp/>is,<sp/>so<sp/>cannot<sp/>set<sp/>valid<sp/>slha_version.<sp/>Use<sp/>&quot;0&quot;<sp/>for<sp/>&quot;unknown&quot;<sp/>or<sp/>&quot;n/a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>write<sp/>a<sp/>model-specific<sp/>derived<sp/>class<sp/>from<sp/>this,<sp/>be<sp/>sure<sp/>to<sp/>add<sp/>a<sp/>sensible<sp/>check<sp/>for<sp/>this<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overwrite<sp/>what<sp/>we<sp/>set<sp/>here<sp/>in<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapped_slha_version<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>the<sp/>SLHA<sp/>version<sp/>of<sp/>the<sp/>internal<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SLHAeaModel::slha_version()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapped_slha_version;<sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>reference<sp/>to<sp/>internal<sp/>SLHAea<sp/>object</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SLHAea::Coll&amp;<sp/>SLHAeaModel::get_slhaea()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>PDG<sp/>code<sp/>translation<sp/>map,<sp/>for<sp/>special<sp/>cases<sp/>where<sp/>an<sp/>SLHA<sp/>file<sp/>has<sp/>been<sp/>read<sp/>in<sp/>and<sp/>the<sp/>PDG<sp/>codes<sp/>changed.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>int&gt;&amp;<sp/>SLHAeaModel::PDG_translator()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="72"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PDG_translation_map;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Helper<sp/>functions<sp/>to<sp/>do<sp/>error<sp/>checking<sp/>for<sp/>SLHAea<sp/>object<sp/>contents</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>One<sp/>index</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SLHAeaModel::getdata(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="80"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>to&lt;double&gt;(data.at(block).at(index).at(1));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range&amp;<sp/>e)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>errmsg;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errmsg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>accessing<sp/>data<sp/>at<sp/>index<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;index&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>block<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;block&lt;&lt;</highlight><highlight class="stringliteral">&quot;.<sp/>Please<sp/>check<sp/>that<sp/>the<sp/>SLHAea<sp/>object<sp/>was<sp/>properly<sp/>filled.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errmsg<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(Received<sp/>out_of_range<sp/>error<sp/>from<sp/>SLHAea<sp/>class<sp/>with<sp/>message:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1ab8f36a16d614ad49a62f810ef8ce8c84" kindref="member">utils_error</ref>().<ref refid="classGambit_1_1exception_1ab12c6189c744fdc119c6377d288ae961" kindref="member">raise</ref>(LOCAL_INFO,errmsg.str());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Two<sp/>indices</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SLHAeaModel::getdata(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="98"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>to&lt;double&gt;(data.at(block).at(i,j).at(2));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range&amp;<sp/>e)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>errmsg;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errmsg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>accessing<sp/>data<sp/>at<sp/>index<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;i&lt;&lt;</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">&lt;&lt;j&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>block<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;block&lt;&lt;</highlight><highlight class="stringliteral">&quot;.<sp/>Please<sp/>check<sp/>that<sp/>the<sp/>SLHAea<sp/>object<sp/>was<sp/>properly<sp/>filled.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errmsg<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(Received<sp/>out_of_range<sp/>error<sp/>from<sp/>SLHAea<sp/>class<sp/>with<sp/>message:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGambit_1ab8f36a16d614ad49a62f810ef8ce8c84" kindref="member">utils_error</ref>().<ref refid="classGambit_1_1exception_1ab12c6189c744fdc119c6377d288ae961" kindref="member">raise</ref>(LOCAL_INFO,errmsg.str());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>block<sp/>and<sp/>entry<sp/>exist,<sp/>1<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SLHAeaModel::checkdata(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.find(block)<sp/>==<sp/>data.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea::Block::key_type<sp/>key(1);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key[0]<sp/>=<sp/>std::to_string(i);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.at(block).find(key)<sp/>!=<sp/>data.at(block).end())</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="128"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>Gambit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Models/src/SimpleSpectra/SLHASimpleSpec.cpp"/>
  </compounddef>
</doxygen>
