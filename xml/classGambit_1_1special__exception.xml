<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1special__exception" kind="class" language="C++" prot="public">
    <compoundname>Gambit::special_exception</compoundname>
    <basecompoundref prot="public" virt="virtual">std::exception</basecompoundref>
    <derivedcompoundref refid="classGambit_1_1halt__loop__exception" prot="public" virt="non-virtual">Gambit::halt_loop_exception</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1invalid__loop__iteration__exception" prot="public" virt="non-virtual">Gambit::invalid_loop_iteration_exception</derivedcompoundref>
    <derivedcompoundref refid="classGambit_1_1invalid__point__exception" prot="public" virt="non-virtual">Gambit::invalid_point_exception</derivedcompoundref>
    <includes refid="exceptions_8hpp" local="no">exceptions.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGambit_1_1special__exception_1a9fa91e276005dc71891a3d4053078987" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Gambit::special_exception::invalidcode</definition>
        <argsstring></argsstring>
        <name>invalidcode</name>
        <qualifiedname>Gambit::special_exception::invalidcode</qualifiedname>
        <briefdescription>
<para>Integer code used for exceptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="214" column="11" bodyfile="Utils/include/gambit/Utils/exceptions.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGambit_1_1special__exception_1a43ef9e28ba3b1c8f0fecc7e688f0b974" prot="private" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* Gambit::special_exception::myWhat</definition>
        <argsstring></argsstring>
        <name>myWhat</name>
        <qualifiedname>Gambit::special_exception::myWhat</qualifiedname>
        <briefdescription>
<para>What this exception is (for returning with what method). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="219" column="18" bodyfile="Utils/include/gambit/Utils/exceptions.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classGambit_1_1special__exception_1a2f78277d29f1a4746c405f6ef4689de0" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gambit::special_exception::myMessage</definition>
        <argsstring></argsstring>
        <name>myMessage</name>
        <qualifiedname>Gambit::special_exception::myMessage</qualifiedname>
        <briefdescription>
<para>The message passed when this exception is raised. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="224" column="19" bodyfile="Utils/include/gambit/Utils/exceptions.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1special__exception_1af371d8404a05ae0225e39d68aff0e072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::special_exception::special_exception</definition>
        <argsstring>(const char *)</argsstring>
        <name>special_exception</name>
        <qualifiedname>Gambit::special_exception::special_exception</qualifiedname>
        <param>
          <type>const char *</type>
          <defname>what</defname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>GAMBIT special exception class methods.</para>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="199" column="7" bodyfile="Utils/src/exceptions.cpp" bodystart="365" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1special__exception_1a0ccabcde1e54e7ddca8b351c44a8abfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Gambit::special_exception::~special_exception</definition>
        <argsstring>()</argsstring>
        <name>~special_exception</name>
        <qualifiedname>Gambit::special_exception::~special_exception</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="202" column="15" bodyfile="Utils/include/gambit/Utils/exceptions.hpp" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1special__exception_1aa715b55d2dc6b1ea7010d111d0b3586f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char * Gambit::special_exception::what</definition>
        <argsstring>() const</argsstring>
        <name>what</name>
        <qualifiedname>Gambit::special_exception::what</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Retrieve the identity of the exception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="205" column="26" bodyfile="Utils/src/exceptions.cpp" bodystart="368" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1special__exception_1a58bd2fae32e974e8cf718f36c8863e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::special_exception::message</definition>
        <argsstring>()</argsstring>
        <name>message</name>
        <qualifiedname>Gambit::special_exception::message</qualifiedname>
        <briefdescription>
<para>Retrieve the message that this exception was raised with. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="208" column="19" bodyfile="Utils/src/exceptions.cpp" bodystart="376" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1special__exception_1a890c39032e0269e56ceada0621d76691" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::special_exception::raise</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>raise</name>
        <qualifiedname>Gambit::special_exception::raise</qualifiedname>
        <reimplementedby refid="classGambit_1_1invalid__point__exception_1ac2a68704b58ec72f7fb16fcbddd361fc">raise</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
<para>Raise the exception, i.e. throw it. </para>
        </briefdescription>
        <detaileddescription>
<para>Raise the exception, i.e. throw it with a message. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Utils/include/gambit/Utils/exceptions.hpp" line="211" column="20" bodyfile="Utils/src/exceptions.cpp" bodystart="387" bodyend="394"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>GAMBIT special exception class. Not logged, meant for always catching. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Gambit::halt_loop_exception</label>
        <link refid="classGambit_1_1halt__loop__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Gambit::invalid_loop_iteration_exception</label>
        <link refid="classGambit_1_1invalid__loop__iteration__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Gambit::invalid_point_exception</label>
        <link refid="classGambit_1_1invalid__point__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Gambit::special_exception</label>
        <link refid="classGambit_1_1special__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Gambit::special_exception</label>
        <link refid="classGambit_1_1special__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>myMessage</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
    </collaborationgraph>
    <location file="Utils/include/gambit/Utils/exceptions.hpp" line="194" column="3" bodyfile="Utils/include/gambit/Utils/exceptions.hpp" bodystart="195" bodyend="226"/>
    <listofallmembers>
      <member refid="classGambit_1_1special__exception_1a9fa91e276005dc71891a3d4053078987" prot="public" virt="non-virtual"><scope>Gambit::special_exception</scope><name>invalidcode</name></member>
      <member refid="classGambit_1_1special__exception_1a58bd2fae32e974e8cf718f36c8863e75" prot="public" virt="non-virtual"><scope>Gambit::special_exception</scope><name>message</name></member>
      <member refid="classGambit_1_1special__exception_1a2f78277d29f1a4746c405f6ef4689de0" prot="protected" virt="non-virtual"><scope>Gambit::special_exception</scope><name>myMessage</name></member>
      <member refid="classGambit_1_1special__exception_1a43ef9e28ba3b1c8f0fecc7e688f0b974" prot="private" virt="non-virtual"><scope>Gambit::special_exception</scope><name>myWhat</name></member>
      <member refid="classGambit_1_1special__exception_1a890c39032e0269e56ceada0621d76691" prot="public" virt="virtual"><scope>Gambit::special_exception</scope><name>raise</name></member>
      <member refid="classGambit_1_1special__exception_1af371d8404a05ae0225e39d68aff0e072" prot="public" virt="non-virtual"><scope>Gambit::special_exception</scope><name>special_exception</name></member>
      <member refid="classGambit_1_1special__exception_1aa715b55d2dc6b1ea7010d111d0b3586f" prot="public" virt="virtual"><scope>Gambit::special_exception</scope><name>what</name></member>
      <member refid="classGambit_1_1special__exception_1a0ccabcde1e54e7ddca8b351c44a8abfc" prot="public" virt="virtual"><scope>Gambit::special_exception</scope><name>~special_exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
