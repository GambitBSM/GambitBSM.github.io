<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="postprocessor__2_80_80_2postprocessor_8hpp" kind="file" language="C++">
    <compoundname>postprocessor_2.0.0/postprocessor.hpp</compoundname>
    <includes refid="scanner__plugin_8hpp" local="yes">gambit/ScannerBit/scanner_plugin.hpp</includes>
    <includes refid="postprocessor__2_80_80_2chunks_8hpp" local="yes">gambit/ScannerBit/scanners/postprocessor_2.0.0/chunks.hpp</includes>
    <includedby refid="postprocessor__2_80_80_2postprocessor_8cpp" local="yes">postprocessor.cpp</includedby>
    <includedby refid="postprocessor__2_80_80_2postprocessor__object_8cpp" local="yes">postprocessor_object.cpp</includedby>
    <incdepgraph>
      <node id="35">
        <label>gambit/ScannerBit/base_prior.hpp</label>
        <link refid="base__prior_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>gambit/ScannerBit/factory_defs.hpp</label>
        <link refid="factory__defs_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>gambit/ScannerBit/plugin_defs.hpp</label>
        <link refid="plugin__defs_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gambit/ScannerBit/plugin_details.hpp</label>
        <link refid="plugin__details_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>gambit/ScannerBit/plugin_loader.hpp</label>
        <link refid="plugin__loader_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gambit/ScannerBit/plugin_macros.hpp</label>
        <link refid="plugin__macros_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>gambit/ScannerBit/printer_interface.hpp</label>
        <link refid="printer__interface_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gambit/ScannerBit/scanner_plugin.hpp</label>
        <link refid="scanner__plugin_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gambit/ScannerBit/scanner_utils.hpp</label>
        <link refid="scanner__utils_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>gambit/ScannerBit/scanners/postprocessor_2.0.0/chunks.hpp</label>
        <link refid="postprocessor__2_80_80_2chunks_8hpp"/>
      </node>
      <node id="1">
        <label>postprocessor.hpp</label>
        <link refid="postprocessor__2_80_80_2postprocessor_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="39">
        <label>boost/enable_shared_from_this.hpp</label>
      </node>
      <node id="11">
        <label>boost/iterator/zip_iterator.hpp</label>
      </node>
      <node id="12">
        <label>boost/range.hpp</label>
      </node>
      <node id="38">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="10">
        <label>cctype</label>
      </node>
      <node id="28">
        <label>gambit/Printers/basebaseprinter.hpp</label>
      </node>
      <node id="27">
        <label>gambit/Printers/baseprintermanager.hpp</label>
      </node>
      <node id="13">
        <label>gambit/Utils/exceptions.hpp</label>
      </node>
      <node id="16">
        <label>gambit/Utils/factory_registry.hpp</label>
      </node>
      <node id="14">
        <label>gambit/Utils/local_info.hpp</label>
      </node>
      <node id="40">
        <label>gambit/Utils/signal_handling.hpp</label>
      </node>
      <node id="29">
        <label>gambit/Utils/type_index.hpp</label>
      </node>
      <node id="34">
        <label>gambit/Utils/util_functions.hpp</label>
      </node>
      <node id="15">
        <label>gambit/Utils/util_macros.hpp</label>
      </node>
      <node id="17">
        <label>gambit/Utils/variadic_functions.hpp</label>
      </node>
      <node id="18">
        <label>gambit/Utils/yaml_options.hpp</label>
      </node>
      <node id="33">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="22">
        <label>map</label>
      </node>
      <node id="6">
        <label>ostream</label>
      </node>
      <node id="23">
        <label>set</label>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
      <node id="24">
        <label>typeinfo</label>
      </node>
      <node id="25">
        <label>unistd.h</label>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="20">
        <label>vector</label>
      </node>
      <node id="32">
        <label>yaml-cpp/yaml.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>postprocessor.hpp</label>
        <link refid="postprocessor__2_80_80_2postprocessor_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>postprocessor.cpp</label>
        <link refid="postprocessor__2_80_80_2postprocessor_8cpp"/>
      </node>
      <node id="3">
        <label>postprocessor_object.cpp</label>
        <link refid="postprocessor__2_80_80_2postprocessor__object_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structGambit_1_1PostProcessor_1_1PPOptions" prot="public">Gambit::PostProcessor::PPOptions</innerclass>
    <innerclass refid="classGambit_1_1PostProcessor_1_1PPDriver" prot="public">Gambit::PostProcessor::PPDriver</innerclass>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Printers">Gambit::Printers</innernamespace>
    <innernamespace refid="namespaceGambit_1_1PostProcessor">Gambit::PostProcessor</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>&quot;Postprocessing&quot; scanner plugin. Header file</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:b.farmer@imperial.ac.uk">b.farmer@imperial.ac.uk</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2018, Sep</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*********************************************</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">///<sp/><sp/>\file</highlight></codeline>
<codeline lineno="4"><highlight class="comment">///</highlight></codeline>
<codeline lineno="5"><highlight class="comment">///<sp/><sp/>&quot;Postprocessing&quot;<sp/>scanner<sp/>plugin.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">///<sp/><sp/>Header<sp/>file</highlight></codeline>
<codeline lineno="7"><highlight class="comment">///</highlight></codeline>
<codeline lineno="8"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="9"><highlight class="comment">///</highlight></codeline>
<codeline lineno="10"><highlight class="comment">///<sp/><sp/>Authors<sp/>(add<sp/>name<sp/>and<sp/>date<sp/>if<sp/>you<sp/>modify):</highlight></codeline>
<codeline lineno="11"><highlight class="comment">///</highlight></codeline>
<codeline lineno="12"><highlight class="comment">///<sp/><sp/>\author<sp/>Ben<sp/>Farmer</highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b.farmer@imperial.ac.uk)</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/><sp/>\date<sp/>2018,<sp/>Sep</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scanner__plugin_8hpp" kindref="compound">gambit/ScannerBit/scanner_plugin.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="postprocessor__2_80_80_2chunks_8hpp" kindref="compound">gambit/ScannerBit/scanners/postprocessor_2.0.0/chunks.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__postprocessor_2_0_0_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__postprocessor_2_0_0_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declare<sp/>this<sp/>template<sp/>specialisation<sp/>as<sp/>extern<sp/>so<sp/>that<sp/>we<sp/>use<sp/>the<sp/>definition<sp/>compiled<sp/>into<sp/>baseprinter.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::size_t<sp/>Gambit::Printers::getTypeID&lt;double&gt;();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>///<sp/>Forward<sp/>declaration</highlight></codeline>
<codeline lineno="30" refid="namespaceGambit_1_1Printers" refkind="compound"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Printers</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BaseBaseReader;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">PostProcessor</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@{<sp/>Helper<sp/>functions<sp/>for<sp/>performing<sp/>resume<sp/>related<sp/>tasks</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Answer<sp/>queries<sp/>as<sp/>to<sp/>whether<sp/>a<sp/>given<sp/>dataset<sp/>index<sp/>has<sp/>been<sp/>postprocessed<sp/>in<sp/>a<sp/>previous<sp/>run<sp/>or<sp/>not</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>point_done(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ChunkSet<sp/>done_chunks,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Get<sp/>&apos;effective&apos;<sp/>start<sp/>and<sp/>end<sp/>positions<sp/>for<sp/>a<sp/>processing<sp/>batch</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>i.e.<sp/>simply<sp/>divides<sp/>up<sp/>an<sp/>integer<sp/>into<sp/>the<sp/>most<sp/>even<sp/>parts<sp/>possible</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>over<sp/>a<sp/>given<sp/>number<sp/>of<sp/>processes</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structChunk" kindref="compound">Chunk</ref><sp/>get_effective_chunk(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>total_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numtasks);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Compute<sp/>start/end<sp/>indices<sp/>for<sp/>a<sp/>given<sp/>rank<sp/>process,<sp/>given<sp/>previous<sp/>&quot;done_chunk&quot;<sp/>data.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structChunk" kindref="compound">Chunk</ref><sp/>get_my_chunk(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dset_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ChunkSet&amp;<sp/>done_chunks,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numtasks);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Read<sp/>through<sp/>resume<sp/>data<sp/>files<sp/>and<sp/>reconstruct<sp/>which<sp/>chunks<sp/>of<sp/>points<sp/>have<sp/>already<sp/>been<sp/>processed</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ChunkSet<sp/>get_done_points(Gambit::Printers::BaseBaseReader&amp;<sp/>filebase);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Simplify<sp/>a<sp/>ChunkSet<sp/>by<sp/>merging<sp/>chunks<sp/>which<sp/>overlap.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ChunkSet<sp/>merge_chunks(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ChunkSet&amp;);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>chunk<sp/>signals<sp/>that<sp/>the<sp/>run<sp/>is<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref><sp/>stopchunk<sp/>=<sp/><ref refid="structChunk" kindref="compound">Chunk</ref>(0,0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Write<sp/>resume<sp/>data<sp/>files</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>These<sp/>specify<sp/>which<sp/>chunks<sp/>of<sp/>points<sp/>have<sp/>been<sp/>processed<sp/>during<sp/>this<sp/>run</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>record_done_points(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ChunkSet&amp;<sp/>done_chunks,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>&amp;<sp/>mydone,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filebase,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gather<sp/>a<sp/>bunch<sp/>of<sp/>ints<sp/>from<sp/>all<sp/>processes<sp/>(COLLECTIVE<sp/>OPERATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>WITH_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>allgather_int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myval,<sp/>GMPI::Comm&amp;<sp/>comm);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>@}</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Options<sp/>object<sp/>for<sp/>PPDriver</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>See<sp/>matching<sp/>options<sp/>in<sp/>PPDriver<sp/>class<sp/>for<sp/>description</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PPOptions</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>all_params;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>data_labels;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>data_labels_copy;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>add_to_logl;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>subtract_from_logl;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,std::string&gt;<sp/>renaming_scheme;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,double&gt;<sp/>cut_less_than;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,double&gt;<sp/>cut_greater_than;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>discard_points_outside_cuts;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>update_interval;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>discard_old_logl;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>logl_purpose_name;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>reweighted_loglike_name;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>root;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numtasks;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>chunksize;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>WITH_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GMPI::Comm*<sp/>comm;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PPOptions()<sp/>:<sp/>comm(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Driver<sp/>class<sp/>to<sp/>handle<sp/>the<sp/>actual<sp/>postprocessing<sp/>tasks</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PPDriver</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PPDriver();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PPDriver(Printers::BaseBaseReader*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>Printers::BaseBasePrinter*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/>Scanner::like_ptr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PPOptions&amp;);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_settings();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run_main_loop(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>&amp;<sp/>mychunks);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>get_ModelParameters(std::unordered_map&lt;std::string,<sp/>double&gt;&amp;<sp/>outputMap);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structChunk" kindref="compound">Chunk</ref><sp/>get_new_chunk();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_done_chunks(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ChunkSet&amp;<sp/>done_chunks);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>next_point_index();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>get_total_length();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>REDIST_REQ<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Safe<sp/>accessors<sp/>for<sp/>pointer<sp/>data</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printers::BaseBaseReader&amp;<sp/>getReader();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printers::BaseBasePrinter&amp;<sp/>getPrinter();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scanner::like_ptr<sp/>getLogLike();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>The<sp/>reader<sp/>object<sp/>in<sp/>use<sp/>for<sp/>the<sp/>scan</highlight></codeline>
<codeline lineno="121"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printers::BaseBaseReader*<sp/>reader;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>The<sp/>printer<sp/>for<sp/>the<sp/>primary<sp/>output<sp/>stream<sp/>of<sp/>the<sp/>scan</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printers::BaseBasePrinter*<sp/><ref refid="printer__interface_8hpp_1a3c6ca4999cbe5a04947a903788d93ee7" kindref="member">printer</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>The<sp/>likelihood<sp/>container<sp/>plugin</highlight></codeline>
<codeline lineno="127"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scanner::like_ptr<sp/>LogLike;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Names<sp/>of<sp/>new<sp/>output<sp/>to<sp/>be<sp/>printed,<sp/>i.e.<sp/>output<sp/>labels<sp/>not<sp/>present<sp/>in<sp/>the<sp/>input<sp/>file.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>new_params;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Models<sp/>required<sp/>by<sp/>the<sp/>scan</highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,std::vector&lt;std::string&gt;&gt;<sp/>req_models;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Map<sp/>to<sp/>retrieve<sp/>the<sp/>&quot;model::parameter&quot;<sp/>version<sp/>of<sp/>the<sp/>parameter<sp/>name</highlight></codeline>
<codeline lineno="136"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,std::map&lt;std::string,std::string&gt;&gt;<sp/>longname;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Total<sp/>length<sp/>of<sp/>input<sp/>dataset</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>total_length;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Next<sp/>point<sp/>scheduled<sp/>to<sp/>be<sp/>distributed<sp/>for<sp/>processing</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>next_point;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Size<sp/>of<sp/>chunks<sp/>to<sp/>distribute<sp/>to<sp/>worker<sp/>processes</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>chunksize;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Chunks<sp/>describing<sp/>the<sp/>points<sp/>that<sp/>can<sp/>be<sp/>auto-skipped<sp/>(because<sp/>they<sp/>have<sp/>been<sp/>processed<sp/>previously)</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChunkSet<sp/>done_chunks;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Names<sp/>of<sp/>all<sp/>output<sp/>that<sp/>the<sp/>primary<sp/>printer<sp/>knows<sp/>about<sp/>at<sp/>startup<sp/>(things<sp/>GAMBIT<sp/>plans<sp/>to<sp/>print<sp/>from<sp/>the<sp/>likelihood<sp/>loop)</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>all_params;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Labels<sp/>of<sp/>all<sp/>output<sp/>datasets</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>data_labels;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Labels<sp/>of<sp/>output<sp/>datasets<sp/>to<sp/>be<sp/>copied</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>data_labels_copy;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>List<sp/>of<sp/>likelihoods<sp/>in<sp/>old<sp/>output<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>newly<sp/>computed<sp/>likelihood</highlight></codeline>
<codeline lineno="160"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>add_to_logl;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>List<sp/>of<sp/>likelihoods<sp/>in<sp/>old<sp/>output<sp/>to<sp/>be<sp/>subtracted<sp/>from<sp/>the<sp/>newly<sp/>computed<sp/>likelihood</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>subtract_from_logl;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Map<sp/>for<sp/>renaming<sp/>old<sp/>datasets<sp/>in<sp/>the<sp/>new<sp/>output</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Keys<sp/>are<sp/>&quot;in_label&quot;,<sp/>values<sp/>are<sp/>&quot;out_label&quot;</highlight></codeline>
<codeline lineno="167"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,std::string&gt;<sp/>renaming_scheme;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Cut<sp/>maps,<sp/>for<sp/>selecting<sp/>only<sp/>points<sp/>in<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>datasets<sp/>which<sp/>pass<sp/>certain<sp/>criteria.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Keys<sp/>are<sp/>&quot;in_label&quot;,<sp/>values<sp/>are<sp/>the<sp/>cut<sp/>boundaries.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,double&gt;<sp/>cut_less_than;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,double&gt;<sp/>cut_greater_than;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Flag<sp/>to<sp/>throw<sp/>away<sp/>points<sp/>that<sp/>don&apos;t<sp/>pass<sp/>the<sp/>cuts<sp/>(rather<sp/>than<sp/>copying<sp/>them<sp/>un-processed)</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>discard_points_outside_cuts;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Number<sp/>of<sp/>iterations<sp/>between<sp/>progress<sp/>reports.<sp/>&apos;0&apos;<sp/>means<sp/>no<sp/>updates</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>update_interval;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Allow<sp/>old<sp/>likelihood<sp/>components<sp/>to<sp/>be<sp/>overwritten<sp/>by<sp/>newly<sp/>calculated<sp/>values?</highlight></codeline>
<codeline lineno="182"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>discard_old_logl;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Label<sp/>assigned<sp/>to<sp/>the<sp/>output<sp/>of<sp/>the<sp/>likelihood<sp/>container</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>logl_purpose_name;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>The<sp/>label<sp/>to<sp/>assign<sp/>to<sp/>the<sp/>results<sp/>of<sp/>add_to_like<sp/>and<sp/>subtract_from_like<sp/>operations.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>reweighted_loglike_name;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>Path<sp/>to<sp/>save<sp/>resume<sp/>files</highlight></codeline>
<codeline lineno="191"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>root;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>MPI<sp/>variables<sp/>(set<sp/>manually<sp/>rather<sp/>than<sp/>inferred,<sp/>to<sp/>allow<sp/>for<sp/>&quot;virtual<sp/>rank&quot;<sp/>settings</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>WITH_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GMPI::Comm*<sp/>comm;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/>If<sp/>true,<sp/>create<sp/>lots<sp/>of<sp/>log<sp/>messages<sp/>explaining<sp/>exactly<sp/>what<sp/>the<sp/>postprocessor<sp/>is<sp/>doing</highlight></codeline>
<codeline lineno="200"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//o.all_params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//o.data_labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//o.data_labels_copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//o.add_to_logl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//o.subtract_from_logl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//o.renaming_scheme</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//o.cut_less_than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//o.cut_greater_than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//o.discard_points_outside_cuts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//o.update_interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//o.rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="ScannerBit/include/gambit/ScannerBit/scanners/postprocessor_2.0.0/postprocessor.hpp"/>
  </compounddef>
</doxygen>
