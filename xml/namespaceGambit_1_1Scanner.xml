<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1Scanner" kind="namespace" language="C++">
    <compoundname>Gambit::Scanner</compoundname>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type____" prot="public">Gambit::Scanner::__find_variadic_type__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type_____3_01false_00_01false_00_01true_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type__&lt; false, false, true, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type_____3_01false_00_01true_00_01b2_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type__&lt; false, true, b2, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type_____3_01true_00_01b1_00_01b2_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type__&lt; true, b1, b2, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__convert____" prot="public">Gambit::Scanner::__find_variadic_type_convert__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__convert_____3_01b_00_01Tc_00_01T1_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type_convert__&lt; b, Tc, T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__convert_____3_01true_00_01Tc_00_01T1_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type_convert__&lt; true, Tc, T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__not__exact____" prot="public">Gambit::Scanner::__find_variadic_type_not_exact__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__not__exact_____3_01void_07args_8_8_8_08_00_e143deac0e765eb009f74255cae70cdb" prot="public">Gambit::Scanner::__find_variadic_type_not_exact__&lt; void(args...), ret(args...), T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__not__exact_____3_01void_07args_8_8_8_08_00_07dc90b6eaf941e6db44db3b27790d79" prot="public">Gambit::Scanner::__find_variadic_type_not_exact__&lt; void(args...), ret(args2...), T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____is__args__convertible____" prot="public">Gambit::Scanner::__is_args_convertible__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____is__args__convertible_____3_01false_00_01T1_00_01T2_01_4" prot="public">Gambit::Scanner::__is_args_convertible__&lt; false, T1, T2 &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__convert__" prot="public">Gambit::Scanner::_find_variadic_type_convert_</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__convert___3_01Tc_00_01T1_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::_find_variadic_type_convert_&lt; Tc, T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__not__exact__" prot="public">Gambit::Scanner::_find_variadic_type_not_exact_</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__not__exact___3_01T1_00_01T2_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::_find_variadic_type_not_exact_&lt; T1, T2, T... &gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Factory__Base" prot="public">Gambit::Scanner::Factory_Base</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type" prot="public">Gambit::Scanner::find_variadic_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__convert" prot="public">Gambit::Scanner::find_variadic_type_convert</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__convert_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::find_variadic_type_convert&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact" prot="public">Gambit::Scanner::find_variadic_type_exact</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact_3_01void_07args_8_8_8_08_00_01ret_07args_8_8_8_08_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::find_variadic_type_exact&lt; void(args...), ret(args...), T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact_3_01void_07args_8_8_8_08_00_01ret_07args2_8_8_8_08_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::find_variadic_type_exact&lt; void(args...), ret(args2...), T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact_3_01void_07args_8_8_8_08_4" prot="public">Gambit::Scanner::find_variadic_type_exact&lt; void(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__not__exact" prot="public">Gambit::Scanner::find_variadic_type_not_exact</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__not__exact_3_01void_07args_8_8_8_08_4" prot="public">Gambit::Scanner::find_variadic_type_not_exact&lt; void(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1first__arg__type" prot="public">Gambit::Scanner::first_arg_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1first__arg__type_3_01ret_07_08_4" prot="public">Gambit::Scanner::first_arg_type&lt; ret()&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1first__arg__type_3_01ret_07T_00_01args_8_8_8_08_4" prot="public">Gambit::Scanner::first_arg_type&lt; ret(T, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1func__ptr__type" prot="public">Gambit::Scanner::func_ptr_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1func__ptr__type_3_01void_07args_8_8_8_08_4" prot="public">Gambit::Scanner::func_ptr_type&lt; void(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Base" prot="public">Gambit::Scanner::Function_Base</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Base_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Function_Base&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Deleter" prot="public">Gambit::Scanner::Function_Deleter</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Deleter_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Function_Deleter&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1is__args__convertible" prot="public">Gambit::Scanner::is_args_convertible</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1is__args__convertible_3_01ret1_07_08_00_01ret2_07_08_4" prot="public">Gambit::Scanner::is_args_convertible&lt; ret1(), ret2()&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1is__args__convertible_3_01ret1_07arg1_00_01args1_8_8_8_08_00_01ret2_07arg2_00_01args2_8_8_8_08_4" prot="public">Gambit::Scanner::is_args_convertible&lt; ret1(arg1, args1...), ret2(arg2, args2...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1like__ptr" prot="public">Gambit::Scanner::like_ptr</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Multi__Scanner__Plugin__Function" prot="public">Gambit::Scanner::Multi_Scanner_Plugin_Function</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Multi__Scanner__Plugin__Function_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Multi_Scanner_Plugin_Function&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Plugin__Function__Factory" prot="public">Gambit::Scanner::Plugin_Function_Factory</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1point__info" prot="public">Gambit::Scanner::point_info</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1RanNumGen" prot="public">Gambit::Scanner::RanNumGen</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1remove__all__func" prot="public">Gambit::Scanner::remove_all_func</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1remove__all__func_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::remove_all_func&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1resume__params__func" prot="public">Gambit::Scanner::resume_params_func</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1return__type" prot="public">Gambit::Scanner::return_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1return__type_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::return_type&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Scan__Manager" prot="public">Gambit::Scanner::Scan_Manager</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1scan__ptr" prot="public">Gambit::Scanner::scan_ptr</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Scanner__Plugin__Function" prot="public">Gambit::Scanner::Scanner_Plugin_Function</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Scanner__Plugin__Function_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Scanner_Plugin_Function&lt; ret(args...)&gt;</innerclass>
    <innernamespace refid="namespaceGambit_1_1Scanner_1_1Errors">Gambit::Scanner::Errors</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Scanner_1_1Plugins">Gambit::Scanner::Plugins</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1ab5d99bc0cd1c70bce78b70cf2b1b9f3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::input_variadic_vector</definition>
        <argsstring>(std::vector&lt; void * &gt; &amp;)</argsstring>
        <name>input_variadic_vector</name>
        <qualifiedname>Gambit::Scanner::input_variadic_vector</qualifiedname>
        <param>
          <type>std::vector&lt; void * &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inputs a varibadic pack into a vector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="226" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1abea80c5d8cc968107603584e9322dee6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args</declname>
            <defname>args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Scanner::input_variadic_vector</definition>
        <argsstring>(std::vector&lt; void * &gt; &amp;input, const T &amp;value, const args &amp;... params)</argsstring>
        <name>input_variadic_vector</name>
        <qualifiedname>Gambit::Scanner::input_variadic_vector</qualifiedname>
        <param>
          <type>std::vector&lt; void * &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const args &amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="229" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="229" bodyend="233"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1a0176111c61cf3b0e217ba606c6e1bfc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ret</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_floating_point&lt; ret &gt;::value, ret &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_floating_point&lt; ret &gt;::value, ret &gt;::type Gambit::Scanner::scanner_plugin_def_ret</definition>
        <argsstring>()</argsstring>
        <name>scanner_plugin_def_ret</name>
        <qualifiedname>Gambit::Scanner::scanner_plugin_def_ret</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Turns a type into an object. If it&apos;s a floating point number, it replaces it with a big negative number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="291" column="41" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a22a73974cab9d340f36c7f8d0778f036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ret</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; ret &gt;::value, ret &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; ret &gt;::value, ret &gt;::type Gambit::Scanner::scanner_plugin_def_ret</definition>
        <argsstring>()</argsstring>
        <name>scanner_plugin_def_ret</name>
        <qualifiedname>Gambit::Scanner::scanner_plugin_def_ret</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="297" column="41" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="297" bodyend="300"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::Scanner::pow</definition>
        <argsstring>(const double &amp;a)</argsstring>
        <name>pow</name>
        <qualifiedname>Gambit::Scanner::pow</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Outputs a^i </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="310" column="23" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a12f1eb5a1b4d1a1b92b9257c7a1534f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::Scanner::pow&lt; 0 &gt;</definition>
        <argsstring>(const double &amp;)</argsstring>
        <name>pow&lt; 0 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 0 &gt;</qualifiedname>
        <param>
          <type>const double &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="316" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1aaf5aa59effacc01dc81a161bbbb87177" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::Scanner::pow&lt; 1 &gt;</definition>
        <argsstring>(const double &amp;a)</argsstring>
        <name>pow&lt; 1 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 1 &gt;</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="322" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a79dec30b20c4f72a1e0302f04cdbdd2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::Scanner::pow</definition>
        <argsstring>(const int &amp;a)</argsstring>
        <name>pow</name>
        <qualifiedname>Gambit::Scanner::pow</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="328" column="20" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a42f8f922a27661ef8990ba2c6e5c5196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::Scanner::pow&lt; 0 &gt;</definition>
        <argsstring>(const int &amp;)</argsstring>
        <name>pow&lt; 0 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 0 &gt;</qualifiedname>
        <param>
          <type>const int &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="334" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a619ef25d6c3225a7cd8b66ac5889feb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::Scanner::pow&lt; 1 &gt;</definition>
        <argsstring>(const int &amp;a)</argsstring>
        <name>pow&lt; 1 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 1 &gt;</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="340" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="340" bodyend="343"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1ac7baae280074b7522725e993ea1fe79b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, std::ostream &amp; &gt;::type Gambit::Scanner::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const T &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::Scanner::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Outputs containers to an output stream </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="608" column="42" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="609" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1aa29ba2480ed53f130694721edd8fb355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, std::ostream &amp; &gt;::type Gambit::Scanner::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const T &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::Scanner::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="627" column="42" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="628" bodyend="631"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1a5fb11fbdaa961171fc3b747c6c03c7cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value &amp;&amp;!<ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;!is_container&lt; T &gt;::value &amp;&amp;!is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, T &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Functions to output data for the plugin resume functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="642" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="642" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a0596e326ba277dd1f645d8abf9d844d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, T &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="650" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="650" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a349ae44ebd8d00af974241a6ba5a5a8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, T &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="660" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="660" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a4f82b923e3264c71eb1180b96f2714a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value &amp;&amp;!<ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;!is_container&lt; T &gt;::value &amp;&amp;!is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, T &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="668" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="668" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a6805e32e26f1f135a67c2374361d384f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, T &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="676" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="676" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1ae489528b0693a0a22ece18f9d9fcf31d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, T &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="686" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="686" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a8bafd221af158f2333c3447b23a4c17f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value &amp;&amp;!<ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, size_t &gt;::type</type>
        <definition>std::enable_if&lt;!is_container&lt; T &gt;::value &amp;&amp;!is_pair&lt; T &gt;::value, size_t &gt;::type Gambit::Scanner::resume_size_of</definition>
        <argsstring>(T &amp;)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="694" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="694" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a2c71241637d1649c8e272f6ea9293416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, size_t &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, size_t &gt;::type Gambit::Scanner::resume_size_of</definition>
        <argsstring>(T &amp;param)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="701" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a92e6dc5d2bfd538a6356843ab950f38d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, size_t &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, size_t &gt;::type Gambit::Scanner::resume_size_of</definition>
        <argsstring>(T &amp;)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="708" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="708" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a8e8474e9d38822e2f4ca862671194277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, std::string &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="713" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="713" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a58ada9d1a800fa0c46474fbe08d674b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, std::string &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="718" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="718" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1acd468876f6a4c4221867aa50384c8c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Gambit::Scanner::resume_size_of</definition>
        <argsstring>(std::string &amp;param)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="723" column="23" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="723" bodyend="726"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="plugin__defs_8hpp_1adbd0bb3eda81b94ef9a6ef66744d3b61" prot="public" static="no">
        <type><ref refid="classGambit_1_1Priors_1_1BasePrior" kindref="compound">Priors::BasePrior</ref></type>
        <definition>typedef Priors::BasePrior Gambit::Scanner::prior_interface</definition>
        <argsstring></argsstring>
        <name>prior_interface</name>
        <qualifiedname>Gambit::Scanner::prior_interface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_defs.hpp" line="49" column="35" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_defs.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="plugin__factory_8hpp_1a907bbe7c04ed281011c9fa8a7b8ce132" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void * Gambit::Scanner::multi_func_type(const std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &amp;, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</definition>
        <argsstring>(const std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &amp;, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</argsstring>
        <name>multi_func_type</name>
        <qualifiedname>Gambit::Scanner::multi_func_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="52" column="26" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printer__interface_8hpp_1ae767584d510b4dcaa3b82278ab1ecbd7" prot="public" static="no">
        <type><ref refid="classGambit_1_1Printers_1_1BasePrinterManager" kindref="compound">Printers::BasePrinterManager</ref></type>
        <definition>typedef Printers::BasePrinterManager Gambit::Scanner::printer_interface</definition>
        <argsstring></argsstring>
        <name>printer_interface</name>
        <qualifiedname>Gambit::Scanner::printer_interface</qualifiedname>
        <briefdescription>
<para>typedef printer_interface_temp printer_interface; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="31" column="46" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printer__interface_8hpp_1a3c6ca4999cbe5a04947a903788d93ee7" prot="public" static="no">
        <type><ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">Printers::BaseBasePrinter</ref></type>
        <definition>typedef Printers::BaseBasePrinter Gambit::Scanner::printer</definition>
        <argsstring></argsstring>
        <name>printer</name>
        <qualifiedname>Gambit::Scanner::printer</qualifiedname>
        <briefdescription>
<para>Type of the printer objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="34" column="43" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="plugin__factory_8hpp_1ad40ea269e40753c9f35b6f3dcfc66d44" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Gambit::Scanner::gambit_registry</definition>
        <argsstring></argsstring>
        <name>gambit_registry</name>
        <qualifiedname>Gambit::Scanner::gambit_registry</qualifiedname>
        <initializer>{
            typedef void* func_type(const std::vector&lt;std::string&gt; &amp;, const std::string &amp;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="49" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="plugin__factory_8hpp_1a35332e4b80ae4f79e69a09764599f330" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structGambit_1_1type__index" kindref="compound">type_index</ref>, func_type *, <ref refid="structGambit_1_1type__hasher" kindref="compound">Gambit::type_hasher</ref>, <ref refid="structGambit_1_1type__equal__to" kindref="compound">Gambit::type_equal_to</ref> &gt;</type>
        <definition>std::unordered_map&lt;type_index, func_type *, Gambit::type_hasher, Gambit::type_equal_to&gt; Gambit::Scanner::__functions__</definition>
        <argsstring></argsstring>
        <name>__functions__</name>
        <qualifiedname>Gambit::Scanner::__functions__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="53" column="32" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="plugin__factory_8hpp_1a48f8d79a6ccd4a325fca64c3fe8d6f33" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structGambit_1_1type__index" kindref="compound">type_index</ref>, multi_func_type * &gt;</type>
        <definition>std::unordered_map&lt;type_index, multi_func_type *&gt; Gambit::Scanner::__multi_functions__</definition>
        <argsstring></argsstring>
        <name>__multi_functions__</name>
        <qualifiedname>Gambit::Scanner::__multi_functions__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="54" column="32" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="scannerbit_8hpp_1a659b628c3ad1d66d9a08f40fb9e1264e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Gambit::Scanner::ScannerBit_handlers</definition>
        <argsstring></argsstring>
        <name>ScannerBit_handlers</name>
        <qualifiedname>Gambit::Scanner::ScannerBit_handlers</qualifiedname>
        <initializer>= register_ScannerBit_handlers()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" line="47" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="plugin__factory_8hpp_1a46751c417e893057ea1165220089ede9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::LOAD_FUNC_TEMPLATE</definition>
        <argsstring>(Scanner_Plugin_Function, double(std::unordered_map&lt; std::string, double &gt; &amp;))</argsstring>
        <name>LOAD_FUNC_TEMPLATE</name>
        <qualifiedname>Gambit::Scanner::LOAD_FUNC_TEMPLATE</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1Scanner__Plugin__Function" kindref="compound">Scanner_Plugin_Function</ref></type>
        </param>
        <param>
          <type>double(std::unordered_map&lt; std::string, double &gt; &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="136" column="9" declfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" declline="136" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="plugin__factory_8hpp_1a9a71fa57d2cd49eab20e7429828766ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::LOAD_FUNC_TEMPLATE</definition>
        <argsstring>(Scanner_Plugin_Function, void(const std::vector&lt; double &gt; &amp;, std::unordered_map&lt; std::string, double &gt; &amp;))</argsstring>
        <name>LOAD_FUNC_TEMPLATE</name>
        <qualifiedname>Gambit::Scanner::LOAD_FUNC_TEMPLATE</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1Scanner__Plugin__Function" kindref="compound">Scanner_Plugin_Function</ref></type>
        </param>
        <param>
          <type>void(const std::vector&lt; double &gt; &amp;, std::unordered_map&lt; std::string, double &gt; &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="137" column="9" declfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" declline="137" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="plugin__factory_8hpp_1a123120f58d08e27c16b013770cc72a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::LOAD_FUNC_TEMPLATE</definition>
        <argsstring>(Scanner_Plugin_Function, std::vector&lt; double &gt;(std::unordered_map&lt; std::string, double &gt; &amp;))</argsstring>
        <name>LOAD_FUNC_TEMPLATE</name>
        <qualifiedname>Gambit::Scanner::LOAD_FUNC_TEMPLATE</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1Scanner__Plugin__Function" kindref="compound">Scanner_Plugin_Function</ref></type>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <array>std::unordered_map&lt; std::string, double &gt; &amp;</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="138" column="9" declfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" declline="138" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="plugin__factory_8hpp_1a5a89fb200d29905d3885a88f849fc41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::LOAD_MULTI_FUNC_TEMPLATE</definition>
        <argsstring>(Multi_Scanner_Plugin_Function, double(std::unordered_map&lt; std::string, double &gt; &amp;))</argsstring>
        <name>LOAD_MULTI_FUNC_TEMPLATE</name>
        <qualifiedname>Gambit::Scanner::LOAD_MULTI_FUNC_TEMPLATE</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1Multi__Scanner__Plugin__Function" kindref="compound">Multi_Scanner_Plugin_Function</ref></type>
        </param>
        <param>
          <type>double(std::unordered_map&lt; std::string, double &gt; &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="139" column="9" declfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" declline="139" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="printer__interface_8hpp_1ac6fba822e0f5ca89b2efbb3fd8813590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::assign_aux_numbers</definition>
        <argsstring>()</argsstring>
        <name>assign_aux_numbers</name>
        <qualifiedname>Gambit::Scanner::assign_aux_numbers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="36" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="printer__interface_8hpp_1af87ac4f169f6a9b5c1b120f686467bd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Scanner::assign_aux_numbers</definition>
        <argsstring>(const std::string &amp;tag, const T &amp;... params)</argsstring>
        <name>assign_aux_numbers</name>
        <qualifiedname>Gambit::Scanner::assign_aux_numbers</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const T &amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="39" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a160719ba0cc1b31c4e65eaeb50285745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::Scanner::scan_error</definition>
        <argsstring>()</argsstring>
        <name>scan_error</name>
        <qualifiedname>Gambit::Scanner::scan_error</qualifiedname>
        <briefdescription>
<para>Scanner errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scanner_utils.cpp" line="28" column="23" bodyfile="ScannerBit/src/scanner_utils.cpp" bodystart="28" bodyend="32" declfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" declline="115" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1abbfed36d504a6f5b297acc30bde615b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::Scanner::scan_warning</definition>
        <argsstring>()</argsstring>
        <name>scan_warning</name>
        <qualifiedname>Gambit::Scanner::scan_warning</qualifiedname>
        <briefdescription>
<para>Scanner warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scanner_utils.cpp" line="35" column="25" bodyfile="ScannerBit/src/scanner_utils.cpp" bodystart="35" bodyend="39" declfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" declline="117" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a36e2f6bacee4af7e50fe763e5bb7f3c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Gambit::Scanner::zip</definition>
        <argsstring>(const T &amp;... containers) -&gt; boost::iterator_range&lt; boost::zip_iterator&lt; decltype(boost::make_tuple(std::begin(containers)...))&gt; &gt;</argsstring>
        <name>zip</name>
        <qualifiedname>Gambit::Scanner::zip</qualifiedname>
        <param>
          <type>const T &amp;...</type>
          <declname>containers</declname>
        </param>
        <briefdescription>
<para>Use for combine container in a range loop: for (auto &amp;&amp;x : zip(a, b)){...}. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="125" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a673924868bd7fc81bd78d08a6264023d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Scanner::demangle</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>demangle</name>
        <qualifiedname>Gambit::Scanner::demangle</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Demangles gnu c++ name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="137" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="137" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1ab90e21072680d5f9d6727f18690296c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Gambit::Scanner::get_yaml_vector</definition>
        <argsstring>(const YAML::Node &amp;node)</argsstring>
        <name>get_yaml_vector</name>
        <qualifiedname>Gambit::Scanner::get_yaml_vector</qualifiedname>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input a vector from the yaml file of the following forms: vec: [a, b, ...] vec: a, b, ... vec: a; b; ... </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="166" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="166" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1ab1142cc7e0db6d5a65e1028455bf9176" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::Scanner::StringToInt</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>StringToInt</name>
        <qualifiedname>Gambit::Scanner::StringToInt</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to an int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="241" column="20" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="241" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1aafea956f940d2f7c02bf118d27c797bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Scanner::IntToString</definition>
        <argsstring>(const int &amp;in)</argsstring>
        <name>IntToString</name>
        <qualifiedname>Gambit::Scanner::IntToString</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Converts a int into a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="252" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Scanner::pi</definition>
        <argsstring>()</argsstring>
        <name>pi</name>
        <qualifiedname>Gambit::Scanner::pi</qualifiedname>
        <briefdescription>
<para>Output pi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="264" column="23" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a3943912879e9760dd4cd25938f70128c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; Gambit::Scanner::convert_to_map</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;vec)</argsstring>
        <name>convert_to_map</name>
        <qualifiedname>Gambit::Scanner::convert_to_map</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Turns a vector with enters [model::parameter, ...] into a map with [{model, parameter}, ...]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="271" column="25" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="271" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="scannerbit_8hpp_1a7521b49497577814b4b0bfbcb5d2ae8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::Scanner::register_ScannerBit_handlers</definition>
        <argsstring>()</argsstring>
        <name>register_ScannerBit_handlers</name>
        <qualifiedname>Gambit::Scanner::register_ScannerBit_handlers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" line="32" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" bodystart="32" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a55ffc906da9c0daa8801197c2ddafb85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Scanner::notUnit</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;in)</argsstring>
        <name>notUnit</name>
        <qualifiedname>Gambit::Scanner::notUnit</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="33" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a559c8031f2be799b4abe1b6f49599509" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T::iterator::pointer</type>
        <definition>T::iterator::pointer Gambit::Scanner::c_ptr</definition>
        <argsstring>(T &amp;it)</argsstring>
        <name>c_ptr</name>
        <qualifiedname>Gambit::Scanner::c_ptr</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="47" column="46" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a385237ba008e0ae289e0dbc20bb638d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; double &gt; &gt; Gambit::Scanner::calcCov</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;pts)</argsstring>
        <name>calcCov</name>
        <qualifiedname>Gambit::Scanner::calcCov</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="49" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="49" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a3650e7fa75ee2ea9758a04d9b2277055" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; double &gt; &gt; Gambit::Scanner::calcIndent</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;pts)</argsstring>
        <name>calcIndent</name>
        <qualifiedname>Gambit::Scanner::calcIndent</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="81" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="81" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1ace7351253a2a4d0049044b6b9f1d307c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::TWalk</definition>
        <argsstring>(Gambit::Scanner::like_ptr LogLike, Gambit::Scanner::printer_interface &amp;printer, Gambit::Scanner::resume_params_func set_resume_params, const int &amp;dimension, const double &amp;div, const int &amp;proj, const double &amp;din, const double &amp;alim, const double &amp;alimt, const long long &amp;rand, const double &amp;sqrtR, const int &amp;NChains, const bool &amp;hyper_grid, const int &amp;burn_in, const int &amp;save_freq, const double &amp;hrs_max)</argsstring>
        <name>TWalk</name>
        <qualifiedname>Gambit::Scanner::TWalk</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1like__ptr" kindref="compound">Gambit::Scanner::like_ptr</ref></type>
          <declname>LogLike</declname>
        </param>
        <param>
          <type><ref refid="printer__interface_8hpp_1ae767584d510b4dcaa3b82278ab1ecbd7" kindref="member">Gambit::Scanner::printer_interface</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1resume__params__func" kindref="compound">Gambit::Scanner::resume_params_func</ref></type>
          <declname>set_resume_params</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>div</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>proj</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>din</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>alim</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>alimt</declname>
        </param>
        <param>
          <type>const long long &amp;</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>sqrtR</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>NChains</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>hyper_grid</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>burn_in</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>save_freq</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>hrs_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scanners/twalk/twalk.cpp" line="90" column="14" bodyfile="ScannerBit/src/scanners/twalk/twalk.cpp" bodystart="90" bodyend="441" declfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" declline="280" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="scan_8cpp_1a162fa638f350a1b8fdc9bcb8e9815b67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>YAML::Node</type>
        <definition>YAML::Node Gambit::Scanner::combineNodes</definition>
        <argsstring>(const std::map&lt; std::string, YAML::Node &gt; &amp;nodesMap, const YAML::Node &amp;node)</argsstring>
        <name>combineNodes</name>
        <qualifiedname>Gambit::Scanner::combineNodes</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, YAML::Node &gt; &amp;</type>
          <declname>nodesMap</declname>
        </param>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scan.cpp" line="38" column="27" bodyfile="ScannerBit/src/scan.cpp" bodystart="38" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="53" column="5"/>
  </compounddef>
</doxygen>
