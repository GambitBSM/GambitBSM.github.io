<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceGambit_1_1Scanner" kind="namespace" language="C++">
    <compoundname>Gambit::Scanner</compoundname>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type____" prot="public">Gambit::Scanner::__find_variadic_type__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type_____3_01false_00_01false_00_01true_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type__&lt; false, false, true, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type_____3_01false_00_01true_00_01b2_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type__&lt; false, true, b2, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type_____3_01true_00_01b1_00_01b2_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type__&lt; true, b1, b2, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__convert____" prot="public">Gambit::Scanner::__find_variadic_type_convert__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__convert_____3_01b_00_01Tc_00_01T1_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type_convert__&lt; b, Tc, T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__convert_____3_01true_00_01Tc_00_01T1_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::__find_variadic_type_convert__&lt; true, Tc, T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__not__exact____" prot="public">Gambit::Scanner::__find_variadic_type_not_exact__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__not__exact_____3_01void_07args_8_8_8_08_00_e143deac0e765eb009f74255cae70cdb" prot="public">Gambit::Scanner::__find_variadic_type_not_exact__&lt; void(args...), ret(args...), T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____find__variadic__type__not__exact_____3_01void_07args_8_8_8_08_00_07dc90b6eaf941e6db44db3b27790d79" prot="public">Gambit::Scanner::__find_variadic_type_not_exact__&lt; void(args...), ret(args2...), T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____is__args__convertible____" prot="public">Gambit::Scanner::__is_args_convertible__</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1____is__args__convertible_____3_01false_00_01T1_00_01T2_01_4" prot="public">Gambit::Scanner::__is_args_convertible__&lt; false, T1, T2 &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__convert__" prot="public">Gambit::Scanner::_find_variadic_type_convert_</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__convert___3_01Tc_00_01T1_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::_find_variadic_type_convert_&lt; Tc, T1, T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__not__exact__" prot="public">Gambit::Scanner::_find_variadic_type_not_exact_</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1__find__variadic__type__not__exact___3_01T1_00_01T2_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::_find_variadic_type_not_exact_&lt; T1, T2, T... &gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Factory__Base" prot="public">Gambit::Scanner::Factory_Base</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type" prot="public">Gambit::Scanner::find_variadic_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__convert" prot="public">Gambit::Scanner::find_variadic_type_convert</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__convert_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::find_variadic_type_convert&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact" prot="public">Gambit::Scanner::find_variadic_type_exact</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact_3_01void_07args_8_8_8_08_00_01ret_07args_8_8_8_08_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::find_variadic_type_exact&lt; void(args...), ret(args...), T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact_3_01void_07args_8_8_8_08_00_01ret_07args2_8_8_8_08_00_01T_8_8_8_01_4" prot="public">Gambit::Scanner::find_variadic_type_exact&lt; void(args...), ret(args2...), T... &gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__exact_3_01void_07args_8_8_8_08_4" prot="public">Gambit::Scanner::find_variadic_type_exact&lt; void(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__not__exact" prot="public">Gambit::Scanner::find_variadic_type_not_exact</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1find__variadic__type__not__exact_3_01void_07args_8_8_8_08_4" prot="public">Gambit::Scanner::find_variadic_type_not_exact&lt; void(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1first__arg__type" prot="public">Gambit::Scanner::first_arg_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1first__arg__type_3_01ret_07_08_4" prot="public">Gambit::Scanner::first_arg_type&lt; ret()&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1first__arg__type_3_01ret_07T_00_01args_8_8_8_08_4" prot="public">Gambit::Scanner::first_arg_type&lt; ret(T, args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1func__ptr__type" prot="public">Gambit::Scanner::func_ptr_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1func__ptr__type_3_01void_07args_8_8_8_08_4" prot="public">Gambit::Scanner::func_ptr_type&lt; void(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Base" prot="public">Gambit::Scanner::Function_Base</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Base_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Function_Base&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Deleter" prot="public">Gambit::Scanner::Function_Deleter</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Function__Deleter_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Function_Deleter&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1is__args__convertible" prot="public">Gambit::Scanner::is_args_convertible</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1is__args__convertible_3_01ret1_07_08_00_01ret2_07_08_4" prot="public">Gambit::Scanner::is_args_convertible&lt; ret1(), ret2()&gt;</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1is__args__convertible_3_01ret1_07arg1_00_01args1_8_8_8_08_00_01ret2_07arg2_00_01args2_8_8_8_08_4" prot="public">Gambit::Scanner::is_args_convertible&lt; ret1(arg1, args1...), ret2(arg2, args2...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1like__ptr" prot="public">Gambit::Scanner::like_ptr</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Multi__Scanner__Plugin__Function" prot="public">Gambit::Scanner::Multi_Scanner_Plugin_Function</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Multi__Scanner__Plugin__Function_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Multi_Scanner_Plugin_Function&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Plugin__Function__Factory" prot="public">Gambit::Scanner::Plugin_Function_Factory</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1point__info" prot="public">Gambit::Scanner::point_info</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1RanNumGen" prot="public">Gambit::Scanner::RanNumGen</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1remove__all__func" prot="public">Gambit::Scanner::remove_all_func</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1remove__all__func_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::remove_all_func&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1resume__params__func" prot="public">Gambit::Scanner::resume_params_func</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1return__type" prot="public">Gambit::Scanner::return_type</innerclass>
    <innerclass refid="structGambit_1_1Scanner_1_1return__type_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::return_type&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Scan__Manager" prot="public">Gambit::Scanner::Scan_Manager</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1scan__ptr" prot="public">Gambit::Scanner::scan_ptr</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Scanner__Plugin__Function" prot="public">Gambit::Scanner::Scanner_Plugin_Function</innerclass>
    <innerclass refid="classGambit_1_1Scanner_1_1Scanner__Plugin__Function_3_01ret_07args_8_8_8_08_4" prot="public">Gambit::Scanner::Scanner_Plugin_Function&lt; ret(args...)&gt;</innerclass>
    <innernamespace refid="namespaceGambit_1_1Scanner_1_1Errors">Gambit::Scanner::Errors</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Scanner_1_1mpi__dist__internal">Gambit::Scanner::mpi_dist_internal</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Scanner_1_1Plugins">Gambit::Scanner::Plugins</innernamespace>
    <innernamespace refid="namespaceGambit_1_1Scanner_1_1Python">Gambit::Scanner::Python</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1ab5d99bc0cd1c70bce78b70cf2b1b9f3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::input_variadic_vector</definition>
        <argsstring>(std::vector&lt; void * &gt; &amp;)</argsstring>
        <name>input_variadic_vector</name>
        <qualifiedname>Gambit::Scanner::input_variadic_vector</qualifiedname>
        <param>
          <type>std::vector&lt; void * &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inputs a varibadic pack into a vector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="229" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1abea80c5d8cc968107603584e9322dee6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args</declname>
            <defname>args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Scanner::input_variadic_vector</definition>
        <argsstring>(std::vector&lt; void * &gt; &amp;input, const T &amp;value, const args &amp;... params)</argsstring>
        <name>input_variadic_vector</name>
        <qualifiedname>Gambit::Scanner::input_variadic_vector</qualifiedname>
        <param>
          <type>std::vector&lt; void * &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const args &amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="232" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="232" bodyend="236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1a0176111c61cf3b0e217ba606c6e1bfc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ret</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_floating_point&lt; ret &gt;::value, ret &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_floating_point&lt; ret &gt;::value, ret &gt;::type Gambit::Scanner::scanner_plugin_def_ret</definition>
        <argsstring>()</argsstring>
        <name>scanner_plugin_def_ret</name>
        <qualifiedname>Gambit::Scanner::scanner_plugin_def_ret</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Turns a type into an object. If it&apos;s a floating point number, it replaces it with a big negative number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="294" column="41" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a22a73974cab9d340f36c7f8d0778f036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ret</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; ret &gt;::value, ret &gt;::type</type>
        <definition>std::enable_if&lt; std::is_floating_point&lt; ret &gt;::value, ret &gt;::type Gambit::Scanner::scanner_plugin_def_ret</definition>
        <argsstring>()</argsstring>
        <name>scanner_plugin_def_ret</name>
        <qualifiedname>Gambit::Scanner::scanner_plugin_def_ret</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="300" column="41" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="300" bodyend="303"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::Scanner::pow</definition>
        <argsstring>(const double &amp;a)</argsstring>
        <name>pow</name>
        <qualifiedname>Gambit::Scanner::pow</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Outputs a^i </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="313" column="23" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a12f1eb5a1b4d1a1b92b9257c7a1534f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::Scanner::pow&lt; 0 &gt;</definition>
        <argsstring>(const double &amp;)</argsstring>
        <name>pow&lt; 0 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 0 &gt;</qualifiedname>
        <param>
          <type>const double &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="319" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1aaf5aa59effacc01dc81a161bbbb87177" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double Gambit::Scanner::pow&lt; 1 &gt;</definition>
        <argsstring>(const double &amp;a)</argsstring>
        <name>pow&lt; 1 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 1 &gt;</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="325" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a79dec30b20c4f72a1e0302f04cdbdd2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::Scanner::pow</definition>
        <argsstring>(const int &amp;a)</argsstring>
        <name>pow</name>
        <qualifiedname>Gambit::Scanner::pow</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="331" column="20" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a42f8f922a27661ef8990ba2c6e5c5196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::Scanner::pow&lt; 0 &gt;</definition>
        <argsstring>(const int &amp;)</argsstring>
        <name>pow&lt; 0 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 0 &gt;</qualifiedname>
        <param>
          <type>const int &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="337" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a619ef25d6c3225a7cd8b66ac5889feb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int Gambit::Scanner::pow&lt; 1 &gt;</definition>
        <argsstring>(const int &amp;a)</argsstring>
        <name>pow&lt; 1 &gt;</name>
        <qualifiedname>Gambit::Scanner::pow&lt; 1 &gt;</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="343" column="16" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="343" bodyend="346"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1ac7baae280074b7522725e993ea1fe79b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, std::ostream &amp; &gt;::type Gambit::Scanner::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const T &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::Scanner::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Outputs containers to an output stream </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="611" column="42" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="612" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1aa29ba2480ed53f130694721edd8fb355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, std::ostream &amp; &gt;::type Gambit::Scanner::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const T &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Gambit::Scanner::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="630" column="42" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="631" bodyend="634"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="scanner__utils_8hpp_1a5fb11fbdaa961171fc3b747c6c03c7cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value &amp;&amp;!<ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;!is_container&lt; T &gt;::value &amp;&amp;!is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, T &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Functions to output data for the plugin resume functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="645" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="645" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a0596e326ba277dd1f645d8abf9d844d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, T &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="653" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="653" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a349ae44ebd8d00af974241a6ba5a5a8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, T &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="663" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="663" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a4f82b923e3264c71eb1180b96f2714a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value &amp;&amp;!<ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;!is_container&lt; T &gt;::value &amp;&amp;!is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, T &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="671" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="671" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a6805e32e26f1f135a67c2374361d384f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, T &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="679" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="679" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1ae489528b0693a0a22ece18f9d9fcf31d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, void &gt;::type Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, T &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="689" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="689" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a8bafd221af158f2333c3447b23a4c17f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value &amp;&amp;!<ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, size_t &gt;::type</type>
        <definition>std::enable_if&lt;!is_container&lt; T &gt;::value &amp;&amp;!is_pair&lt; T &gt;::value, size_t &gt;::type Gambit::Scanner::resume_size_of</definition>
        <argsstring>(T &amp;)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="697" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="697" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a2c71241637d1649c8e272f6ea9293416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__container" kindref="compound">is_container</ref>&lt; T &gt;::value, size_t &gt;::type</type>
        <definition>std::enable_if&lt; is_container&lt; T &gt;::value, size_t &gt;::type Gambit::Scanner::resume_size_of</definition>
        <argsstring>(T &amp;param)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="704" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="704" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a92e6dc5d2bfd538a6356843ab950f38d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structGambit_1_1is__pair" kindref="compound">is_pair</ref>&lt; T &gt;::value, size_t &gt;::type</type>
        <definition>std::enable_if&lt; is_pair&lt; T &gt;::value, size_t &gt;::type Gambit::Scanner::resume_size_of</definition>
        <argsstring>(T &amp;)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="711" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="711" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a8e8474e9d38822e2f4ca862671194277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::resume_file_input</definition>
        <argsstring>(std::ifstream &amp;in, std::string &amp;param)</argsstring>
        <name>resume_file_input</name>
        <qualifiedname>Gambit::Scanner::resume_file_input</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="716" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="716" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a58ada9d1a800fa0c46474fbe08d674b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::resume_file_output</definition>
        <argsstring>(std::ofstream &amp;out, std::string &amp;param)</argsstring>
        <name>resume_file_output</name>
        <qualifiedname>Gambit::Scanner::resume_file_output</qualifiedname>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="721" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="721" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1acd468876f6a4c4221867aa50384c8c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Gambit::Scanner::resume_size_of</definition>
        <argsstring>(std::string &amp;param)</argsstring>
        <name>resume_size_of</name>
        <qualifiedname>Gambit::Scanner::resume_size_of</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="726" column="23" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="726" bodyend="729"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="plugin__defs_8hpp_1adbd0bb3eda81b94ef9a6ef66744d3b61" prot="public" static="no">
        <type><ref refid="classGambit_1_1Priors_1_1BasePrior" kindref="compound">Priors::BasePrior</ref></type>
        <definition>typedef Priors::BasePrior Gambit::Scanner::prior_interface</definition>
        <argsstring></argsstring>
        <name>prior_interface</name>
        <qualifiedname>Gambit::Scanner::prior_interface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_defs.hpp" line="49" column="35" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_defs.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="plugin__factory_8hpp_1a3610661aed4e50826578bbf899b34ccb" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void * Gambit::Scanner::multi_func_type(const std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &amp;, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;, const Factory_Base &amp;)</definition>
        <argsstring>(const std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &amp;, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;, const Factory_Base &amp;)</argsstring>
        <name>multi_func_type</name>
        <qualifiedname>Gambit::Scanner::multi_func_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="52" column="26" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printer__interface_8hpp_1ae767584d510b4dcaa3b82278ab1ecbd7" prot="public" static="no">
        <type><ref refid="classGambit_1_1Printers_1_1BasePrinterManager" kindref="compound">Printers::BasePrinterManager</ref></type>
        <definition>typedef Printers::BasePrinterManager Gambit::Scanner::printer_interface</definition>
        <argsstring></argsstring>
        <name>printer_interface</name>
        <qualifiedname>Gambit::Scanner::printer_interface</qualifiedname>
        <briefdescription>
<para>typedef printer_interface_temp printer_interface; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="31" column="46" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printer__interface_8hpp_1a3c6ca4999cbe5a04947a903788d93ee7" prot="public" static="no">
        <type><ref refid="classGambit_1_1Printers_1_1BaseBasePrinter" kindref="compound">Printers::BaseBasePrinter</ref></type>
        <definition>typedef Printers::BaseBasePrinter Gambit::Scanner::printer</definition>
        <argsstring></argsstring>
        <name>printer</name>
        <qualifiedname>Gambit::Scanner::printer</qualifiedname>
        <briefdescription>
<para>Type of the printer objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="34" column="43" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scanner__util__types_8hpp_1a21f3a40dce114045091bd14ab88e44dc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
        <definition>using Gambit::Scanner::vector = typedef Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt;</definition>
        <argsstring></argsstring>
        <name>vector</name>
        <qualifiedname>Gambit::Scanner::vector</qualifiedname>
        <briefdescription>
<para>A vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" line="37" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scanner__util__types_8hpp_1a425d81d6be3889110bfc42a691ef47b2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, 1, Eigen::Dynamic &gt;</type>
        <definition>using Gambit::Scanner::row_vector = typedef Eigen::Matrix&lt;T, 1, Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>row_vector</name>
        <qualifiedname>Gambit::Scanner::row_vector</qualifiedname>
        <briefdescription>
<para>A row vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" line="42" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scanner__util__types_8hpp_1a5f7dcba4f7cdf685fbc79fa975e721b0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using Gambit::Scanner::matrix = typedef Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt;</definition>
        <argsstring></argsstring>
        <name>matrix</name>
        <qualifiedname>Gambit::Scanner::matrix</qualifiedname>
        <briefdescription>
<para>A matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" line="47" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scanner__util__types_8hpp_1aa2109d688760bfc20fb806f80ee45146" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Ref&lt; <ref refid="scanner__util__types_8hpp_1a21f3a40dce114045091bd14ab88e44dc" kindref="member">vector</ref>&lt; T &gt;, 0, Eigen::Stride&lt; Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</type>
        <definition>using Gambit::Scanner::hyper_cube_ref = typedef Eigen::Ref&lt;vector&lt;T&gt;, 0, Eigen::Stride&lt;Eigen::Dynamic, Eigen::Dynamic&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>hyper_cube_ref</name>
        <qualifiedname>Gambit::Scanner::hyper_cube_ref</qualifiedname>
        <briefdescription>
<para>Represents the unit hypercube. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" line="52" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scanner__util__types_8hpp_1a04c1433039c9394a835257d8e7ff31a1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; <ref refid="scanner__util__types_8hpp_1a21f3a40dce114045091bd14ab88e44dc" kindref="member">vector</ref>&lt; T &gt;, Eigen::Unaligned, Eigen::Stride&lt; 1, 1 &gt; &gt;</type>
        <definition>using Gambit::Scanner::map_vector = typedef Eigen::Map&lt;vector&lt;T&gt;, Eigen::Unaligned, Eigen::Stride&lt;1, 1&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>map_vector</name>
        <qualifiedname>Gambit::Scanner::map_vector</qualifiedname>
        <briefdescription>
<para>Vector using raw data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" line="57" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_util_types.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="plugin__factory_8hpp_1ad40ea269e40753c9f35b6f3dcfc66d44" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Gambit::Scanner::gambit_registry</definition>
        <argsstring></argsstring>
        <name>gambit_registry</name>
        <qualifiedname>Gambit::Scanner::gambit_registry</qualifiedname>
        <initializer>{
            typedef void* func_type(const std::vector&lt;std::string&gt; &amp;, const std::string &amp;, const <ref refid="classGambit_1_1Scanner_1_1Factory__Base" kindref="compound">Factory_Base</ref> &amp;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="49" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="plugin__factory_8hpp_1a35332e4b80ae4f79e69a09764599f330" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structGambit_1_1type__index" kindref="compound">type_index</ref>, func_type *, <ref refid="structGambit_1_1type__hasher" kindref="compound">Gambit::type_hasher</ref>, <ref refid="structGambit_1_1type__equal__to" kindref="compound">Gambit::type_equal_to</ref> &gt;</type>
        <definition>std::unordered_map&lt;type_index, func_type *, Gambit::type_hasher, Gambit::type_equal_to&gt; Gambit::Scanner::__functions__</definition>
        <argsstring></argsstring>
        <name>__functions__</name>
        <qualifiedname>Gambit::Scanner::__functions__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="53" column="32" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="plugin__factory_8hpp_1a48f8d79a6ccd4a325fca64c3fe8d6f33" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structGambit_1_1type__index" kindref="compound">type_index</ref>, multi_func_type * &gt;</type>
        <definition>std::unordered_map&lt;type_index, multi_func_type *&gt; Gambit::Scanner::__multi_functions__</definition>
        <argsstring></argsstring>
        <name>__multi_functions__</name>
        <qualifiedname>Gambit::Scanner::__multi_functions__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" line="54" column="32" bodyfile="ScannerBit/include/gambit/ScannerBit/plugin_factory.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="scannerbit_8hpp_1a659b628c3ad1d66d9a08f40fb9e1264e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Gambit::Scanner::ScannerBit_handlers</definition>
        <argsstring></argsstring>
        <name>ScannerBit_handlers</name>
        <qualifiedname>Gambit::Scanner::ScannerBit_handlers</qualifiedname>
        <initializer>= register_ScannerBit_handlers()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" line="47" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="printer__interface_8hpp_1ac6fba822e0f5ca89b2efbb3fd8813590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::assign_aux_numbers</definition>
        <argsstring>()</argsstring>
        <name>assign_aux_numbers</name>
        <qualifiedname>Gambit::Scanner::assign_aux_numbers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="36" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="printer__interface_8hpp_1af87ac4f169f6a9b5c1b120f686467bd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gambit::Scanner::assign_aux_numbers</definition>
        <argsstring>(const std::string &amp;tag, const T &amp;... params)</argsstring>
        <name>assign_aux_numbers</name>
        <qualifiedname>Gambit::Scanner::assign_aux_numbers</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const T &amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" line="39" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/printer_interface.hpp" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="include_2gambit_2ScannerBit_2python__utils_8hpp_1acbc1b123ab591238092ed877b59ce82a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Scanner::pytype</definition>
        <argsstring>(py::handle o)</argsstring>
        <name>pytype</name>
        <qualifiedname>Gambit::Scanner::pytype</qualifiedname>
        <param>
          <type>py::handle</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Determines the Python type of a given object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function inspects a Python object and returns a string representation of its type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python object whose type is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representation of the Python object&apos;s type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" line="28" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="include_2gambit_2ScannerBit_2python__utils_8hpp_1aacc7482724c5cf08e36c1c37fc51d4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gambit::Scanner::is_pytype</definition>
        <argsstring>(py::kwargs args, const std::string &amp;type=&quot;dtype&quot;, bool def_type=false)</argsstring>
        <name>is_pytype</name>
        <qualifiedname>Gambit::Scanner::is_pytype</qualifiedname>
        <param>
          <type>py::kwargs</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
          <defval>&quot;dtype&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>def_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Checks if a given Python object matches a specified type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function inspects a Python object and checks if it matches the specified type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to check against. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python kwargs object containing the arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The key in the kwargs to check the type of. Defaults to &quot;dtype&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>def_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The default return value if the type key is not found in the kwargs. Defaults to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the object matches the specified type, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" line="45" column="14" bodyfile="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" bodystart="45" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="include_2gambit_2ScannerBit_2python__utils_8hpp_1a8cb318442463a685dca0674a6d25af3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>py::object</type>
        <definition>py::object Gambit::Scanner::yaml_to_dict</definition>
        <argsstring>(const YAML::Node &amp;node)</argsstring>
        <name>yaml_to_dict</name>
        <qualifiedname>Gambit::Scanner::yaml_to_dict</qualifiedname>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Converts a <ref refid="namespaceYAML" kindref="compound">YAML</ref> node to a Python dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para>This function recursively traverses a <ref refid="namespaceYAML" kindref="compound">YAML</ref> node and constructs a corresponding Python dictionary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="namespaceYAML" kindref="compound">YAML</ref> node to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python dictionary that represents the <ref refid="namespaceYAML" kindref="compound">YAML</ref> node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" line="69" column="27" bodyfile="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" bodystart="69" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="include_2gambit_2ScannerBit_2python__utils_8hpp_1ab8d81aceb69f0a9f0f4fa0f16760be5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>YAML::Node</type>
        <definition>YAML::Node Gambit::Scanner::dict_to_yaml</definition>
        <argsstring>(py::handle o)</argsstring>
        <name>dict_to_yaml</name>
        <qualifiedname>Gambit::Scanner::dict_to_yaml</qualifiedname>
        <param>
          <type>py::handle</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Converts a Python dictionary to a <ref refid="namespaceYAML" kindref="compound">YAML</ref> node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function recursively traverses a Python dictionary and constructs a corresponding <ref refid="namespaceYAML" kindref="compound">YAML</ref> node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python object to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="namespaceYAML" kindref="compound">YAML</ref> node that represents the Python dictionary. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" line="132" column="27" bodyfile="ScannerBit/include/gambit/ScannerBit/python_utils.hpp" bodystart="132" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a160719ba0cc1b31c4e65eaeb50285745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1error" kindref="compound">error</ref> &amp;</type>
        <definition>error &amp; Gambit::Scanner::scan_error</definition>
        <argsstring>()</argsstring>
        <name>scan_error</name>
        <qualifiedname>Gambit::Scanner::scan_error</qualifiedname>
        <briefdescription>
<para>Scanner errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scanner_utils.cpp" line="28" column="23" bodyfile="ScannerBit/src/scanner_utils.cpp" bodystart="28" bodyend="32" declfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" declline="118" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1abbfed36d504a6f5b297acc30bde615b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_SYMBOLS <ref refid="classGambit_1_1warning" kindref="compound">warning</ref> &amp;</type>
        <definition>warning &amp; Gambit::Scanner::scan_warning</definition>
        <argsstring>()</argsstring>
        <name>scan_warning</name>
        <qualifiedname>Gambit::Scanner::scan_warning</qualifiedname>
        <briefdescription>
<para>Scanner warnings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scanner_utils.cpp" line="35" column="25" bodyfile="ScannerBit/src/scanner_utils.cpp" bodystart="35" bodyend="39" declfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" declline="120" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a36e2f6bacee4af7e50fe763e5bb7f3c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Gambit::Scanner::zip</definition>
        <argsstring>(const T &amp;... containers) -&gt; boost::iterator_range&lt; boost::zip_iterator&lt; decltype(boost::make_tuple(std::begin(containers)...))&gt; &gt;</argsstring>
        <name>zip</name>
        <qualifiedname>Gambit::Scanner::zip</qualifiedname>
        <param>
          <type>const T &amp;...</type>
          <declname>containers</declname>
        </param>
        <briefdescription>
<para>Use for combine container in a range loop: for (auto &amp;&amp;x : zip(a, b)){...}. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="128" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a673924868bd7fc81bd78d08a6264023d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Scanner::demangle</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>demangle</name>
        <qualifiedname>Gambit::Scanner::demangle</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Demangles gnu c++ name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="140" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="140" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1ab90e21072680d5f9d6727f18690296c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; Gambit::Scanner::get_yaml_vector</definition>
        <argsstring>(const YAML::Node &amp;node)</argsstring>
        <name>get_yaml_vector</name>
        <qualifiedname>Gambit::Scanner::get_yaml_vector</qualifiedname>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input a vector from the yaml file of the following forms: vec: [a, b, ...] vec: a, b, ... vec: a; b; ... </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="169" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="169" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1ab1142cc7e0db6d5a65e1028455bf9176" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::Scanner::StringToInt</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>StringToInt</name>
        <qualifiedname>Gambit::Scanner::StringToInt</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to an int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="244" column="20" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="244" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1aafea956f940d2f7c02bf118d27c797bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Scanner::IntToString</definition>
        <argsstring>(const int &amp;in)</argsstring>
        <name>IntToString</name>
        <qualifiedname>Gambit::Scanner::IntToString</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Converts a int into a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="255" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="255" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Gambit::Scanner::pi</definition>
        <argsstring>()</argsstring>
        <name>pi</name>
        <qualifiedname>Gambit::Scanner::pi</qualifiedname>
        <briefdescription>
<para>Output pi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="267" column="23" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="scanner__utils_8hpp_1a3943912879e9760dd4cd25938f70128c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; Gambit::Scanner::convert_to_map</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;vec)</argsstring>
        <name>convert_to_map</name>
        <qualifiedname>Gambit::Scanner::convert_to_map</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Turns a vector with enters [model::parameter, ...] into a map with [{model, parameter}, ...]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" line="274" column="25" bodyfile="ScannerBit/include/gambit/ScannerBit/scanner_utils.hpp" bodystart="274" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="scannerbit_8hpp_1a7521b49497577814b4b0bfbcb5d2ae8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Gambit::Scanner::register_ScannerBit_handlers</definition>
        <argsstring>()</argsstring>
        <name>register_ScannerBit_handlers</name>
        <qualifiedname>Gambit::Scanner::register_ScannerBit_handlers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" line="32" column="9" bodyfile="ScannerBit/include/gambit/ScannerBit/scannerbit.hpp" bodystart="32" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a55ffc906da9c0daa8801197c2ddafb85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gambit::Scanner::notUnit</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;in)</argsstring>
        <name>notUnit</name>
        <qualifiedname>Gambit::Scanner::notUnit</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="33" column="21" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a559c8031f2be799b4abe1b6f49599509" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T::iterator::pointer</type>
        <definition>T::iterator::pointer Gambit::Scanner::c_ptr</definition>
        <argsstring>(T &amp;it)</argsstring>
        <name>c_ptr</name>
        <qualifiedname>Gambit::Scanner::c_ptr</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="47" column="46" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a385237ba008e0ae289e0dbc20bb638d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; double &gt; &gt; Gambit::Scanner::calcCov</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;pts)</argsstring>
        <name>calcCov</name>
        <qualifiedname>Gambit::Scanner::calcCov</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="49" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="49" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1a3650e7fa75ee2ea9758a04d9b2277055" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; double &gt; &gt; Gambit::Scanner::calcIndent</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;pts)</argsstring>
        <name>calcIndent</name>
        <qualifiedname>Gambit::Scanner::calcIndent</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" line="81" column="28" bodyfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" bodystart="81" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="twalk_8hpp_1ace7351253a2a4d0049044b6b9f1d307c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gambit::Scanner::TWalk</definition>
        <argsstring>(Gambit::Scanner::like_ptr LogLike, Gambit::Scanner::printer_interface &amp;printer, Gambit::Scanner::resume_params_func set_resume_params, const int &amp;dimension, const double &amp;div, const int &amp;proj, const double &amp;din, const double &amp;alim, const double &amp;alimt, const long long &amp;rand, const double &amp;sqrtR, const int &amp;NChains, const bool &amp;hyper_grid, const int &amp;burn_in, const int &amp;save_freq, const double &amp;hrs_max)</argsstring>
        <name>TWalk</name>
        <qualifiedname>Gambit::Scanner::TWalk</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1like__ptr" kindref="compound">Gambit::Scanner::like_ptr</ref></type>
          <declname>LogLike</declname>
        </param>
        <param>
          <type><ref refid="printer__interface_8hpp_1ae767584d510b4dcaa3b82278ab1ecbd7" kindref="member">Gambit::Scanner::printer_interface</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1resume__params__func" kindref="compound">Gambit::Scanner::resume_params_func</ref></type>
          <declname>set_resume_params</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>div</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>proj</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>din</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>alim</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>alimt</declname>
        </param>
        <param>
          <type>const long long &amp;</type>
          <declname>rand</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>sqrtR</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>NChains</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>hyper_grid</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>burn_in</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>save_freq</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>hrs_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scanners/twalk/twalk.cpp" line="91" column="14" bodyfile="ScannerBit/src/scanners/twalk/twalk.cpp" bodystart="91" bodyend="500" declfile="ScannerBit/include/gambit/ScannerBit/scanners/twalk/twalk.hpp" declline="280" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="scan_8cpp_1a162fa638f350a1b8fdc9bcb8e9815b67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>YAML::Node</type>
        <definition>YAML::Node Gambit::Scanner::combineNodes</definition>
        <argsstring>(const std::map&lt; std::string, YAML::Node &gt; &amp;nodesMap, const YAML::Node &amp;node)</argsstring>
        <name>combineNodes</name>
        <qualifiedname>Gambit::Scanner::combineNodes</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, YAML::Node &gt; &amp;</type>
          <declname>nodesMap</declname>
        </param>
        <param>
          <type>const YAML::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ScannerBit/src/scan.cpp" line="38" column="27" bodyfile="ScannerBit/src/scan.cpp" bodystart="38" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="48" column="5"/>
  </compounddef>
</doxygen>
