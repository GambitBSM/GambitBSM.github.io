<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classGambit_1_1Spec" kind="class" language="C++" prot="public">
    <compoundname>Gambit::Spec</compoundname>
    <basecompoundref refid="classGambit_1_1SubSpectrum" prot="public" virt="non-virtual">Gambit::SubSpectrum</basecompoundref>
    <templateparamlist>
      <param>
        <type>class DerivedSpec</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="classGambit_1_1Spec_1a52e6395fb74217ac8421fbb8beeed75c" prot="public" static="no" mutable="no">
        <type><ref refid="classGambit_1_1DummyModel" kindref="compound">DummyModel</ref></type>
        <definition>DummyModel Gambit::Spec&lt; DerivedSpec &gt;::dummymodel</definition>
        <argsstring></argsstring>
        <name>dummymodel</name>
        <qualifiedname>Gambit::Spec::dummymodel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Getters for wrapped data; be sure to define the &apos;get_Model&apos; and &apos;get_Input&apos; functions in the wrappers (with public access) Might as well use static polymorphism rather than virtual functions, since we are using the CRTP already anyway. Default &quot;null&quot; versions of get_Model and get_Input, to be used if wrapper does not override them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="226" column="21" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spec_1a67132916b8ea14758e0e222f9948075a" prot="public" static="no" mutable="no">
        <type><ref refid="classGambit_1_1DummyInput" kindref="compound">DummyInput</ref></type>
        <definition>DummyInput Gambit::Spec&lt; DerivedSpec &gt;::dummyinput</definition>
        <argsstring></argsstring>
        <name>dummyinput</name>
        <qualifiedname>Gambit::Spec::dummyinput</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="227" column="21" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a15563086ec03ac87244c56c3d918b051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Model &amp;</type>
        <definition>Model &amp; Gambit::Spec&lt; DerivedSpec &gt;::get_Model</definition>
        <argsstring>()</argsstring>
        <name>get_Model</name>
        <qualifiedname>Gambit::Spec::get_Model</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="228" column="16" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a6497115a3da1e3be0bae8dbf09597a82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Input &amp;</type>
        <definition>Input &amp; Gambit::Spec&lt; DerivedSpec &gt;::get_Input</definition>
        <argsstring>()</argsstring>
        <name>get_Input</name>
        <qualifiedname>Gambit::Spec::get_Input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="229" column="16" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1ac08988f76e5ecd58841101ffa576fba7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Model &amp;</type>
        <definition>const Model &amp; Gambit::Spec&lt; DerivedSpec &gt;::get_Model</definition>
        <argsstring>() const</argsstring>
        <name>get_Model</name>
        <qualifiedname>Gambit::Spec::get_Model</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="230" column="22" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a0728e2404207643cef8af76fa9b557be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Input &amp;</type>
        <definition>const Input &amp; Gambit::Spec&lt; DerivedSpec &gt;::get_Input</definition>
        <argsstring>() const</argsstring>
        <name>get_Input</name>
        <qualifiedname>Gambit::Spec::get_Input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="231" column="22" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a8d1d5df6f8e2acca6f370732a8e13304" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Model &amp;</type>
        <definition>Model &amp; Gambit::Spec&lt; DerivedSpec &gt;::model</definition>
        <argsstring>()</argsstring>
        <name>model</name>
        <qualifiedname>Gambit::Spec::model</qualifiedname>
        <briefdescription>
<para>Get model object on which to call function pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="234" column="16" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1ab3ebfb60469691d2e534fd61edb2f321" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Model &amp;</type>
        <definition>const Model &amp; Gambit::Spec&lt; DerivedSpec &gt;::model</definition>
        <argsstring>() const</argsstring>
        <name>model</name>
        <qualifiedname>Gambit::Spec::model</qualifiedname>
        <briefdescription>
<para>Return it as const if we are a const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="236" column="22" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a11885c8d86ed99101f08a3967f63061b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Input &amp;</type>
        <definition>Input &amp; Gambit::Spec&lt; DerivedSpec &gt;::input</definition>
        <argsstring>()</argsstring>
        <name>input</name>
        <qualifiedname>Gambit::Spec::input</qualifiedname>
        <briefdescription>
<para>Get struct containing any extra data input on <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> object creation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="239" column="16" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a887a14df9f65f1180a6293d376a332a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Input &amp;</type>
        <definition>const Input &amp; Gambit::Spec&lt; DerivedSpec &gt;::input</definition>
        <argsstring>() const</argsstring>
        <name>input</name>
        <qualifiedname>Gambit::Spec::input</qualifiedname>
        <briefdescription>
<para>Return it as const if we are a const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="241" column="22" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="241" bodyend="241"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Gambit::Spec&lt; DerivedSpec &gt;::has</definition>
        <argsstring>(const Par::Tags, const str &amp;, const SpecOverrideOptions=use_overrides, const SafeBool=SafeBool(true)) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spec::has</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1a2725617f7d7a1ae7f096c7d6269c9293">has</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const</type>
          <declname>SafeBool</declname>
          <defname>check_antiparticle</defname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
<para><ref refid="classGambit_1_1Spec" kindref="compound">Spec</ref> member function definitions. </para>
        </briefdescription>
        <detaileddescription>
<para>No indices </para>
        </detaileddescription>
        <inbodydescription>
<para>TODO: Could avoid dismantling the <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref> struct by just letting the <ref refid="classGambit_1_1SetMaps" kindref="compound">SetMaps</ref> class do it, but one step at a time... Could also reduce duplication between getter and checker functions by making the &apos;has&apos; function take an optional argument to return an <ref refid="classGambit_1_1FptrFinder" kindref="compound">FptrFinder</ref>, which can then just be used to call the found function.</para>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="115" column="17" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="36" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gambit::Spec&lt; DerivedSpec &gt;::get</definition>
        <argsstring>(const Par::Tags, const str &amp;, const SpecOverrideOptions=use_overrides, const SafeBool=SafeBool(true)) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spec::get</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1a7628765f659616f92dfb00d250135a45">get</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const</type>
          <declname>SafeBool</declname>
          <defname>check_antiparticle</defname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="116" column="17" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="72" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::Spec&lt; DerivedSpec &gt;::set</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const SafeBool=SafeBool(true))</argsstring>
        <name>set</name>
        <qualifiedname>Gambit::Spec::set</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1ad2b12a60691536d81893dfb12d31007f">set</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>set_value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SafeBool</declname>
          <defname>check_antiparticle</defname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="127" column="15" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="105" bodyend="141"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Gambit::Spec&lt; DerivedSpec &gt;::has</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const SpecOverrideOptions=use_overrides, const SafeBool=SafeBool(true)) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spec::has</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1ac9b850848b43d82b58f7d72c0ec4885b">has</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const</type>
          <declname>SafeBool</declname>
          <defname>check_antiparticle</defname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>One index </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="117" column="17" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="145" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gambit::Spec&lt; DerivedSpec &gt;::get</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const SpecOverrideOptions=use_overrides, const SafeBool=SafeBool(true)) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spec::get</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1aee87dab2aba184c8791f66e48faf4017">get</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <param>
          <type>const</type>
          <declname>SafeBool</declname>
          <defname>check_antiparticle</defname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="118" column="17" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="176" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::Spec&lt; DerivedSpec &gt;::set</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const int, const SafeBool=SafeBool(true))</argsstring>
        <name>set</name>
        <qualifiedname>Gambit::Spec::set</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1afc3ec1d834adbb46f5074c071a63992b">set</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>set_value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SafeBool</declname>
          <defname>check_antiparticle</defname>
          <defval><ref refid="classGambit_1_1SafeBool" kindref="compound">SafeBool</ref>(true)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="128" column="15" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="209" bodyend="245"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Gambit::Spec&lt; DerivedSpec &gt;::has</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const int, const SpecOverrideOptions=use_overrides) const</argsstring>
        <name>has</name>
        <qualifiedname>Gambit::Spec::has</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1ad91d2826ed9118ce59ab42e098a31d70">has</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>j</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two indices </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="119" column="17" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="251" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gambit::Spec&lt; DerivedSpec &gt;::get</definition>
        <argsstring>(const Par::Tags, const str &amp;, const int, const int, const SpecOverrideOptions=use_overrides) const</argsstring>
        <name>get</name>
        <qualifiedname>Gambit::Spec::get</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1a5d7f05d24f9ea7053017fa4467d08fe4">get</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>j</defname>
        </param>
        <param>
          <type>const</type>
          <declname>SpecOverrideOptions</declname>
          <defname>check_overrides</defname>
          <defval>use_overrides</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="120" column="17" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="277" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Gambit::Spec&lt; DerivedSpec &gt;::set</definition>
        <argsstring>(const Par::Tags, const double, const str &amp;, const int, const int)</argsstring>
        <name>set</name>
        <qualifiedname>Gambit::Spec::set</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1ab49d43623cb1e9a4025e42a66a8d9803">set</reimplements>
        <param>
          <type>const <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref></type>
          <defname>partype</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>set_value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceGambit_1aff3f41b9e6112a6d471a03b2df1f2427" kindref="member">str</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>i</defname>
        </param>
        <param>
          <type>const int</type>
          <defname>j</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="129" column="15" bodyfile="Elements/include/gambit/Elements/spec.hpp" bodystart="305" bodyend="319"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spec_1a2d75af9b21cb3ae6980f4d06fe51ffd2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTget</ref> &gt; &gt;</type>
        <definition>static const std::map&lt; Par::Tags, MapCollection&lt; MTget &gt; &gt; Gambit::Spec&lt; DerivedSpec &gt;::fill_getter_maps</definition>
        <argsstring>()</argsstring>
        <name>fill_getter_maps</name>
        <qualifiedname>Gambit::Spec::fill_getter_maps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default (empty) map filler functions Override as needed in derived classes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="133" column="32" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a11ccd60a2b06fc6e91c56f0c7045b54d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTset</ref> &gt; &gt;</type>
        <definition>static const std::map&lt; Par::Tags, MapCollection&lt; MTset &gt; &gt; Gambit::Spec&lt; DerivedSpec &gt;::fill_setter_maps</definition>
        <argsstring>()</argsstring>
        <name>fill_setter_maps</name>
        <qualifiedname>Gambit::Spec::fill_setter_maps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="138" column="32" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a21cfe3f6587fc2c37247524a48e0291a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Gambit::Spec&lt; DerivedSpec &gt;::index_offset</definition>
        <argsstring>()</argsstring>
        <name>index_offset</name>
        <qualifiedname>Gambit::Spec::index_offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get integer offset convention used by internal model class (needed by getters which take indices) By default assume no offset. Overrride as needed in derived class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="146" column="21" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a1ebb99da57096b91657e56ec58a7d2b1" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Gambit::Spec&lt; DerivedSpec &gt;::get_index_offset</definition>
        <argsstring>()</argsstring>
        <name>get_index_offset</name>
        <qualifiedname>Gambit::Spec::get_index_offset</qualifiedname>
        <briefdescription>
<para>Function to retrieve the possibly overridden index offset from the derived class via CRTP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="151" column="21" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a0c46a470afcf6e02b6fadd398cf3e186" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Gambit::Spec&lt; DerivedSpec &gt;::getter_maps_fill_tags</definition>
        <argsstring>(std::map&lt; Par::Tags, MapCollection&lt; MTget &gt; &gt; &amp;in)</argsstring>
        <name>getter_maps_fill_tags</name>
        <qualifiedname>Gambit::Spec::getter_maps_fill_tags</qualifiedname>
        <param>
          <type>std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTget</ref> &gt; &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Functions to ensure that all the possible tags exist in the final map, even if no getters/setters are stored under those tags. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="156" column="22" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="156" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a02edfe7c0042d47f86809346ffaee4a3" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Gambit::Spec&lt; DerivedSpec &gt;::setter_maps_fill_tags</definition>
        <argsstring>(std::map&lt; Par::Tags, MapCollection&lt; MTset &gt; &gt; &amp;in)</argsstring>
        <name>setter_maps_fill_tags</name>
        <qualifiedname>Gambit::Spec::setter_maps_fill_tags</qualifiedname>
        <param>
          <type>std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTset</ref> &gt; &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="164" column="22" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="164" bodyend="171"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classGambit_1_1Spec_1aa7ee505f1037005ab30a4a09b7d468d7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTget</ref> &gt; &gt;</type>
        <definition>static const std::map&lt; Par::Tags, MapCollection&lt; MTget &gt; &gt; Gambit::Spec&lt; DerivedSpec &gt;::final_fill_getter_maps</definition>
        <argsstring>()</argsstring>
        <name>final_fill_getter_maps</name>
        <qualifiedname>Gambit::Spec::final_fill_getter_maps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Filler functions that are <emphasis>actually</emphasis> directly used to fill the maps Combines the (possibly overriden) map filler, plus the fill_tags functions to fill in any unused tag keys. DO NOT override these! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="180" column="32" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="180" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1ac2673a43d9c04922d5668240a50d9ed0" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTset</ref> &gt; &gt;</type>
        <definition>static const std::map&lt; Par::Tags, MapCollection&lt; MTset &gt; &gt; Gambit::Spec&lt; DerivedSpec &gt;::final_fill_setter_maps</definition>
        <argsstring>()</argsstring>
        <name>final_fill_setter_maps</name>
        <qualifiedname>Gambit::Spec::final_fill_setter_maps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="188" column="32" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="188" bodyend="195"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classGambit_1_1Spec_1a7ecd550a7de5305518b34181187c3544" prot="public" static="no">
        <type>DerivedSpec</type>
        <definition>typedef DerivedSpec Gambit::Spec&lt; DerivedSpec &gt;::D</definition>
        <argsstring></argsstring>
        <name>D</name>
        <qualifiedname>Gambit::Spec::D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="99" column="30" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1a4808e831769abfce89d2adee3aadc5f7" prot="public" static="no">
        <type><ref refid="classGambit_1_1Spec" kindref="compound">Spec</ref>&lt; D &gt;</type>
        <definition>typedef Spec&lt;D&gt; Gambit::Spec&lt; DerivedSpec &gt;::Self</definition>
        <argsstring></argsstring>
        <name>Self</name>
        <qualifiedname>Gambit::Spec::Self</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="100" column="23" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1a80dddcba2892f90ccef373a0f51c3710" prot="public" static="no">
        <type><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits</ref>&lt; D &gt;::Contents</type>
        <definition>typedef SpecTraits&lt;D&gt;::Contents Gambit::Spec&lt; DerivedSpec &gt;::Contents</definition>
        <argsstring></argsstring>
        <name>Contents</name>
        <qualifiedname>Gambit::Spec::Contents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Note: Wrapper need to define a specialisation of <ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits</ref>, which typedefs Model and Input. &quot;Grab&quot; these typedefs here to simplify notation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="105" column="49" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1ac9221898f513865a71aa960ad6b98066" prot="public" static="no">
        <type><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits</ref>&lt; D &gt;::Model</type>
        <definition>typedef SpecTraits&lt;D&gt;::Model Gambit::Spec&lt; DerivedSpec &gt;::Model</definition>
        <argsstring></argsstring>
        <name>Model</name>
        <qualifiedname>Gambit::Spec::Model</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="106" column="49" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1afba2b674ca82b08cb9da7efe9b748f87" prot="public" static="no">
        <type><ref refid="structGambit_1_1SpecTraits" kindref="compound">SpecTraits</ref>&lt; D &gt;::Input</type>
        <definition>typedef SpecTraits&lt;D&gt;::Input Gambit::Spec&lt; DerivedSpec &gt;::Input</definition>
        <argsstring></argsstring>
        <name>Input</name>
        <qualifiedname>Gambit::Spec::Input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="107" column="49" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1a6422cde16683cddf868ef3ab2086d091" prot="public" static="no">
        <type><ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; D, <ref refid="structGambit_1_1MapTag_1_1Get" kindref="compound">MapTag::Get</ref> &gt;</type>
        <definition>typedef MapTypes&lt;D,MapTag::Get&gt; Gambit::Spec&lt; DerivedSpec &gt;::MTget</definition>
        <argsstring></argsstring>
        <name>MTget</name>
        <qualifiedname>Gambit::Spec::MTget</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="109" column="27" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1ae001321f0ef3e004af15e3d7cc2d8dee" prot="public" static="no">
        <type><ref refid="structGambit_1_1MapTypes" kindref="compound">MapTypes</ref>&lt; D, <ref refid="structGambit_1_1MapTag_1_1Set" kindref="compound">MapTag::Set</ref> &gt;</type>
        <definition>typedef MapTypes&lt;D,MapTag::Set&gt; Gambit::Spec&lt; DerivedSpec &gt;::MTset</definition>
        <argsstring></argsstring>
        <name>MTset</name>
        <qualifiedname>Gambit::Spec::MTset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="110" column="27" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1a46858e18ee3cb4193dbaee50b698e0b4" prot="public" static="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTget</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt;Par::Tags,MapCollection&lt;MTget&gt; &gt; Gambit::Spec&lt; DerivedSpec &gt;::GetterMaps</definition>
        <argsstring></argsstring>
        <name>GetterMaps</name>
        <qualifiedname>Gambit::Spec::GetterMaps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Will need a map of map collections for both the getters and setters, containing the map collections for the permitted parameter types </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="248" column="27" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classGambit_1_1Spec_1a72b345be00d45ee6413b1d6a7e281124" prot="public" static="no">
        <type>std::map&lt; <ref refid="namespaceGambit_1_1Par_1ac8185e571d2b5febfc74c2ce6b8f27d4" kindref="member">Par::Tags</ref>, <ref refid="structGambit_1_1MapCollection" kindref="compound">MapCollection</ref>&lt; <ref refid="structGambit_1_1MapTypes" kindref="compound">MTset</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt;Par::Tags,MapCollection&lt;MTset&gt; &gt; Gambit::Spec&lt; DerivedSpec &gt;::SetterMaps</definition>
        <argsstring></argsstring>
        <name>SetterMaps</name>
        <qualifiedname>Gambit::Spec::SetterMaps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="249" column="27" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classGambit_1_1Spec_1a9f5166ccee9252e531923c65ab33fe37" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class FptrFinder</definition>
        <argsstring></argsstring>
        <name>FptrFinder</name>
        <qualifiedname>Gambit::Spec::FptrFinder</qualifiedname>
        <param>
          <type><ref refid="classGambit_1_1FptrFinder" kindref="compound">FptrFinder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="96" column="19" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classGambit_1_1Spec_1a471ed98efd9bb9072a1b83db0e8ce89b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classGambit_1_1Spec_1a46858e18ee3cb4193dbaee50b698e0b4" kindref="member">GetterMaps</ref></type>
        <definition>const Spec&lt; D &gt;::GetterMaps Gambit::Spec&lt; D &gt;::getter_maps</definition>
        <argsstring></argsstring>
        <name>getter_maps</name>
        <qualifiedname>Gambit::Spec::getter_maps</qualifiedname>
        <briefdescription>
<para>Initialise maps (uses filler overrides from DerivedSpec if defined) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="250" column="34" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGambit_1_1Spec_1a0ce21458302cf6f6e7597408ca8cd068" prot="public" static="yes" mutable="no">
        <type>const SetterMaps</type>
        <definition>const Spec&lt; D &gt;::SetterMaps Gambit::Spec&lt; D &gt;::setter_maps</definition>
        <argsstring></argsstring>
        <name>setter_maps</name>
        <qualifiedname>Gambit::Spec::setter_maps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="251" column="34" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string Gambit::Spec&lt; DerivedSpec &gt;::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <qualifiedname>Gambit::Spec::getName</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1af6ff4528277f9d6acab373942f346331">getName</reimplements>
        <briefdescription>
<para>Main public interface functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Get name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="112" column="22" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a42196ab2958c64ec51fdfbc175808dad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::Spec&lt; DerivedSpec &gt;::Spec</definition>
        <argsstring>()</argsstring>
        <name>Spec</name>
        <qualifiedname>Gambit::Spec::Spec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor This uses the &quot;Contents&quot; class to verify (once, not every construction) that this wrapper provides all the basic functionality that it is supposed to. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="205" column="10" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1ac619e173f59a1f523001981952ed30ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Gambit::Spec&lt; DerivedSpec &gt;::~Spec</definition>
        <argsstring>()</argsstring>
        <name>~Spec</name>
        <qualifiedname>Gambit::Spec::~Spec</qualifiedname>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="208" column="18" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classGambit_1_1SubSpectrum" kindref="compound">SubSpectrum</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt; SubSpectrum &gt; Gambit::Spec&lt; DerivedSpec &gt;::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>Gambit::Spec::clone</qualifiedname>
        <reimplements refid="classGambit_1_1SubSpectrum_1a65f9dc06f3c8c6f15094a18b840a149d">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CRTP-style polymorphic clone function Now derived classes will not need to re-implement the clone function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Elements/include/gambit/Elements/spec_head.hpp" line="212" column="34" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="212" bodyend="217"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Need to forward declare <ref refid="classGambit_1_1Spec" kindref="compound">Spec</ref> class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Gambit::Spec&lt; DerivedSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Gambit::SubSpectrum</label>
        <link refid="classGambit_1_1SubSpectrum"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Gambit::DummyInput</label>
        <link refid="classGambit_1_1DummyInput"/>
      </node>
      <node id="3">
        <label>Gambit::DummyModel</label>
        <link refid="classGambit_1_1DummyModel"/>
      </node>
      <node id="1">
        <label>Gambit::Spec&lt; DerivedSpec &gt;</label>
        <link refid="classGambit_1_1Spec"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>dummymodel</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>dummyinput</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Gambit::SubSpectrum</label>
        <link refid="classGambit_1_1SubSpectrum"/>
      </node>
    </collaborationgraph>
    <location file="Elements/include/gambit/Elements/spec_head.hpp" line="93" column="4" bodyfile="Elements/include/gambit/Elements/spec_head.hpp" bodystart="94" bodyend="253"/>
    <listofallmembers>
      <member refid="classGambit_1_1SubSpectrum_1acdbd6db5cc3b473b7e6445bfcf686f64" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>add_to_SLHAea</name></member>
      <member refid="classGambit_1_1Spec_1a55f346d5bd5a3246a47a5db8404949fb" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>clone</name></member>
      <member refid="classGambit_1_1Spec_1a80dddcba2892f90ccef373a0f51c3710" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>Contents</name></member>
      <member refid="classGambit_1_1Spec_1a7ecd550a7de5305518b34181187c3544" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>D</name></member>
      <member refid="classGambit_1_1Spec_1a67132916b8ea14758e0e222f9948075a" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>dummyinput</name></member>
      <member refid="classGambit_1_1Spec_1a52e6395fb74217ac8421fbb8beeed75c" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>dummymodel</name></member>
      <member refid="classGambit_1_1Spec_1a2d75af9b21cb3ae6980f4d06fe51ffd2" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>fill_getter_maps</name></member>
      <member refid="classGambit_1_1Spec_1a11ccd60a2b06fc6e91c56f0c7045b54d" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>fill_setter_maps</name></member>
      <member refid="classGambit_1_1Spec_1aa7ee505f1037005ab30a4a09b7d468d7" prot="private" virt="non-virtual"><scope>Gambit::Spec</scope><name>final_fill_getter_maps</name></member>
      <member refid="classGambit_1_1Spec_1ac2673a43d9c04922d5668240a50d9ed0" prot="private" virt="non-virtual"><scope>Gambit::Spec</scope><name>final_fill_setter_maps</name></member>
      <member refid="classGambit_1_1Spec_1a9f5166ccee9252e531923c65ab33fe37" prot="private" virt="non-virtual"><scope>Gambit::Spec</scope><name>FptrFinder</name></member>
      <member refid="classGambit_1_1Spec_1a32039cdccf1c944121203d2eec5e6294" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>get</name></member>
      <member refid="classGambit_1_1Spec_1a48c24aae484150638d00063f4f3784ef" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>get</name></member>
      <member refid="classGambit_1_1Spec_1a45d36489185d33a2d32ac94a95e61e04" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a4aa3c288df9625876aa5dc1271450a4f" prot="public" virt="non-virtual" ambiguityscope="Gambit::SubSpectrum::"><scope>Gambit::Spec</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ad777663700297fc43301c2a71288e56c" prot="public" virt="non-virtual" ambiguityscope="Gambit::SubSpectrum::"><scope>Gambit::Spec</scope><name>get</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a785b082b5f58bd249dc1a6f6321db435" prot="public" virt="non-virtual" ambiguityscope="Gambit::SubSpectrum::"><scope>Gambit::Spec</scope><name>get</name></member>
      <member refid="classGambit_1_1Spec_1a1ebb99da57096b91657e56ec58a7d2b1" prot="private" virt="non-virtual"><scope>Gambit::Spec</scope><name>get_index_offset</name></member>
      <member refid="classGambit_1_1Spec_1a6497115a3da1e3be0bae8dbf09597a82" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>get_Input</name></member>
      <member refid="classGambit_1_1Spec_1a0728e2404207643cef8af76fa9b557be" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>get_Input</name></member>
      <member refid="classGambit_1_1Spec_1a15563086ec03ac87244c56c3d918b051" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>get_Model</name></member>
      <member refid="classGambit_1_1Spec_1ac08988f76e5ecd58841101ffa576fba7" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>get_Model</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a5e9acc22b9d462e531c50b5727c870c1" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>get_numbers_stable_particles</name></member>
      <member refid="classGambit_1_1Spec_1ac2f5dcb72ade4248d48a08316cb2a5ce" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>getName</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a7bd448d64af954e4b596f4a6eebea0e9" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>GetScale</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a5a6fd9949ec1ffe5d0b1d6b64f568b01" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>getSLHAea</name></member>
      <member refid="classGambit_1_1Spec_1a471ed98efd9bb9072a1b83db0e8ce89b" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>getter_maps</name></member>
      <member refid="classGambit_1_1Spec_1a0c46a470afcf6e02b6fadd398cf3e186" prot="private" virt="non-virtual"><scope>Gambit::Spec</scope><name>getter_maps_fill_tags</name></member>
      <member refid="classGambit_1_1Spec_1a46858e18ee3cb4193dbaee50b698e0b4" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>GetterMaps</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aa4b3a1ca4b864081a054b323a1c2f90f" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>hard_lower</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a7f39428653fa985b340c1df498d6ec42" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>hard_upper</name></member>
      <member refid="classGambit_1_1Spec_1a1a03962018f5cf85f34261eeca2106a6" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>has</name></member>
      <member refid="classGambit_1_1Spec_1aad9ca06fbc280f69a1f7be1bd49c571b" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>has</name></member>
      <member refid="classGambit_1_1Spec_1a848841a535a7e421544bfaae913c96b9" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a4828fe7699db6cd695871eac0e944f90" prot="public" virt="non-virtual" ambiguityscope="Gambit::SubSpectrum::"><scope>Gambit::Spec</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ab8004e0a7ca69f1a0fffa7b18a3f7182" prot="public" virt="non-virtual" ambiguityscope="Gambit::SubSpectrum::"><scope>Gambit::Spec</scope><name>has</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a1ce6d110547e72c5db901dd92c40444b" prot="public" virt="non-virtual" ambiguityscope="Gambit::SubSpectrum::"><scope>Gambit::Spec</scope><name>has</name></member>
      <member refid="classGambit_1_1Spec_1a21cfe3f6587fc2c37247524a48e0291a" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>index_offset</name></member>
      <member refid="classGambit_1_1Spec_1a11885c8d86ed99101f08a3967f63061b" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>input</name></member>
      <member refid="classGambit_1_1Spec_1a887a14df9f65f1180a6293d376a332a5" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>input</name></member>
      <member refid="classGambit_1_1Spec_1afba2b674ca82b08cb9da7efe9b748f87" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>Input</name></member>
      <member refid="classGambit_1_1Spec_1ac9221898f513865a71aa960ad6b98066" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>Model</name></member>
      <member refid="classGambit_1_1Spec_1a8d1d5df6f8e2acca6f370732a8e13304" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>model</name></member>
      <member refid="classGambit_1_1Spec_1ab3ebfb60469691d2e534fd61edb2f321" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>model</name></member>
      <member refid="classGambit_1_1Spec_1a6422cde16683cddf868ef3ab2086d091" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>MTget</name></member>
      <member refid="classGambit_1_1Spec_1ae001321f0ef3e004af15e3d7cc2d8dee" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>MTset</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ae733c2e2d247f846a957dd880d165144" prot="protected" virt="non-virtual"><scope>Gambit::Spec</scope><name>override_maps</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a6f23c9146e2d9eab8a3db88f5a5232b6" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>PDG_translator</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a123082cb4740033d2ae243c1d27cea28" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>RunToScale</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a64445baba3f7a8bf116bea7caba1a52c" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>RunToScaleOverride</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a12bb8ae854bdbf402adcd3eeab3387e2" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aaeff9db607b0a8118fdcd380ee6a0eba" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a69d2743c3bc07fd881cc83fd5bbe216a" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a8271aef7ca1cca4c7da767e5cade9c59" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1adf70c0de7818c1d85c0d0fcd8013aa76" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>safeget</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a622717528952171fa114ae152c7ae340" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>safeget</name></member>
      <member refid="classGambit_1_1Spec_1a4808e831769abfce89d2adee3aadc5f7" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>Self</name></member>
      <member refid="classGambit_1_1Spec_1a3c8274c5d829777b70f0b76a2288fd60" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>set</name></member>
      <member refid="classGambit_1_1Spec_1a24d8166cfb2158151a17af9aa692100e" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>set</name></member>
      <member refid="classGambit_1_1Spec_1a16af53e2c8878cf0432b99cf63e3161b" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>set</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a723f6a66f3875abd2c6a6e8d8e03266d" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ad272d296f35e6ad0168b4e092eb53943" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1abc80e335179d3633c2f537325673e0ab" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a456eeb816ef8539eaa8bd85e04d6f1c8" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1adef6cacf9f63fcd1cbba22629399ad18" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a8f4bd036dd357d53e34e28615842a803" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override</name></member>
      <member refid="classGambit_1_1SubSpectrum_1ae0c6a2e9b63648b48911b76d6fabf63d" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a53c514918a7a32dce21697dbc9af95d7" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1af1551952a18488ce3793e062bf933a7a" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a21cab80b6c51bfb5801fb5e31896e164" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>set_override_vector</name></member>
      <member refid="classGambit_1_1SubSpectrum_1aa6014ef072831d0117332e3df719ebf3" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>SetScale</name></member>
      <member refid="classGambit_1_1Spec_1a0ce21458302cf6f6e7597408ca8cd068" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>setter_maps</name></member>
      <member refid="classGambit_1_1Spec_1a02edfe7c0042d47f86809346ffaee4a3" prot="private" virt="non-virtual"><scope>Gambit::Spec</scope><name>setter_maps_fill_tags</name></member>
      <member refid="classGambit_1_1Spec_1a72b345be00d45ee6413b1d6a7e281124" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>SetterMaps</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a86e81042c8a0c13821a9c45d616c5b9b" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>soft_lower</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a3fa1af32eea87011aa4c6dce006878c7" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>soft_upper</name></member>
      <member refid="classGambit_1_1Spec_1a42196ab2958c64ec51fdfbc175808dad" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>Spec</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a56f353d2be541104f324b2e449a0e682" prot="public" virt="non-virtual"><scope>Gambit::Spec</scope><name>SubSpectrum</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a7f86c4329e031f37ec2faffa5b1a48f4" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>writeSLHAfile</name></member>
      <member refid="classGambit_1_1Spec_1ac619e173f59a1f523001981952ed30ef" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>~Spec</name></member>
      <member refid="classGambit_1_1SubSpectrum_1a52ae9f8b079817bb6a26b53779fd1df9" prot="public" virt="virtual"><scope>Gambit::Spec</scope><name>~SubSpectrum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
